{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/2016_HK_1.jpg","path":"images/2016_HK_1.jpg","modified":1,"renderable":0},{"_id":"source/images/2016_HK_2.jpg","path":"images/2016_HK_2.jpg","modified":1,"renderable":0},{"_id":"source/images/2016_HK_3.jpg","path":"images/2016_HK_3.jpg","modified":1,"renderable":0},{"_id":"source/images/2016_HK_4.jpg","path":"images/2016_HK_4.jpg","modified":1,"renderable":0},{"_id":"source/images/2016_HK_5.jpg","path":"images/2016_HK_5.jpg","modified":1,"renderable":0},{"_id":"themes/polarbear/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/polarbear/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"source/images/20170606_1.png","path":"images/20170606_1.png","modified":1,"renderable":0},{"_id":"themes/polarbear/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/js/src/theme.js","path":"js/src/theme.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/polarbear/.eslintrc","hash":"38131da004ee91a91f25644508b377b261f59687","modified":1515328833101},{"_id":"themes/polarbear/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1515328833101},{"_id":"themes/polarbear/README.md","hash":"28051a9876e18c26675101c671828e24930acba9","modified":1515328833101},{"_id":"themes/polarbear/_config.yml","hash":"b438fad429210aacee0d7ff549aec09f4cbc92c6","modified":1515332105603},{"_id":"themes/polarbear/package.json","hash":"645cc09cf8cfa5298aa897c1b7ec7d9605deaa81","modified":1515328833101},{"_id":"source/_posts/Echarts 与 百度地图API 初步使用.md","hash":"ef1f8c80de0c32adcd5c16eff7a2147090076a69","modified":1515465960502},{"_id":"source/_posts/ExtendGcd,即扩展欧几里得算法的C++模板化解释.md","hash":"88f0b7538a1728529ff2d1080e886489b17a7d27","modified":1515458885039},{"_id":"source/_posts/HDU 2181 哈密顿绕行世界问题.md","hash":"541de84ef39fb626b81a3f01f14cffb71cac08f7","modified":1515377509556},{"_id":"source/_posts/Java文本带编码读入读出.md","hash":"b9dc06aece06e171b0611820e2c25922ef836c71","modified":1515465616768},{"_id":"source/_posts/[转载]KMP算法详解：简洁易懂的KMP算法.md","hash":"debe81d3927a51f1091a9a6a1204ad987e34f879","modified":1515378560012},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1515377471907},{"_id":"source/_posts/两道基础线段树简解:HDU 1166，HDU 1754.md","hash":"b4c9bad70d82abe0462f3a1fc8d7dab32b04d2bd","modified":1515459466224},{"_id":"source/_posts/互农——文库模块总结.md","hash":"b4e4e0cbae96fd26a492de031abfbbd8d38808a7","modified":1515465411266},{"_id":"source/_posts/再谈字典树：HDOJ 1671 Phone List（内存释放）.md","hash":"debd13eef859b41a63b975545ebc5fb5e574a597","modified":1515466555926},{"_id":"source/_posts/字典树例题介绍：ZOJ 1109,HDOJ 1075.md","hash":"703aed5451a115e10057f507bb5e20d481aeeed5","modified":1515459350253},{"_id":"source/_posts/本科生涯的ACM历程总结——香港区域赛.md","hash":"9882255998be31e9d06581e24269935b68bc90be","modified":1515463586903},{"_id":"source/about/index.md","hash":"ec79f0d2e2fa17adff66c3f09ab418142c5df5da","modified":1515331958803},{"_id":"source/images/2016_HK_1.jpg","hash":"043f2ae764e3ffa9aca3d311bc88d5d0382ff02f","modified":1515459924058},{"_id":"source/images/2016_HK_2.jpg","hash":"a7451f257830a5e027c0e4c188c5567b4a54e88c","modified":1515463382584},{"_id":"source/images/2016_HK_3.jpg","hash":"9fa16dea0d79d7f28173b427eca0b45cc0b25d0f","modified":1515463434501},{"_id":"source/images/2016_HK_4.jpg","hash":"b8620107f4470ce96e510102c154a11bf4095e91","modified":1515463629495},{"_id":"source/images/2016_HK_5.jpg","hash":"dd819d083989f599babb41d96d95365fbe0c2aec","modified":1515463639575},{"_id":"themes/polarbear/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1515328833081},{"_id":"themes/polarbear/.git/config","hash":"02a6d07f4f29bc2c61a992f6a496eb7b88928a6f","modified":1515328833081},{"_id":"themes/polarbear/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515328831069},{"_id":"themes/polarbear/.git/index","hash":"7bbd0e0c08968449f306977ce3f104c02da1b8e7","modified":1515331823806},{"_id":"themes/polarbear/.git/packed-refs","hash":"8c89be73077e047618c270087179cfb2697e2243","modified":1515328833081},{"_id":"themes/polarbear/languages/default.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1515328833101},{"_id":"themes/polarbear/languages/en.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1515328833101},{"_id":"themes/polarbear/languages/zh-cn.yml","hash":"be347d8f215c1d36a7a906143b1411e5aaf5d500","modified":1515328833101},{"_id":"themes/polarbear/layout/_layout.swig","hash":"60ad6ead7c72b9d94a4adf073884edc23f0751ea","modified":1515328833101},{"_id":"themes/polarbear/layout/archive.swig","hash":"600c71de731ac0ac8c281c3c9df1d7e9b62d2a9d","modified":1515328833101},{"_id":"themes/polarbear/layout/categories.swig","hash":"21987803e162bd9383502d9de07d5d531b78cb53","modified":1515328833101},{"_id":"themes/polarbear/layout/index.swig","hash":"5c1dce2ea06d8de6f05f92f95cb1449cefc846bc","modified":1515328833101},{"_id":"themes/polarbear/layout/page.swig","hash":"a168c6e1dcf21af6408a713f8512b77de0dc60f3","modified":1515328833101},{"_id":"themes/polarbear/layout/post.swig","hash":"f7a8b96953374694c50d131b1b760fd84b2d2d51","modified":1515328833101},{"_id":"themes/polarbear/source/favicon.ico","hash":"7d7c441f635c35b73f060f698773b14b7f306f4c","modified":1515328833101},{"_id":"themes/polarbear/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515328831069},{"_id":"themes/polarbear/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515328831069},{"_id":"themes/polarbear/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515328831069},{"_id":"themes/polarbear/.git/logs/HEAD","hash":"bcde33c7c37034d1cd10d737996295b4da4aef72","modified":1515328833081},{"_id":"themes/polarbear/layout/_macro/archive.swig","hash":"0f298085c0a1c556b41a5785e9fb3f2cacf01e34","modified":1515328833101},{"_id":"themes/polarbear/layout/_macro/post.swig","hash":"649d15fe32fa975a8444de66d3651e03b55e3cce","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/comments.swig","hash":"9ba815734a4d807859f0aeafd5536b2d35d26074","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/footer.swig","hash":"4b88f30ad6218c87d27bc5c5b37bbbd97732cf59","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/head.swig","hash":"44c45d90d9a3db3401f6aa219cd26f38cdd0960b","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/header.swig","hash":"2e7d1faf49dadbf87b5925ff8da643cb470d6199","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/widget.swig","hash":"d8181794388ef3baa26c2d5cf8d71ae05472b32e","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/comments.swig","hash":"256713e117d67e2caad21db52bc0d51460e4ff7e","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/config.swig","hash":"4532063827e51b5c0dc3f58ca8c37896959887ac","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/libs.swig","hash":"615f82ddd2f89e87a604b51773fd719c78f90580","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/theme.swig","hash":"44582de16d91f5cde5fa28a21db408385a46ff8e","modified":1515328833101},{"_id":"themes/polarbear/source/css/_base.scss","hash":"27c36dfe4b2d159c64e666bfe8561fbdc591e6a5","modified":1515328833101},{"_id":"themes/polarbear/source/css/_layout.scss","hash":"adfe6b08a183326e2115974860d1862288d4789c","modified":1515328833101},{"_id":"themes/polarbear/source/css/_variables.scss","hash":"d3f72d21bdd3cae17118323ae7f20f04d484a0f5","modified":1515328833101},{"_id":"themes/polarbear/source/css/style.scss","hash":"2f1d29a63c3c8f8c615049b0233db528b6ab3230","modified":1515328833101},{"_id":"source/images/20170606_1.png","hash":"27c376c27534e51fdd5f1330cea10d865a9b1dcc","modified":1515465843424},{"_id":"themes/polarbear/.git/objects/pack/pack-141b6141d145942339eed204739cc17ac4a9f135.idx","hash":"61d359639649cd254d6bc6c0a8b2e476f841d932","modified":1515328833069},{"_id":"themes/polarbear/.git/refs/heads/master","hash":"fec0245bc6a1d11c80d2f5fff6ff6bc56b53756b","modified":1515328833081},{"_id":"themes/polarbear/layout/_partial/_head/meta.swig","hash":"5eef6defbaf10f3f6d3b341d2d1af2e4d7aeb5a9","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/_widget/categories.swig","hash":"8bb8094fd3d96c0dd7e58fd658384a5df3a7e2ec","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/_widget/custom.swig","hash":"3fd8e37b94982927fdd0eaa1f658ada660f23b9c","modified":1515328833101},{"_id":"themes/polarbear/layout/_partial/_widget/tags.swig","hash":"a14e2bda31b15cac11c29d0abb623543a6c87edc","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/_analytics/baidu-analytics.swig","hash":"5d62309b16071f1b6952891ec8e1f1d42e38a088","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/_analytics/google-analytics.swig","hash":"f44684799386fbd4af6e5994b0c14c85eeff060c","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/_comments/disqus.swig","hash":"f0e8b2ff1556622c0dee10a82e77646695b0f8dd","modified":1515328833101},{"_id":"themes/polarbear/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1515328833101},{"_id":"themes/polarbear/source/css/_common/_animation.scss","hash":"725af3ea621de186d6d61749836d5b491a96c1e4","modified":1515328833101},{"_id":"themes/polarbear/source/css/_common/_normalize.scss","hash":"259a1a0584f43efa6de2573a45fedfd59d4f39c0","modified":1515328833101},{"_id":"themes/polarbear/source/css/_common/_utils.scss","hash":"7719505ff3185a9f8fad05fe092fa91dd63d900c","modified":1515328833101},{"_id":"themes/polarbear/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_archive.scss","hash":"d4fa3756a4cab145f76fccc3c69d81b3412cec36","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_categories.scss","hash":"eb9fa27704fa280c6e8cc7b7f44b283cd2fe4ad3","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_footer.scss","hash":"5d708caa8a96f84642404fe8a0d7a755092710db","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_header.scss","hash":"b4e97e6704ab530ec3b789866d689b736e36de9e","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_pagination.scss","hash":"7362208b41453429adae449acc916f8633077248","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_iconfont.scss","hash":"ae9d1019bdbe6de4fe97aabbd42f489039e978a0","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_post.scss","hash":"71bfa582c26c491c8791dadbc3cb135284a123a2","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_tags.scss","hash":"1928c8483f51035edccd6899d7f4ee06673f2804","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_widget.scss","hash":"2fcea4e8e43b79c73bf4bd6dbf0c1a2368d4c6ef","modified":1515328833101},{"_id":"themes/polarbear/source/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1515328833101},{"_id":"themes/polarbear/source/js/src/theme.js","hash":"6b76d3006694d56c843b8f968f224985a3fcce4e","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1515328833105},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1515328833105},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1515328833105},{"_id":"themes/polarbear/.git/objects/pack/pack-141b6141d145942339eed204739cc17ac4a9f135.pack","hash":"9e6b9897279cc90457080a9f97e98b9725b86a55","modified":1515328833069},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1515328833105},{"_id":"themes/polarbear/.git/logs/refs/heads/master","hash":"bcde33c7c37034d1cd10d737996295b4da4aef72","modified":1515328833081},{"_id":"themes/polarbear/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515328833081},{"_id":"themes/polarbear/source/css/_partial/_post/_code.scss","hash":"446dbbc70ba45e41079e2954549c248f5affc7c0","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_post/_content.scss","hash":"899c7c25bfa4fe00d85734af0d71bc4caf2a7337","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_post/_footer.scss","hash":"d4c0fc62e69412304691d58984fec0aa963e1117","modified":1515328833101},{"_id":"themes/polarbear/source/css/_partial/_post/_header.scss","hash":"ceca6f4b00154542c57bc6fe451e01892a9338d2","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515328833101},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1515328833101},{"_id":"themes/polarbear/.git/logs/refs/remotes/origin/HEAD","hash":"bcde33c7c37034d1cd10d737996295b4da4aef72","modified":1515328833081}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-01-07T13:32:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-01-07 21:32:38\n---\n","updated":"2018-01-07T13:32:38.803Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjc71nzu60001yg3izzqp4aq8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Echarts 与 百度地图API 初步使用","date":"2017-06-06T11:35:00.000Z","_content":"\n由于要做一个数据的统计（微博等社交网络的流行病分析），借用echarts开源统计项目做一个简单的数据可视化，大致效果如下链接\nhttp://echarts.baidu.com/demo.html#effectScatter-bmap\n\n以下是我实现后的效果图，代码很简单，但还是折腾了很久。（div的height数据千万记得写）。不同的演示效果和数据可以在上述网站中找到。\n\n<div align=center>\n<img src=\"/images/20170606_1.png\" >\n</div>\n\n下面是很长的代码：\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>ECharts map Demo</title>\n<script type=\"text/javascript\" src=\"js/jquery-2.2.3.min.js\"></script>\n<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=你的AK秘钥\"></script>\n\n</head>\n\n<body>\n    <div id=\"main\" style=\"height:960px; width:auto;\"></div>\n\n<script src=\"dist/echarts.js\"></script>\n<!-- 引入百度地图扩展 -->\n<script src=\"dist/extension/bmap.min.js\"></script>\n<script>\n\nvar myChart = echarts.init(document.getElementById('main'));\nvar data = [\n     {name: '海门', value: 9},\n     {name: '鄂尔多斯', value: 12},\n     {name: '招远', value: 12},\n     {name: '舟山', value: 12},\n     {name: '齐齐哈尔', value: 14},\n     {name: '盐城', value: 15},\n     {name: '赤峰', value: 16},\n     {name: '青岛', value: 18},\n     {name: '乳山', value: 18},\n     {name: '金昌', value: 19},\n     {name: '泉州', value: 21},\n     {name: '莱西', value: 21},\n     {name: '日照', value: 21},\n     {name: '胶南', value: 22},\n     {name: '南通', value: 23},\n     {name: '拉萨', value: 24},\n     {name: '云浮', value: 24},\n     {name: '梅州', value: 25},\n     {name: '文登', value: 25},\n     {name: '上海', value: 25},\n     {name: '攀枝花', value: 25},\n     {name: '威海', value: 25},\n     {name: '承德', value: 25},\n     {name: '厦门', value: 26},\n     {name: '汕尾', value: 26},\n     {name: '潮州', value: 26},\n     {name: '丹东', value: 27},\n     {name: '太仓', value: 27},\n     {name: '曲靖', value: 27},\n     {name: '烟台', value: 28},\n     {name: '福州', value: 29},\n     {name: '瓦房店', value: 30},\n     {name: '即墨', value: 30},\n     {name: '抚顺', value: 31},\n     {name: '玉溪', value: 31},\n     {name: '张家口', value: 31},\n     {name: '阳泉', value: 31},\n     {name: '莱州', value: 32},\n     {name: '湖州', value: 32},\n     {name: '汕头', value: 32},\n     {name: '昆山', value: 33},\n     {name: '宁波', value: 33},\n     {name: '湛江', value: 33},\n     {name: '揭阳', value: 34},\n     {name: '荣成', value: 34},\n     {name: '连云港', value: 35},\n     {name: '葫芦岛', value: 35},\n     {name: '常熟', value: 36},\n     {name: '东莞', value: 36},\n     {name: '河源', value: 36},\n     {name: '淮安', value: 36},\n     {name: '泰州', value: 36},\n     {name: '南宁', value: 37},\n     {name: '营口', value: 37},\n     {name: '惠州', value: 37},\n     {name: '江阴', value: 37},\n     {name: '蓬莱', value: 37},\n     {name: '韶关', value: 38},\n     {name: '嘉峪关', value: 38},\n     {name: '广州', value: 38},\n     {name: '延安', value: 38},\n     {name: '太原', value: 39},\n     {name: '清远', value: 39},\n     {name: '中山', value: 39},\n     {name: '昆明', value: 39},\n     {name: '寿光', value: 40},\n     {name: '盘锦', value: 40},\n     {name: '长治', value: 41},\n     {name: '深圳', value: 41},\n     {name: '珠海', value: 42},\n     {name: '宿迁', value: 43},\n     {name: '咸阳', value: 43},\n     {name: '铜川', value: 44},\n     {name: '平度', value: 44},\n     {name: '佛山', value: 44},\n     {name: '海口', value: 44},\n     {name: '江门', value: 45},\n     {name: '章丘', value: 45},\n     {name: '肇庆', value: 46},\n     {name: '大连', value: 47},\n     {name: '临汾', value: 47},\n     {name: '吴江', value: 47},\n     {name: '石嘴山', value: 49},\n     {name: '沈阳', value: 50},\n     {name: '苏州', value: 50},\n     {name: '茂名', value: 50},\n     {name: '嘉兴', value: 51},\n     {name: '长春', value: 51},\n     {name: '胶州', value: 52},\n     {name: '银川', value: 52},\n     {name: '张家港', value: 52},\n     {name: '三门峡', value: 53},\n     {name: '锦州', value: 54},\n     {name: '南昌', value: 54},\n     {name: '柳州', value: 54},\n     {name: '三亚', value: 54},\n     {name: '自贡', value: 56},\n     {name: '吉林', value: 56},\n     {name: '阳江', value: 57},\n     {name: '泸州', value: 57},\n     {name: '西宁', value: 57},\n     {name: '宜宾', value: 58},\n     {name: '呼和浩特', value: 58},\n     {name: '成都', value: 58},\n     {name: '大同', value: 58},\n     {name: '镇江', value: 59},\n     {name: '桂林', value: 59},\n     {name: '张家界', value: 59},\n     {name: '宜兴', value: 59},\n     {name: '北海', value: 60},\n     {name: '西安', value: 61},\n     {name: '金坛', value: 62},\n     {name: '东营', value: 62},\n     {name: '牡丹江', value: 63},\n     {name: '遵义', value: 63},\n     {name: '绍兴', value: 63},\n     {name: '扬州', value: 64},\n     {name: '常州', value: 64},\n     {name: '潍坊', value: 65},\n     {name: '重庆', value: 66},\n     {name: '台州', value: 67},\n     {name: '南京', value: 67},\n     {name: '滨州', value: 70},\n     {name: '贵阳', value: 71},\n     {name: '无锡', value: 71},\n     {name: '本溪', value: 71},\n     {name: '克拉玛依', value: 72},\n     {name: '渭南', value: 72},\n     {name: '马鞍山', value: 72},\n     {name: '宝鸡', value: 72},\n     {name: '焦作', value: 75},\n     {name: '句容', value: 75},\n     {name: '北京', value: 79},\n     {name: '徐州', value: 79},\n     {name: '衡水', value: 80},\n     {name: '包头', value: 80},\n     {name: '绵阳', value: 80},\n     {name: '乌鲁木齐', value: 84},\n     {name: '枣庄', value: 84},\n     {name: '杭州', value: 84},\n     {name: '淄博', value: 85},\n     {name: '鞍山', value: 86},\n     {name: '溧阳', value: 86},\n     {name: '库尔勒', value: 86},\n     {name: '安阳', value: 90},\n     {name: '开封', value: 90},\n     {name: '济南', value: 92},\n     {name: '德阳', value: 93},\n     {name: '温州', value: 95},\n     {name: '九江', value: 96},\n     {name: '邯郸', value: 98},\n     {name: '临安', value: 99},\n     {name: '兰州', value: 99},\n     {name: '沧州', value: 100},\n     {name: '临沂', value: 103},\n     {name: '南充', value: 104},\n     {name: '天津', value: 105},\n     {name: '富阳', value: 106},\n     {name: '泰安', value: 112},\n     {name: '诸暨', value: 112},\n     {name: '郑州', value: 113},\n     {name: '哈尔滨', value: 114},\n     {name: '聊城', value: 116},\n     {name: '芜湖', value: 117},\n     {name: '唐山', value: 119},\n     {name: '平顶山', value: 119},\n     {name: '邢台', value: 119},\n     {name: '德州', value: 120},\n     {name: '济宁', value: 120},\n     {name: '荆州', value: 127},\n     {name: '宜昌', value: 130},\n     {name: '义乌', value: 132},\n     {name: '丽水', value: 133},\n     {name: '洛阳', value: 134},\n     {name: '秦皇岛', value: 136},\n     {name: '株洲', value: 143},\n     {name: '石家庄', value: 147},\n     {name: '莱芜', value: 148},\n     {name: '常德', value: 152},\n     {name: '保定', value: 153},\n     {name: '湘潭', value: 154},\n     {name: '金华', value: 157},\n     {name: '岳阳', value: 169},\n     {name: '长沙', value: 175},\n     {name: '衢州', value: 177},\n     {name: '廊坊', value: 193},\n     {name: '菏泽', value: 194},\n     {name: '合肥', value: 229},\n     {name: '武汉', value: 273},\n     {name: '大庆', value: 279}\n];\nvar geoCoordMap = {\n    '海门':[121.15,31.89],\n    '鄂尔多斯':[109.781327,39.608266],\n    '招远':[120.38,37.35],\n    '舟山':[122.207216,29.985295],\n    '齐齐哈尔':[123.97,47.33],\n    '盐城':[120.13,33.38],\n    '赤峰':[118.87,42.28],\n    '青岛':[120.33,36.07],\n    '乳山':[121.52,36.89],\n    '金昌':[102.188043,38.520089],\n    '泉州':[118.58,24.93],\n    '莱西':[120.53,36.86],\n    '日照':[119.46,35.42],\n    '胶南':[119.97,35.88],\n    '南通':[121.05,32.08],\n    '拉萨':[91.11,29.97],\n    '云浮':[112.02,22.93],\n    '梅州':[116.1,24.55],\n    '文登':[122.05,37.2],\n    '上海':[121.48,31.22],\n    '攀枝花':[101.718637,26.582347],\n    '威海':[122.1,37.5],\n    '承德':[117.93,40.97],\n    '厦门':[118.1,24.46],\n    '汕尾':[115.375279,22.786211],\n    '潮州':[116.63,23.68],\n    '丹东':[124.37,40.13],\n    '太仓':[121.1,31.45],\n    '曲靖':[103.79,25.51],\n    '烟台':[121.39,37.52],\n    '福州':[119.3,26.08],\n    '瓦房店':[121.979603,39.627114],\n    '即墨':[120.45,36.38],\n    '抚顺':[123.97,41.97],\n    '玉溪':[102.52,24.35],\n    '张家口':[114.87,40.82],\n    '阳泉':[113.57,37.85],\n    '莱州':[119.942327,37.177017],\n    '湖州':[120.1,30.86],\n    '汕头':[116.69,23.39],\n    '昆山':[120.95,31.39],\n    '宁波':[121.56,29.86],\n    '湛江':[110.359377,21.270708],\n    '揭阳':[116.35,23.55],\n    '荣成':[122.41,37.16],\n    '连云港':[119.16,34.59],\n    '葫芦岛':[120.836932,40.711052],\n    '常熟':[120.74,31.64],\n    '东莞':[113.75,23.04],\n    '河源':[114.68,23.73],\n    '淮安':[119.15,33.5],\n    '泰州':[119.9,32.49],\n    '南宁':[108.33,22.84],\n    '营口':[122.18,40.65],\n    '惠州':[114.4,23.09],\n    '江阴':[120.26,31.91],\n    '蓬莱':[120.75,37.8],\n    '韶关':[113.62,24.84],\n    '嘉峪关':[98.289152,39.77313],\n    '广州':[113.23,23.16],\n    '延安':[109.47,36.6],\n    '太原':[112.53,37.87],\n    '清远':[113.01,23.7],\n    '中山':[113.38,22.52],\n    '昆明':[102.73,25.04],\n    '寿光':[118.73,36.86],\n    '盘锦':[122.070714,41.119997],\n    '长治':[113.08,36.18],\n    '深圳':[114.07,22.62],\n    '珠海':[113.52,22.3],\n    '宿迁':[118.3,33.96],\n    '咸阳':[108.72,34.36],\n    '铜川':[109.11,35.09],\n    '平度':[119.97,36.77],\n    '佛山':[113.11,23.05],\n    '海口':[110.35,20.02],\n    '江门':[113.06,22.61],\n    '章丘':[117.53,36.72],\n    '肇庆':[112.44,23.05],\n    '大连':[121.62,38.92],\n    '临汾':[111.5,36.08],\n    '吴江':[120.63,31.16],\n    '石嘴山':[106.39,39.04],\n    '沈阳':[123.38,41.8],\n    '苏州':[120.62,31.32],\n    '茂名':[110.88,21.68],\n    '嘉兴':[120.76,30.77],\n    '长春':[125.35,43.88],\n    '胶州':[120.03336,36.264622],\n    '银川':[106.27,38.47],\n    '张家港':[120.555821,31.875428],\n    '三门峡':[111.19,34.76],\n    '锦州':[121.15,41.13],\n    '南昌':[115.89,28.68],\n    '柳州':[109.4,24.33],\n    '三亚':[109.511909,18.252847],\n    '自贡':[104.778442,29.33903],\n    '吉林':[126.57,43.87],\n    '阳江':[111.95,21.85],\n    '泸州':[105.39,28.91],\n    '西宁':[101.74,36.56],\n    '宜宾':[104.56,29.77],\n    '呼和浩特':[111.65,40.82],\n    '成都':[104.06,30.67],\n    '大同':[113.3,40.12],\n    '镇江':[119.44,32.2],\n    '桂林':[110.28,25.29],\n    '张家界':[110.479191,29.117096],\n    '宜兴':[119.82,31.36],\n    '北海':[109.12,21.49],\n    '西安':[108.95,34.27],\n    '金坛':[119.56,31.74],\n    '东营':[118.49,37.46],\n    '牡丹江':[129.58,44.6],\n    '遵义':[106.9,27.7],\n    '绍兴':[120.58,30.01],\n    '扬州':[119.42,32.39],\n    '常州':[119.95,31.79],\n    '潍坊':[119.1,36.62],\n    '重庆':[106.54,29.59],\n    '台州':[121.420757,28.656386],\n    '南京':[118.78,32.04],\n    '滨州':[118.03,37.36],\n    '贵阳':[106.71,26.57],\n    '无锡':[120.29,31.59],\n    '本溪':[123.73,41.3],\n    '克拉玛依':[84.77,45.59],\n    '渭南':[109.5,34.52],\n    '马鞍山':[118.48,31.56],\n    '宝鸡':[107.15,34.38],\n    '焦作':[113.21,35.24],\n    '句容':[119.16,31.95],\n    '北京':[116.46,39.92],\n    '徐州':[117.2,34.26],\n    '衡水':[115.72,37.72],\n    '包头':[110,40.58],\n    '绵阳':[104.73,31.48],\n    '乌鲁木齐':[87.68,43.77],\n    '枣庄':[117.57,34.86],\n    '杭州':[120.19,30.26],\n    '淄博':[118.05,36.78],\n    '鞍山':[122.85,41.12],\n    '溧阳':[119.48,31.43],\n    '库尔勒':[86.06,41.68],\n    '安阳':[114.35,36.1],\n    '开封':[114.35,34.79],\n    '济南':[117,36.65],\n    '德阳':[104.37,31.13],\n    '温州':[120.65,28.01],\n    '九江':[115.97,29.71],\n    '邯郸':[114.47,36.6],\n    '临安':[119.72,30.23],\n    '兰州':[103.73,36.03],\n    '沧州':[116.83,38.33],\n    '临沂':[118.35,35.05],\n    '南充':[106.110698,30.837793],\n    '天津':[117.2,39.13],\n    '富阳':[119.95,30.07],\n    '泰安':[117.13,36.18],\n    '诸暨':[120.23,29.71],\n    '郑州':[113.65,34.76],\n    '哈尔滨':[126.63,45.75],\n    '聊城':[115.97,36.45],\n    '芜湖':[118.38,31.33],\n    '唐山':[118.02,39.63],\n    '平顶山':[113.29,33.75],\n    '邢台':[114.48,37.05],\n    '德州':[116.29,37.45],\n    '济宁':[116.59,35.38],\n    '荆州':[112.239741,30.335165],\n    '宜昌':[111.3,30.7],\n    '义乌':[120.06,29.32],\n    '丽水':[119.92,28.45],\n    '洛阳':[112.44,34.7],\n    '秦皇岛':[119.57,39.95],\n    '株洲':[113.16,27.83],\n    '石家庄':[114.48,38.03],\n    '莱芜':[117.67,36.19],\n    '常德':[111.69,29.05],\n    '保定':[115.48,38.85],\n    '湘潭':[112.91,27.87],\n    '金华':[119.64,29.12],\n    '岳阳':[113.09,29.37],\n    '长沙':[113,28.21],\n    '衢州':[118.88,28.97],\n    '廊坊':[116.7,39.53],\n    '菏泽':[115.480656,35.23375],\n    '合肥':[117.27,31.86],\n    '武汉':[114.31,30.52],\n    '大庆':[125.03,46.58]\n};\n\nvar convertData = function (data) {\n    var res = [];\n    for (var i = 0; i < data.length; i++) {\n        var geoCoord = geoCoordMap[data[i].name];\n        if (geoCoord) {\n            res.push({\n                name: data[i].name,\n                value: geoCoord.concat(data[i].value)\n            });\n        }\n    }\n    return res;\n};\n\noption = {\n    title: {\n        text: 'echarts 和 百度地图API Demo',\n        // subtext: 'data from PM25.in',\n        // sublink: 'http://www.pm25.in',\n        left: 'center'\n    },\n    tooltip : {\n        trigger: 'item'\n    },\n    bmap: {\n        center: [104.114129, 37.550339],\n        zoom: 5,\n        roam: true,\n        mapStyle: {\n            styleJson: [{\n                'featureType': 'water',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'land',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#f3f3f3'\n                }\n            }, {\n                'featureType': 'railway',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'highway',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#fdfdfd'\n                }\n            }, {\n                'featureType': 'highway',\n                'elementType': 'labels',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'arterial',\n                'elementType': 'geometry',\n                'stylers': {\n                    'color': '#fefefe'\n                }\n            }, {\n                'featureType': 'arterial',\n                'elementType': 'geometry.fill',\n                'stylers': {\n                    'color': '#fefefe'\n                }\n            }, {\n                'featureType': 'poi',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'green',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'subway',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'manmade',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'local',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'arterial',\n                'elementType': 'labels',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'boundary',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#fefefe'\n                }\n            }, {\n                'featureType': 'building',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'label',\n                'elementType': 'labels.text.fill',\n                'stylers': {\n                    'color': '#999999'\n                }\n            }]\n        }\n    },\n    series : [\n        {\n            name: 'pm2.5',\n            type: 'scatter',\n            coordinateSystem: 'bmap',\n            data: convertData(data),\n            symbolSize: function (val) {\n                return val[2] / 10;\n            },\n            label: {\n                normal: {\n                    formatter: '{b}',\n                    position: 'right',\n                    show: false\n                },\n                emphasis: {\n                    show: true\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'purple'\n                }\n            }\n        },\n        {\n            name: 'Top 5',\n            type: 'effectScatter',\n            coordinateSystem: 'bmap',\n            data: convertData(data.sort(function (a, b) {\n                return b.value - a.value;\n            }).slice(0, 6)),\n            symbolSize: function (val) {\n                return val[2] / 10;\n            },\n            showEffectOn: 'render',\n            rippleEffect: {\n                brushType: 'stroke'\n            },\n            hoverAnimation: true,\n            label: {\n                normal: {\n                    formatter: '{b}',\n                    position: 'right',\n                    show: true\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'purple',\n                    shadowBlur: 10,\n                    shadowColor: '#333'\n                }\n            },\n            zlevel: 1\n        }\n    ]\n};\n\n\n\n\n\nmyChart.setOption(option);\n</script>\n</body>\n\n\n</html>\n```","source":"_posts/Echarts 与 百度地图API 初步使用.md","raw":"---\ntitle: Echarts 与 百度地图API 初步使用\ndate: 2017-06-06 19:35:00\ntags: \"Projects\"\n---\n\n由于要做一个数据的统计（微博等社交网络的流行病分析），借用echarts开源统计项目做一个简单的数据可视化，大致效果如下链接\nhttp://echarts.baidu.com/demo.html#effectScatter-bmap\n\n以下是我实现后的效果图，代码很简单，但还是折腾了很久。（div的height数据千万记得写）。不同的演示效果和数据可以在上述网站中找到。\n\n<div align=center>\n<img src=\"/images/20170606_1.png\" >\n</div>\n\n下面是很长的代码：\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>ECharts map Demo</title>\n<script type=\"text/javascript\" src=\"js/jquery-2.2.3.min.js\"></script>\n<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=你的AK秘钥\"></script>\n\n</head>\n\n<body>\n    <div id=\"main\" style=\"height:960px; width:auto;\"></div>\n\n<script src=\"dist/echarts.js\"></script>\n<!-- 引入百度地图扩展 -->\n<script src=\"dist/extension/bmap.min.js\"></script>\n<script>\n\nvar myChart = echarts.init(document.getElementById('main'));\nvar data = [\n     {name: '海门', value: 9},\n     {name: '鄂尔多斯', value: 12},\n     {name: '招远', value: 12},\n     {name: '舟山', value: 12},\n     {name: '齐齐哈尔', value: 14},\n     {name: '盐城', value: 15},\n     {name: '赤峰', value: 16},\n     {name: '青岛', value: 18},\n     {name: '乳山', value: 18},\n     {name: '金昌', value: 19},\n     {name: '泉州', value: 21},\n     {name: '莱西', value: 21},\n     {name: '日照', value: 21},\n     {name: '胶南', value: 22},\n     {name: '南通', value: 23},\n     {name: '拉萨', value: 24},\n     {name: '云浮', value: 24},\n     {name: '梅州', value: 25},\n     {name: '文登', value: 25},\n     {name: '上海', value: 25},\n     {name: '攀枝花', value: 25},\n     {name: '威海', value: 25},\n     {name: '承德', value: 25},\n     {name: '厦门', value: 26},\n     {name: '汕尾', value: 26},\n     {name: '潮州', value: 26},\n     {name: '丹东', value: 27},\n     {name: '太仓', value: 27},\n     {name: '曲靖', value: 27},\n     {name: '烟台', value: 28},\n     {name: '福州', value: 29},\n     {name: '瓦房店', value: 30},\n     {name: '即墨', value: 30},\n     {name: '抚顺', value: 31},\n     {name: '玉溪', value: 31},\n     {name: '张家口', value: 31},\n     {name: '阳泉', value: 31},\n     {name: '莱州', value: 32},\n     {name: '湖州', value: 32},\n     {name: '汕头', value: 32},\n     {name: '昆山', value: 33},\n     {name: '宁波', value: 33},\n     {name: '湛江', value: 33},\n     {name: '揭阳', value: 34},\n     {name: '荣成', value: 34},\n     {name: '连云港', value: 35},\n     {name: '葫芦岛', value: 35},\n     {name: '常熟', value: 36},\n     {name: '东莞', value: 36},\n     {name: '河源', value: 36},\n     {name: '淮安', value: 36},\n     {name: '泰州', value: 36},\n     {name: '南宁', value: 37},\n     {name: '营口', value: 37},\n     {name: '惠州', value: 37},\n     {name: '江阴', value: 37},\n     {name: '蓬莱', value: 37},\n     {name: '韶关', value: 38},\n     {name: '嘉峪关', value: 38},\n     {name: '广州', value: 38},\n     {name: '延安', value: 38},\n     {name: '太原', value: 39},\n     {name: '清远', value: 39},\n     {name: '中山', value: 39},\n     {name: '昆明', value: 39},\n     {name: '寿光', value: 40},\n     {name: '盘锦', value: 40},\n     {name: '长治', value: 41},\n     {name: '深圳', value: 41},\n     {name: '珠海', value: 42},\n     {name: '宿迁', value: 43},\n     {name: '咸阳', value: 43},\n     {name: '铜川', value: 44},\n     {name: '平度', value: 44},\n     {name: '佛山', value: 44},\n     {name: '海口', value: 44},\n     {name: '江门', value: 45},\n     {name: '章丘', value: 45},\n     {name: '肇庆', value: 46},\n     {name: '大连', value: 47},\n     {name: '临汾', value: 47},\n     {name: '吴江', value: 47},\n     {name: '石嘴山', value: 49},\n     {name: '沈阳', value: 50},\n     {name: '苏州', value: 50},\n     {name: '茂名', value: 50},\n     {name: '嘉兴', value: 51},\n     {name: '长春', value: 51},\n     {name: '胶州', value: 52},\n     {name: '银川', value: 52},\n     {name: '张家港', value: 52},\n     {name: '三门峡', value: 53},\n     {name: '锦州', value: 54},\n     {name: '南昌', value: 54},\n     {name: '柳州', value: 54},\n     {name: '三亚', value: 54},\n     {name: '自贡', value: 56},\n     {name: '吉林', value: 56},\n     {name: '阳江', value: 57},\n     {name: '泸州', value: 57},\n     {name: '西宁', value: 57},\n     {name: '宜宾', value: 58},\n     {name: '呼和浩特', value: 58},\n     {name: '成都', value: 58},\n     {name: '大同', value: 58},\n     {name: '镇江', value: 59},\n     {name: '桂林', value: 59},\n     {name: '张家界', value: 59},\n     {name: '宜兴', value: 59},\n     {name: '北海', value: 60},\n     {name: '西安', value: 61},\n     {name: '金坛', value: 62},\n     {name: '东营', value: 62},\n     {name: '牡丹江', value: 63},\n     {name: '遵义', value: 63},\n     {name: '绍兴', value: 63},\n     {name: '扬州', value: 64},\n     {name: '常州', value: 64},\n     {name: '潍坊', value: 65},\n     {name: '重庆', value: 66},\n     {name: '台州', value: 67},\n     {name: '南京', value: 67},\n     {name: '滨州', value: 70},\n     {name: '贵阳', value: 71},\n     {name: '无锡', value: 71},\n     {name: '本溪', value: 71},\n     {name: '克拉玛依', value: 72},\n     {name: '渭南', value: 72},\n     {name: '马鞍山', value: 72},\n     {name: '宝鸡', value: 72},\n     {name: '焦作', value: 75},\n     {name: '句容', value: 75},\n     {name: '北京', value: 79},\n     {name: '徐州', value: 79},\n     {name: '衡水', value: 80},\n     {name: '包头', value: 80},\n     {name: '绵阳', value: 80},\n     {name: '乌鲁木齐', value: 84},\n     {name: '枣庄', value: 84},\n     {name: '杭州', value: 84},\n     {name: '淄博', value: 85},\n     {name: '鞍山', value: 86},\n     {name: '溧阳', value: 86},\n     {name: '库尔勒', value: 86},\n     {name: '安阳', value: 90},\n     {name: '开封', value: 90},\n     {name: '济南', value: 92},\n     {name: '德阳', value: 93},\n     {name: '温州', value: 95},\n     {name: '九江', value: 96},\n     {name: '邯郸', value: 98},\n     {name: '临安', value: 99},\n     {name: '兰州', value: 99},\n     {name: '沧州', value: 100},\n     {name: '临沂', value: 103},\n     {name: '南充', value: 104},\n     {name: '天津', value: 105},\n     {name: '富阳', value: 106},\n     {name: '泰安', value: 112},\n     {name: '诸暨', value: 112},\n     {name: '郑州', value: 113},\n     {name: '哈尔滨', value: 114},\n     {name: '聊城', value: 116},\n     {name: '芜湖', value: 117},\n     {name: '唐山', value: 119},\n     {name: '平顶山', value: 119},\n     {name: '邢台', value: 119},\n     {name: '德州', value: 120},\n     {name: '济宁', value: 120},\n     {name: '荆州', value: 127},\n     {name: '宜昌', value: 130},\n     {name: '义乌', value: 132},\n     {name: '丽水', value: 133},\n     {name: '洛阳', value: 134},\n     {name: '秦皇岛', value: 136},\n     {name: '株洲', value: 143},\n     {name: '石家庄', value: 147},\n     {name: '莱芜', value: 148},\n     {name: '常德', value: 152},\n     {name: '保定', value: 153},\n     {name: '湘潭', value: 154},\n     {name: '金华', value: 157},\n     {name: '岳阳', value: 169},\n     {name: '长沙', value: 175},\n     {name: '衢州', value: 177},\n     {name: '廊坊', value: 193},\n     {name: '菏泽', value: 194},\n     {name: '合肥', value: 229},\n     {name: '武汉', value: 273},\n     {name: '大庆', value: 279}\n];\nvar geoCoordMap = {\n    '海门':[121.15,31.89],\n    '鄂尔多斯':[109.781327,39.608266],\n    '招远':[120.38,37.35],\n    '舟山':[122.207216,29.985295],\n    '齐齐哈尔':[123.97,47.33],\n    '盐城':[120.13,33.38],\n    '赤峰':[118.87,42.28],\n    '青岛':[120.33,36.07],\n    '乳山':[121.52,36.89],\n    '金昌':[102.188043,38.520089],\n    '泉州':[118.58,24.93],\n    '莱西':[120.53,36.86],\n    '日照':[119.46,35.42],\n    '胶南':[119.97,35.88],\n    '南通':[121.05,32.08],\n    '拉萨':[91.11,29.97],\n    '云浮':[112.02,22.93],\n    '梅州':[116.1,24.55],\n    '文登':[122.05,37.2],\n    '上海':[121.48,31.22],\n    '攀枝花':[101.718637,26.582347],\n    '威海':[122.1,37.5],\n    '承德':[117.93,40.97],\n    '厦门':[118.1,24.46],\n    '汕尾':[115.375279,22.786211],\n    '潮州':[116.63,23.68],\n    '丹东':[124.37,40.13],\n    '太仓':[121.1,31.45],\n    '曲靖':[103.79,25.51],\n    '烟台':[121.39,37.52],\n    '福州':[119.3,26.08],\n    '瓦房店':[121.979603,39.627114],\n    '即墨':[120.45,36.38],\n    '抚顺':[123.97,41.97],\n    '玉溪':[102.52,24.35],\n    '张家口':[114.87,40.82],\n    '阳泉':[113.57,37.85],\n    '莱州':[119.942327,37.177017],\n    '湖州':[120.1,30.86],\n    '汕头':[116.69,23.39],\n    '昆山':[120.95,31.39],\n    '宁波':[121.56,29.86],\n    '湛江':[110.359377,21.270708],\n    '揭阳':[116.35,23.55],\n    '荣成':[122.41,37.16],\n    '连云港':[119.16,34.59],\n    '葫芦岛':[120.836932,40.711052],\n    '常熟':[120.74,31.64],\n    '东莞':[113.75,23.04],\n    '河源':[114.68,23.73],\n    '淮安':[119.15,33.5],\n    '泰州':[119.9,32.49],\n    '南宁':[108.33,22.84],\n    '营口':[122.18,40.65],\n    '惠州':[114.4,23.09],\n    '江阴':[120.26,31.91],\n    '蓬莱':[120.75,37.8],\n    '韶关':[113.62,24.84],\n    '嘉峪关':[98.289152,39.77313],\n    '广州':[113.23,23.16],\n    '延安':[109.47,36.6],\n    '太原':[112.53,37.87],\n    '清远':[113.01,23.7],\n    '中山':[113.38,22.52],\n    '昆明':[102.73,25.04],\n    '寿光':[118.73,36.86],\n    '盘锦':[122.070714,41.119997],\n    '长治':[113.08,36.18],\n    '深圳':[114.07,22.62],\n    '珠海':[113.52,22.3],\n    '宿迁':[118.3,33.96],\n    '咸阳':[108.72,34.36],\n    '铜川':[109.11,35.09],\n    '平度':[119.97,36.77],\n    '佛山':[113.11,23.05],\n    '海口':[110.35,20.02],\n    '江门':[113.06,22.61],\n    '章丘':[117.53,36.72],\n    '肇庆':[112.44,23.05],\n    '大连':[121.62,38.92],\n    '临汾':[111.5,36.08],\n    '吴江':[120.63,31.16],\n    '石嘴山':[106.39,39.04],\n    '沈阳':[123.38,41.8],\n    '苏州':[120.62,31.32],\n    '茂名':[110.88,21.68],\n    '嘉兴':[120.76,30.77],\n    '长春':[125.35,43.88],\n    '胶州':[120.03336,36.264622],\n    '银川':[106.27,38.47],\n    '张家港':[120.555821,31.875428],\n    '三门峡':[111.19,34.76],\n    '锦州':[121.15,41.13],\n    '南昌':[115.89,28.68],\n    '柳州':[109.4,24.33],\n    '三亚':[109.511909,18.252847],\n    '自贡':[104.778442,29.33903],\n    '吉林':[126.57,43.87],\n    '阳江':[111.95,21.85],\n    '泸州':[105.39,28.91],\n    '西宁':[101.74,36.56],\n    '宜宾':[104.56,29.77],\n    '呼和浩特':[111.65,40.82],\n    '成都':[104.06,30.67],\n    '大同':[113.3,40.12],\n    '镇江':[119.44,32.2],\n    '桂林':[110.28,25.29],\n    '张家界':[110.479191,29.117096],\n    '宜兴':[119.82,31.36],\n    '北海':[109.12,21.49],\n    '西安':[108.95,34.27],\n    '金坛':[119.56,31.74],\n    '东营':[118.49,37.46],\n    '牡丹江':[129.58,44.6],\n    '遵义':[106.9,27.7],\n    '绍兴':[120.58,30.01],\n    '扬州':[119.42,32.39],\n    '常州':[119.95,31.79],\n    '潍坊':[119.1,36.62],\n    '重庆':[106.54,29.59],\n    '台州':[121.420757,28.656386],\n    '南京':[118.78,32.04],\n    '滨州':[118.03,37.36],\n    '贵阳':[106.71,26.57],\n    '无锡':[120.29,31.59],\n    '本溪':[123.73,41.3],\n    '克拉玛依':[84.77,45.59],\n    '渭南':[109.5,34.52],\n    '马鞍山':[118.48,31.56],\n    '宝鸡':[107.15,34.38],\n    '焦作':[113.21,35.24],\n    '句容':[119.16,31.95],\n    '北京':[116.46,39.92],\n    '徐州':[117.2,34.26],\n    '衡水':[115.72,37.72],\n    '包头':[110,40.58],\n    '绵阳':[104.73,31.48],\n    '乌鲁木齐':[87.68,43.77],\n    '枣庄':[117.57,34.86],\n    '杭州':[120.19,30.26],\n    '淄博':[118.05,36.78],\n    '鞍山':[122.85,41.12],\n    '溧阳':[119.48,31.43],\n    '库尔勒':[86.06,41.68],\n    '安阳':[114.35,36.1],\n    '开封':[114.35,34.79],\n    '济南':[117,36.65],\n    '德阳':[104.37,31.13],\n    '温州':[120.65,28.01],\n    '九江':[115.97,29.71],\n    '邯郸':[114.47,36.6],\n    '临安':[119.72,30.23],\n    '兰州':[103.73,36.03],\n    '沧州':[116.83,38.33],\n    '临沂':[118.35,35.05],\n    '南充':[106.110698,30.837793],\n    '天津':[117.2,39.13],\n    '富阳':[119.95,30.07],\n    '泰安':[117.13,36.18],\n    '诸暨':[120.23,29.71],\n    '郑州':[113.65,34.76],\n    '哈尔滨':[126.63,45.75],\n    '聊城':[115.97,36.45],\n    '芜湖':[118.38,31.33],\n    '唐山':[118.02,39.63],\n    '平顶山':[113.29,33.75],\n    '邢台':[114.48,37.05],\n    '德州':[116.29,37.45],\n    '济宁':[116.59,35.38],\n    '荆州':[112.239741,30.335165],\n    '宜昌':[111.3,30.7],\n    '义乌':[120.06,29.32],\n    '丽水':[119.92,28.45],\n    '洛阳':[112.44,34.7],\n    '秦皇岛':[119.57,39.95],\n    '株洲':[113.16,27.83],\n    '石家庄':[114.48,38.03],\n    '莱芜':[117.67,36.19],\n    '常德':[111.69,29.05],\n    '保定':[115.48,38.85],\n    '湘潭':[112.91,27.87],\n    '金华':[119.64,29.12],\n    '岳阳':[113.09,29.37],\n    '长沙':[113,28.21],\n    '衢州':[118.88,28.97],\n    '廊坊':[116.7,39.53],\n    '菏泽':[115.480656,35.23375],\n    '合肥':[117.27,31.86],\n    '武汉':[114.31,30.52],\n    '大庆':[125.03,46.58]\n};\n\nvar convertData = function (data) {\n    var res = [];\n    for (var i = 0; i < data.length; i++) {\n        var geoCoord = geoCoordMap[data[i].name];\n        if (geoCoord) {\n            res.push({\n                name: data[i].name,\n                value: geoCoord.concat(data[i].value)\n            });\n        }\n    }\n    return res;\n};\n\noption = {\n    title: {\n        text: 'echarts 和 百度地图API Demo',\n        // subtext: 'data from PM25.in',\n        // sublink: 'http://www.pm25.in',\n        left: 'center'\n    },\n    tooltip : {\n        trigger: 'item'\n    },\n    bmap: {\n        center: [104.114129, 37.550339],\n        zoom: 5,\n        roam: true,\n        mapStyle: {\n            styleJson: [{\n                'featureType': 'water',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'land',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#f3f3f3'\n                }\n            }, {\n                'featureType': 'railway',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'highway',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#fdfdfd'\n                }\n            }, {\n                'featureType': 'highway',\n                'elementType': 'labels',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'arterial',\n                'elementType': 'geometry',\n                'stylers': {\n                    'color': '#fefefe'\n                }\n            }, {\n                'featureType': 'arterial',\n                'elementType': 'geometry.fill',\n                'stylers': {\n                    'color': '#fefefe'\n                }\n            }, {\n                'featureType': 'poi',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'green',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'subway',\n                'elementType': 'all',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'manmade',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'local',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'arterial',\n                'elementType': 'labels',\n                'stylers': {\n                    'visibility': 'off'\n                }\n            }, {\n                'featureType': 'boundary',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#fefefe'\n                }\n            }, {\n                'featureType': 'building',\n                'elementType': 'all',\n                'stylers': {\n                    'color': '#d1d1d1'\n                }\n            }, {\n                'featureType': 'label',\n                'elementType': 'labels.text.fill',\n                'stylers': {\n                    'color': '#999999'\n                }\n            }]\n        }\n    },\n    series : [\n        {\n            name: 'pm2.5',\n            type: 'scatter',\n            coordinateSystem: 'bmap',\n            data: convertData(data),\n            symbolSize: function (val) {\n                return val[2] / 10;\n            },\n            label: {\n                normal: {\n                    formatter: '{b}',\n                    position: 'right',\n                    show: false\n                },\n                emphasis: {\n                    show: true\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'purple'\n                }\n            }\n        },\n        {\n            name: 'Top 5',\n            type: 'effectScatter',\n            coordinateSystem: 'bmap',\n            data: convertData(data.sort(function (a, b) {\n                return b.value - a.value;\n            }).slice(0, 6)),\n            symbolSize: function (val) {\n                return val[2] / 10;\n            },\n            showEffectOn: 'render',\n            rippleEffect: {\n                brushType: 'stroke'\n            },\n            hoverAnimation: true,\n            label: {\n                normal: {\n                    formatter: '{b}',\n                    position: 'right',\n                    show: true\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'purple',\n                    shadowBlur: 10,\n                    shadowColor: '#333'\n                }\n            },\n            zlevel: 1\n        }\n    ]\n};\n\n\n\n\n\nmyChart.setOption(option);\n</script>\n</body>\n\n\n</html>\n```","slug":"Echarts 与 百度地图API 初步使用","published":1,"updated":"2018-01-09T02:46:00.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzu10000yg3igby4bwjv","content":"<p>由于要做一个数据的统计（微博等社交网络的流行病分析），借用echarts开源统计项目做一个简单的数据可视化，大致效果如下链接<br><a href=\"http://echarts.baidu.com/demo.html#effectScatter-bmap\" target=\"_blank\" rel=\"noopener\">http://echarts.baidu.com/demo.html#effectScatter-bmap</a></p>\n<p>以下是我实现后的效果图，代码很简单，但还是折腾了很久。（div的height数据千万记得写）。不同的演示效果和数据可以在上述网站中找到。</p>\n<div align=\"center\"><br><img src=\"/images/20170606_1.png\"><br></div>\n\n<p>下面是很长的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ECharts map Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/jquery-2.2.3.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=你的AK秘钥\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:960px; width:auto;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入百度地图扩展 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/extension/bmap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var myChart = echarts.init(document.getElementById('main'));</span></span><br><span class=\"line\"><span class=\"undefined\">var data = [</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '海门', value: 9&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '鄂尔多斯', value: 12&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '招远', value: 12&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '舟山', value: 12&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '齐齐哈尔', value: 14&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '盐城', value: 15&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '赤峰', value: 16&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '青岛', value: 18&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '乳山', value: 18&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '金昌', value: 19&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泉州', value: 21&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '莱西', value: 21&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '日照', value: 21&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '胶南', value: 22&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南通', value: 23&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '拉萨', value: 24&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '云浮', value: 24&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '梅州', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '文登', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '上海', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '攀枝花', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '威海', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '承德', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '厦门', value: 26&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '汕尾', value: 26&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '潮州', value: 26&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '丹东', value: 27&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '太仓', value: 27&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '曲靖', value: 27&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '烟台', value: 28&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '福州', value: 29&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '瓦房店', value: 30&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '即墨', value: 30&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '抚顺', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '玉溪', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '张家口', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '阳泉', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '莱州', value: 32&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '湖州', value: 32&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '汕头', value: 32&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '昆山', value: 33&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宁波', value: 33&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '湛江', value: 33&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '揭阳', value: 34&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '荣成', value: 34&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '连云港', value: 35&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '葫芦岛', value: 35&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '常熟', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '东莞', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '河源', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '淮安', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泰州', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南宁', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '营口', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '惠州', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '江阴', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '蓬莱', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '韶关', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '嘉峪关', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '广州', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '延安', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '太原', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '清远', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '中山', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '昆明', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '寿光', value: 40&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '盘锦', value: 40&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '长治', value: 41&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '深圳', value: 41&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '珠海', value: 42&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宿迁', value: 43&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '咸阳', value: 43&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '铜川', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '平度', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '佛山', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '海口', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '江门', value: 45&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '章丘', value: 45&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '肇庆', value: 46&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '大连', value: 47&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '临汾', value: 47&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '吴江', value: 47&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '石嘴山', value: 49&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '沈阳', value: 50&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '苏州', value: 50&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '茂名', value: 50&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '嘉兴', value: 51&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '长春', value: 51&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '胶州', value: 52&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '银川', value: 52&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '张家港', value: 52&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '三门峡', value: 53&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '锦州', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南昌', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '柳州', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '三亚', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '自贡', value: 56&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '吉林', value: 56&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '阳江', value: 57&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泸州', value: 57&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '西宁', value: 57&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宜宾', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '呼和浩特', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '成都', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '大同', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '镇江', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '桂林', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '张家界', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宜兴', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '北海', value: 60&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '西安', value: 61&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '金坛', value: 62&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '东营', value: 62&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '牡丹江', value: 63&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '遵义', value: 63&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '绍兴', value: 63&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '扬州', value: 64&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '常州', value: 64&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '潍坊', value: 65&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '重庆', value: 66&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '台州', value: 67&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南京', value: 67&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '滨州', value: 70&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '贵阳', value: 71&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '无锡', value: 71&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '本溪', value: 71&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '克拉玛依', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '渭南', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '马鞍山', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宝鸡', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '焦作', value: 75&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '句容', value: 75&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '北京', value: 79&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '徐州', value: 79&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '衡水', value: 80&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '包头', value: 80&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '绵阳', value: 80&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '乌鲁木齐', value: 84&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '枣庄', value: 84&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '杭州', value: 84&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '淄博', value: 85&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '鞍山', value: 86&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '溧阳', value: 86&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '库尔勒', value: 86&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '安阳', value: 90&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '开封', value: 90&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '济南', value: 92&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '德阳', value: 93&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '温州', value: 95&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '九江', value: 96&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '邯郸', value: 98&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '临安', value: 99&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '兰州', value: 99&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '沧州', value: 100&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '临沂', value: 103&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南充', value: 104&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '天津', value: 105&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '富阳', value: 106&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泰安', value: 112&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '诸暨', value: 112&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '郑州', value: 113&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '哈尔滨', value: 114&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '聊城', value: 116&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '芜湖', value: 117&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '唐山', value: 119&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '平顶山', value: 119&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '邢台', value: 119&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '德州', value: 120&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '济宁', value: 120&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '荆州', value: 127&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宜昌', value: 130&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '义乌', value: 132&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '丽水', value: 133&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '洛阳', value: 134&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '秦皇岛', value: 136&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '株洲', value: 143&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '石家庄', value: 147&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '莱芜', value: 148&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '常德', value: 152&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '保定', value: 153&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '湘潭', value: 154&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '金华', value: 157&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '岳阳', value: 169&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '长沙', value: 175&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '衢州', value: 177&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '廊坊', value: 193&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '菏泽', value: 194&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '合肥', value: 229&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '武汉', value: 273&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '大庆', value: 279&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">];</span></span><br><span class=\"line\"><span class=\"undefined\">var geoCoordMap = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    '海门':[121.15,31.89],</span></span><br><span class=\"line\"><span class=\"undefined\">    '鄂尔多斯':[109.781327,39.608266],</span></span><br><span class=\"line\"><span class=\"undefined\">    '招远':[120.38,37.35],</span></span><br><span class=\"line\"><span class=\"undefined\">    '舟山':[122.207216,29.985295],</span></span><br><span class=\"line\"><span class=\"undefined\">    '齐齐哈尔':[123.97,47.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '盐城':[120.13,33.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '赤峰':[118.87,42.28],</span></span><br><span class=\"line\"><span class=\"undefined\">    '青岛':[120.33,36.07],</span></span><br><span class=\"line\"><span class=\"undefined\">    '乳山':[121.52,36.89],</span></span><br><span class=\"line\"><span class=\"undefined\">    '金昌':[102.188043,38.520089],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泉州':[118.58,24.93],</span></span><br><span class=\"line\"><span class=\"undefined\">    '莱西':[120.53,36.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '日照':[119.46,35.42],</span></span><br><span class=\"line\"><span class=\"undefined\">    '胶南':[119.97,35.88],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南通':[121.05,32.08],</span></span><br><span class=\"line\"><span class=\"undefined\">    '拉萨':[91.11,29.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '云浮':[112.02,22.93],</span></span><br><span class=\"line\"><span class=\"undefined\">    '梅州':[116.1,24.55],</span></span><br><span class=\"line\"><span class=\"undefined\">    '文登':[122.05,37.2],</span></span><br><span class=\"line\"><span class=\"undefined\">    '上海':[121.48,31.22],</span></span><br><span class=\"line\"><span class=\"undefined\">    '攀枝花':[101.718637,26.582347],</span></span><br><span class=\"line\"><span class=\"undefined\">    '威海':[122.1,37.5],</span></span><br><span class=\"line\"><span class=\"undefined\">    '承德':[117.93,40.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '厦门':[118.1,24.46],</span></span><br><span class=\"line\"><span class=\"undefined\">    '汕尾':[115.375279,22.786211],</span></span><br><span class=\"line\"><span class=\"undefined\">    '潮州':[116.63,23.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '丹东':[124.37,40.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '太仓':[121.1,31.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '曲靖':[103.79,25.51],</span></span><br><span class=\"line\"><span class=\"undefined\">    '烟台':[121.39,37.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '福州':[119.3,26.08],</span></span><br><span class=\"line\"><span class=\"undefined\">    '瓦房店':[121.979603,39.627114],</span></span><br><span class=\"line\"><span class=\"undefined\">    '即墨':[120.45,36.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '抚顺':[123.97,41.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '玉溪':[102.52,24.35],</span></span><br><span class=\"line\"><span class=\"undefined\">    '张家口':[114.87,40.82],</span></span><br><span class=\"line\"><span class=\"undefined\">    '阳泉':[113.57,37.85],</span></span><br><span class=\"line\"><span class=\"undefined\">    '莱州':[119.942327,37.177017],</span></span><br><span class=\"line\"><span class=\"undefined\">    '湖州':[120.1,30.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '汕头':[116.69,23.39],</span></span><br><span class=\"line\"><span class=\"undefined\">    '昆山':[120.95,31.39],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宁波':[121.56,29.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '湛江':[110.359377,21.270708],</span></span><br><span class=\"line\"><span class=\"undefined\">    '揭阳':[116.35,23.55],</span></span><br><span class=\"line\"><span class=\"undefined\">    '荣成':[122.41,37.16],</span></span><br><span class=\"line\"><span class=\"undefined\">    '连云港':[119.16,34.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '葫芦岛':[120.836932,40.711052],</span></span><br><span class=\"line\"><span class=\"undefined\">    '常熟':[120.74,31.64],</span></span><br><span class=\"line\"><span class=\"undefined\">    '东莞':[113.75,23.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '河源':[114.68,23.73],</span></span><br><span class=\"line\"><span class=\"undefined\">    '淮安':[119.15,33.5],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泰州':[119.9,32.49],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南宁':[108.33,22.84],</span></span><br><span class=\"line\"><span class=\"undefined\">    '营口':[122.18,40.65],</span></span><br><span class=\"line\"><span class=\"undefined\">    '惠州':[114.4,23.09],</span></span><br><span class=\"line\"><span class=\"undefined\">    '江阴':[120.26,31.91],</span></span><br><span class=\"line\"><span class=\"undefined\">    '蓬莱':[120.75,37.8],</span></span><br><span class=\"line\"><span class=\"undefined\">    '韶关':[113.62,24.84],</span></span><br><span class=\"line\"><span class=\"undefined\">    '嘉峪关':[98.289152,39.77313],</span></span><br><span class=\"line\"><span class=\"undefined\">    '广州':[113.23,23.16],</span></span><br><span class=\"line\"><span class=\"undefined\">    '延安':[109.47,36.6],</span></span><br><span class=\"line\"><span class=\"undefined\">    '太原':[112.53,37.87],</span></span><br><span class=\"line\"><span class=\"undefined\">    '清远':[113.01,23.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '中山':[113.38,22.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '昆明':[102.73,25.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '寿光':[118.73,36.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '盘锦':[122.070714,41.119997],</span></span><br><span class=\"line\"><span class=\"undefined\">    '长治':[113.08,36.18],</span></span><br><span class=\"line\"><span class=\"undefined\">    '深圳':[114.07,22.62],</span></span><br><span class=\"line\"><span class=\"undefined\">    '珠海':[113.52,22.3],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宿迁':[118.3,33.96],</span></span><br><span class=\"line\"><span class=\"undefined\">    '咸阳':[108.72,34.36],</span></span><br><span class=\"line\"><span class=\"undefined\">    '铜川':[109.11,35.09],</span></span><br><span class=\"line\"><span class=\"undefined\">    '平度':[119.97,36.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '佛山':[113.11,23.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '海口':[110.35,20.02],</span></span><br><span class=\"line\"><span class=\"undefined\">    '江门':[113.06,22.61],</span></span><br><span class=\"line\"><span class=\"undefined\">    '章丘':[117.53,36.72],</span></span><br><span class=\"line\"><span class=\"undefined\">    '肇庆':[112.44,23.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '大连':[121.62,38.92],</span></span><br><span class=\"line\"><span class=\"undefined\">    '临汾':[111.5,36.08],</span></span><br><span class=\"line\"><span class=\"undefined\">    '吴江':[120.63,31.16],</span></span><br><span class=\"line\"><span class=\"undefined\">    '石嘴山':[106.39,39.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '沈阳':[123.38,41.8],</span></span><br><span class=\"line\"><span class=\"undefined\">    '苏州':[120.62,31.32],</span></span><br><span class=\"line\"><span class=\"undefined\">    '茂名':[110.88,21.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '嘉兴':[120.76,30.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '长春':[125.35,43.88],</span></span><br><span class=\"line\"><span class=\"undefined\">    '胶州':[120.03336,36.264622],</span></span><br><span class=\"line\"><span class=\"undefined\">    '银川':[106.27,38.47],</span></span><br><span class=\"line\"><span class=\"undefined\">    '张家港':[120.555821,31.875428],</span></span><br><span class=\"line\"><span class=\"undefined\">    '三门峡':[111.19,34.76],</span></span><br><span class=\"line\"><span class=\"undefined\">    '锦州':[121.15,41.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南昌':[115.89,28.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '柳州':[109.4,24.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '三亚':[109.511909,18.252847],</span></span><br><span class=\"line\"><span class=\"undefined\">    '自贡':[104.778442,29.33903],</span></span><br><span class=\"line\"><span class=\"undefined\">    '吉林':[126.57,43.87],</span></span><br><span class=\"line\"><span class=\"undefined\">    '阳江':[111.95,21.85],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泸州':[105.39,28.91],</span></span><br><span class=\"line\"><span class=\"undefined\">    '西宁':[101.74,36.56],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宜宾':[104.56,29.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '呼和浩特':[111.65,40.82],</span></span><br><span class=\"line\"><span class=\"undefined\">    '成都':[104.06,30.67],</span></span><br><span class=\"line\"><span class=\"undefined\">    '大同':[113.3,40.12],</span></span><br><span class=\"line\"><span class=\"undefined\">    '镇江':[119.44,32.2],</span></span><br><span class=\"line\"><span class=\"undefined\">    '桂林':[110.28,25.29],</span></span><br><span class=\"line\"><span class=\"undefined\">    '张家界':[110.479191,29.117096],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宜兴':[119.82,31.36],</span></span><br><span class=\"line\"><span class=\"undefined\">    '北海':[109.12,21.49],</span></span><br><span class=\"line\"><span class=\"undefined\">    '西安':[108.95,34.27],</span></span><br><span class=\"line\"><span class=\"undefined\">    '金坛':[119.56,31.74],</span></span><br><span class=\"line\"><span class=\"undefined\">    '东营':[118.49,37.46],</span></span><br><span class=\"line\"><span class=\"undefined\">    '牡丹江':[129.58,44.6],</span></span><br><span class=\"line\"><span class=\"undefined\">    '遵义':[106.9,27.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '绍兴':[120.58,30.01],</span></span><br><span class=\"line\"><span class=\"undefined\">    '扬州':[119.42,32.39],</span></span><br><span class=\"line\"><span class=\"undefined\">    '常州':[119.95,31.79],</span></span><br><span class=\"line\"><span class=\"undefined\">    '潍坊':[119.1,36.62],</span></span><br><span class=\"line\"><span class=\"undefined\">    '重庆':[106.54,29.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '台州':[121.420757,28.656386],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南京':[118.78,32.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '滨州':[118.03,37.36],</span></span><br><span class=\"line\"><span class=\"undefined\">    '贵阳':[106.71,26.57],</span></span><br><span class=\"line\"><span class=\"undefined\">    '无锡':[120.29,31.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '本溪':[123.73,41.3],</span></span><br><span class=\"line\"><span class=\"undefined\">    '克拉玛依':[84.77,45.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '渭南':[109.5,34.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '马鞍山':[118.48,31.56],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宝鸡':[107.15,34.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '焦作':[113.21,35.24],</span></span><br><span class=\"line\"><span class=\"undefined\">    '句容':[119.16,31.95],</span></span><br><span class=\"line\"><span class=\"undefined\">    '北京':[116.46,39.92],</span></span><br><span class=\"line\"><span class=\"undefined\">    '徐州':[117.2,34.26],</span></span><br><span class=\"line\"><span class=\"undefined\">    '衡水':[115.72,37.72],</span></span><br><span class=\"line\"><span class=\"undefined\">    '包头':[110,40.58],</span></span><br><span class=\"line\"><span class=\"undefined\">    '绵阳':[104.73,31.48],</span></span><br><span class=\"line\"><span class=\"undefined\">    '乌鲁木齐':[87.68,43.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '枣庄':[117.57,34.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '杭州':[120.19,30.26],</span></span><br><span class=\"line\"><span class=\"undefined\">    '淄博':[118.05,36.78],</span></span><br><span class=\"line\"><span class=\"undefined\">    '鞍山':[122.85,41.12],</span></span><br><span class=\"line\"><span class=\"undefined\">    '溧阳':[119.48,31.43],</span></span><br><span class=\"line\"><span class=\"undefined\">    '库尔勒':[86.06,41.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '安阳':[114.35,36.1],</span></span><br><span class=\"line\"><span class=\"undefined\">    '开封':[114.35,34.79],</span></span><br><span class=\"line\"><span class=\"undefined\">    '济南':[117,36.65],</span></span><br><span class=\"line\"><span class=\"undefined\">    '德阳':[104.37,31.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '温州':[120.65,28.01],</span></span><br><span class=\"line\"><span class=\"undefined\">    '九江':[115.97,29.71],</span></span><br><span class=\"line\"><span class=\"undefined\">    '邯郸':[114.47,36.6],</span></span><br><span class=\"line\"><span class=\"undefined\">    '临安':[119.72,30.23],</span></span><br><span class=\"line\"><span class=\"undefined\">    '兰州':[103.73,36.03],</span></span><br><span class=\"line\"><span class=\"undefined\">    '沧州':[116.83,38.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '临沂':[118.35,35.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南充':[106.110698,30.837793],</span></span><br><span class=\"line\"><span class=\"undefined\">    '天津':[117.2,39.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '富阳':[119.95,30.07],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泰安':[117.13,36.18],</span></span><br><span class=\"line\"><span class=\"undefined\">    '诸暨':[120.23,29.71],</span></span><br><span class=\"line\"><span class=\"undefined\">    '郑州':[113.65,34.76],</span></span><br><span class=\"line\"><span class=\"undefined\">    '哈尔滨':[126.63,45.75],</span></span><br><span class=\"line\"><span class=\"undefined\">    '聊城':[115.97,36.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '芜湖':[118.38,31.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '唐山':[118.02,39.63],</span></span><br><span class=\"line\"><span class=\"undefined\">    '平顶山':[113.29,33.75],</span></span><br><span class=\"line\"><span class=\"undefined\">    '邢台':[114.48,37.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '德州':[116.29,37.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '济宁':[116.59,35.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '荆州':[112.239741,30.335165],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宜昌':[111.3,30.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '义乌':[120.06,29.32],</span></span><br><span class=\"line\"><span class=\"undefined\">    '丽水':[119.92,28.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '洛阳':[112.44,34.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '秦皇岛':[119.57,39.95],</span></span><br><span class=\"line\"><span class=\"undefined\">    '株洲':[113.16,27.83],</span></span><br><span class=\"line\"><span class=\"undefined\">    '石家庄':[114.48,38.03],</span></span><br><span class=\"line\"><span class=\"undefined\">    '莱芜':[117.67,36.19],</span></span><br><span class=\"line\"><span class=\"undefined\">    '常德':[111.69,29.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '保定':[115.48,38.85],</span></span><br><span class=\"line\"><span class=\"undefined\">    '湘潭':[112.91,27.87],</span></span><br><span class=\"line\"><span class=\"undefined\">    '金华':[119.64,29.12],</span></span><br><span class=\"line\"><span class=\"undefined\">    '岳阳':[113.09,29.37],</span></span><br><span class=\"line\"><span class=\"undefined\">    '长沙':[113,28.21],</span></span><br><span class=\"line\"><span class=\"undefined\">    '衢州':[118.88,28.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '廊坊':[116.7,39.53],</span></span><br><span class=\"line\"><span class=\"undefined\">    '菏泽':[115.480656,35.23375],</span></span><br><span class=\"line\"><span class=\"undefined\">    '合肥':[117.27,31.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '武汉':[114.31,30.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '大庆':[125.03,46.58]</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var convertData = function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    var res = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    for (var i = 0; i &lt; data.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var geoCoord = geoCoordMap[data[i].name];</span></span><br><span class=\"line\"><span class=\"undefined\">        if (geoCoord) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            res.push(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                name: data[i].name,</span></span><br><span class=\"line\"><span class=\"undefined\">                value: geoCoord.concat(data[i].value)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    return res;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">option = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    title: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        text: 'echarts 和 百度地图API Demo',</span></span><br><span class=\"line\"><span class=\"undefined\">        // subtext: 'data from PM25.in',</span></span><br><span class=\"line\"><span class=\"undefined\">        // sublink: 'http://www.pm25.in',</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 'center'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    tooltip : &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        trigger: 'item'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    bmap: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        center: [104.114129, 37.550339],</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 5,</span></span><br><span class=\"line\"><span class=\"undefined\">        roam: true,</span></span><br><span class=\"line\"><span class=\"undefined\">        mapStyle: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            styleJson: [&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'water',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'land',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#f3f3f3'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'railway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'highway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fdfdfd'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'highway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'labels',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'arterial',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'geometry',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fefefe'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'arterial',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'geometry.fill',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fefefe'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'poi',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'green',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'subway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'manmade',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'local',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'arterial',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'labels',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'boundary',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fefefe'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'building',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'label',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'labels.text.fill',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#999999'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;]</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    series : [</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            name: 'pm2.5',</span></span><br><span class=\"line\"><span class=\"undefined\">            type: 'scatter',</span></span><br><span class=\"line\"><span class=\"undefined\">            coordinateSystem: 'bmap',</span></span><br><span class=\"line\"><span class=\"undefined\">            data: convertData(data),</span></span><br><span class=\"line\"><span class=\"undefined\">            symbolSize: function (val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                return val[2] / 10;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            label: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    formatter: '&#123;b&#125;',</span></span><br><span class=\"line\"><span class=\"undefined\">                    position: 'right',</span></span><br><span class=\"line\"><span class=\"undefined\">                    show: false</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">                emphasis: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    show: true</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            itemStyle: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    color: 'purple'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            name: 'Top 5',</span></span><br><span class=\"line\"><span class=\"undefined\">            type: 'effectScatter',</span></span><br><span class=\"line\"><span class=\"undefined\">            coordinateSystem: 'bmap',</span></span><br><span class=\"line\"><span class=\"undefined\">            data: convertData(data.sort(function (a, b) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                return b.value - a.value;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;).slice(0, 6)),</span></span><br><span class=\"line\"><span class=\"undefined\">            symbolSize: function (val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                return val[2] / 10;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            showEffectOn: 'render',</span></span><br><span class=\"line\"><span class=\"undefined\">            rippleEffect: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                brushType: 'stroke'</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            hoverAnimation: true,</span></span><br><span class=\"line\"><span class=\"undefined\">            label: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    formatter: '&#123;b&#125;',</span></span><br><span class=\"line\"><span class=\"undefined\">                    position: 'right',</span></span><br><span class=\"line\"><span class=\"undefined\">                    show: true</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            itemStyle: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    color: 'purple',</span></span><br><span class=\"line\"><span class=\"undefined\">                    shadowBlur: 10,</span></span><br><span class=\"line\"><span class=\"undefined\">                    shadowColor: '#333'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            zlevel: 1</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    ]</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">myChart.setOption(option);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>由于要做一个数据的统计（微博等社交网络的流行病分析），借用echarts开源统计项目做一个简单的数据可视化，大致效果如下链接<br><a href=\"http://echarts.baidu.com/demo.html#effectScatter-bmap\" target=\"_blank\" rel=\"noopener\">http://echarts.baidu.com/demo.html#effectScatter-bmap</a></p>\n<p>以下是我实现后的效果图，代码很简单，但还是折腾了很久。（div的height数据千万记得写）。不同的演示效果和数据可以在上述网站中找到。</p>\n<div align=\"center\"><br><img src=\"/images/20170606_1.png\"><br></div>\n\n<p>下面是很长的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ECharts map Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/jquery-2.2.3.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=你的AK秘钥\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:960px; width:auto;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入百度地图扩展 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/extension/bmap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var myChart = echarts.init(document.getElementById('main'));</span></span><br><span class=\"line\"><span class=\"undefined\">var data = [</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '海门', value: 9&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '鄂尔多斯', value: 12&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '招远', value: 12&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '舟山', value: 12&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '齐齐哈尔', value: 14&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '盐城', value: 15&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '赤峰', value: 16&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '青岛', value: 18&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '乳山', value: 18&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '金昌', value: 19&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泉州', value: 21&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '莱西', value: 21&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '日照', value: 21&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '胶南', value: 22&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南通', value: 23&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '拉萨', value: 24&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '云浮', value: 24&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '梅州', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '文登', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '上海', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '攀枝花', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '威海', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '承德', value: 25&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '厦门', value: 26&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '汕尾', value: 26&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '潮州', value: 26&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '丹东', value: 27&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '太仓', value: 27&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '曲靖', value: 27&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '烟台', value: 28&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '福州', value: 29&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '瓦房店', value: 30&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '即墨', value: 30&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '抚顺', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '玉溪', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '张家口', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '阳泉', value: 31&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '莱州', value: 32&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '湖州', value: 32&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '汕头', value: 32&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '昆山', value: 33&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宁波', value: 33&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '湛江', value: 33&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '揭阳', value: 34&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '荣成', value: 34&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '连云港', value: 35&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '葫芦岛', value: 35&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '常熟', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '东莞', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '河源', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '淮安', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泰州', value: 36&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南宁', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '营口', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '惠州', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '江阴', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '蓬莱', value: 37&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '韶关', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '嘉峪关', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '广州', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '延安', value: 38&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '太原', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '清远', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '中山', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '昆明', value: 39&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '寿光', value: 40&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '盘锦', value: 40&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '长治', value: 41&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '深圳', value: 41&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '珠海', value: 42&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宿迁', value: 43&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '咸阳', value: 43&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '铜川', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '平度', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '佛山', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '海口', value: 44&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '江门', value: 45&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '章丘', value: 45&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '肇庆', value: 46&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '大连', value: 47&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '临汾', value: 47&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '吴江', value: 47&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '石嘴山', value: 49&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '沈阳', value: 50&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '苏州', value: 50&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '茂名', value: 50&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '嘉兴', value: 51&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '长春', value: 51&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '胶州', value: 52&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '银川', value: 52&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '张家港', value: 52&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '三门峡', value: 53&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '锦州', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南昌', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '柳州', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '三亚', value: 54&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '自贡', value: 56&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '吉林', value: 56&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '阳江', value: 57&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泸州', value: 57&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '西宁', value: 57&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宜宾', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '呼和浩特', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '成都', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '大同', value: 58&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '镇江', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '桂林', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '张家界', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宜兴', value: 59&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '北海', value: 60&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '西安', value: 61&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '金坛', value: 62&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '东营', value: 62&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '牡丹江', value: 63&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '遵义', value: 63&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '绍兴', value: 63&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '扬州', value: 64&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '常州', value: 64&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '潍坊', value: 65&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '重庆', value: 66&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '台州', value: 67&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南京', value: 67&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '滨州', value: 70&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '贵阳', value: 71&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '无锡', value: 71&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '本溪', value: 71&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '克拉玛依', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '渭南', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '马鞍山', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宝鸡', value: 72&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '焦作', value: 75&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '句容', value: 75&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '北京', value: 79&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '徐州', value: 79&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '衡水', value: 80&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '包头', value: 80&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '绵阳', value: 80&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '乌鲁木齐', value: 84&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '枣庄', value: 84&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '杭州', value: 84&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '淄博', value: 85&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '鞍山', value: 86&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '溧阳', value: 86&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '库尔勒', value: 86&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '安阳', value: 90&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '开封', value: 90&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '济南', value: 92&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '德阳', value: 93&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '温州', value: 95&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '九江', value: 96&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '邯郸', value: 98&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '临安', value: 99&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '兰州', value: 99&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '沧州', value: 100&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '临沂', value: 103&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '南充', value: 104&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '天津', value: 105&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '富阳', value: 106&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '泰安', value: 112&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '诸暨', value: 112&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '郑州', value: 113&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '哈尔滨', value: 114&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '聊城', value: 116&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '芜湖', value: 117&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '唐山', value: 119&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '平顶山', value: 119&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '邢台', value: 119&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '德州', value: 120&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '济宁', value: 120&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '荆州', value: 127&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '宜昌', value: 130&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '义乌', value: 132&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '丽水', value: 133&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '洛阳', value: 134&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '秦皇岛', value: 136&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '株洲', value: 143&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '石家庄', value: 147&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '莱芜', value: 148&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '常德', value: 152&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '保定', value: 153&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '湘潭', value: 154&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '金华', value: 157&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '岳阳', value: 169&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '长沙', value: 175&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '衢州', value: 177&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '廊坊', value: 193&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '菏泽', value: 194&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '合肥', value: 229&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '武汉', value: 273&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">     &#123;name: '大庆', value: 279&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">];</span></span><br><span class=\"line\"><span class=\"undefined\">var geoCoordMap = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    '海门':[121.15,31.89],</span></span><br><span class=\"line\"><span class=\"undefined\">    '鄂尔多斯':[109.781327,39.608266],</span></span><br><span class=\"line\"><span class=\"undefined\">    '招远':[120.38,37.35],</span></span><br><span class=\"line\"><span class=\"undefined\">    '舟山':[122.207216,29.985295],</span></span><br><span class=\"line\"><span class=\"undefined\">    '齐齐哈尔':[123.97,47.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '盐城':[120.13,33.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '赤峰':[118.87,42.28],</span></span><br><span class=\"line\"><span class=\"undefined\">    '青岛':[120.33,36.07],</span></span><br><span class=\"line\"><span class=\"undefined\">    '乳山':[121.52,36.89],</span></span><br><span class=\"line\"><span class=\"undefined\">    '金昌':[102.188043,38.520089],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泉州':[118.58,24.93],</span></span><br><span class=\"line\"><span class=\"undefined\">    '莱西':[120.53,36.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '日照':[119.46,35.42],</span></span><br><span class=\"line\"><span class=\"undefined\">    '胶南':[119.97,35.88],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南通':[121.05,32.08],</span></span><br><span class=\"line\"><span class=\"undefined\">    '拉萨':[91.11,29.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '云浮':[112.02,22.93],</span></span><br><span class=\"line\"><span class=\"undefined\">    '梅州':[116.1,24.55],</span></span><br><span class=\"line\"><span class=\"undefined\">    '文登':[122.05,37.2],</span></span><br><span class=\"line\"><span class=\"undefined\">    '上海':[121.48,31.22],</span></span><br><span class=\"line\"><span class=\"undefined\">    '攀枝花':[101.718637,26.582347],</span></span><br><span class=\"line\"><span class=\"undefined\">    '威海':[122.1,37.5],</span></span><br><span class=\"line\"><span class=\"undefined\">    '承德':[117.93,40.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '厦门':[118.1,24.46],</span></span><br><span class=\"line\"><span class=\"undefined\">    '汕尾':[115.375279,22.786211],</span></span><br><span class=\"line\"><span class=\"undefined\">    '潮州':[116.63,23.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '丹东':[124.37,40.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '太仓':[121.1,31.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '曲靖':[103.79,25.51],</span></span><br><span class=\"line\"><span class=\"undefined\">    '烟台':[121.39,37.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '福州':[119.3,26.08],</span></span><br><span class=\"line\"><span class=\"undefined\">    '瓦房店':[121.979603,39.627114],</span></span><br><span class=\"line\"><span class=\"undefined\">    '即墨':[120.45,36.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '抚顺':[123.97,41.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '玉溪':[102.52,24.35],</span></span><br><span class=\"line\"><span class=\"undefined\">    '张家口':[114.87,40.82],</span></span><br><span class=\"line\"><span class=\"undefined\">    '阳泉':[113.57,37.85],</span></span><br><span class=\"line\"><span class=\"undefined\">    '莱州':[119.942327,37.177017],</span></span><br><span class=\"line\"><span class=\"undefined\">    '湖州':[120.1,30.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '汕头':[116.69,23.39],</span></span><br><span class=\"line\"><span class=\"undefined\">    '昆山':[120.95,31.39],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宁波':[121.56,29.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '湛江':[110.359377,21.270708],</span></span><br><span class=\"line\"><span class=\"undefined\">    '揭阳':[116.35,23.55],</span></span><br><span class=\"line\"><span class=\"undefined\">    '荣成':[122.41,37.16],</span></span><br><span class=\"line\"><span class=\"undefined\">    '连云港':[119.16,34.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '葫芦岛':[120.836932,40.711052],</span></span><br><span class=\"line\"><span class=\"undefined\">    '常熟':[120.74,31.64],</span></span><br><span class=\"line\"><span class=\"undefined\">    '东莞':[113.75,23.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '河源':[114.68,23.73],</span></span><br><span class=\"line\"><span class=\"undefined\">    '淮安':[119.15,33.5],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泰州':[119.9,32.49],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南宁':[108.33,22.84],</span></span><br><span class=\"line\"><span class=\"undefined\">    '营口':[122.18,40.65],</span></span><br><span class=\"line\"><span class=\"undefined\">    '惠州':[114.4,23.09],</span></span><br><span class=\"line\"><span class=\"undefined\">    '江阴':[120.26,31.91],</span></span><br><span class=\"line\"><span class=\"undefined\">    '蓬莱':[120.75,37.8],</span></span><br><span class=\"line\"><span class=\"undefined\">    '韶关':[113.62,24.84],</span></span><br><span class=\"line\"><span class=\"undefined\">    '嘉峪关':[98.289152,39.77313],</span></span><br><span class=\"line\"><span class=\"undefined\">    '广州':[113.23,23.16],</span></span><br><span class=\"line\"><span class=\"undefined\">    '延安':[109.47,36.6],</span></span><br><span class=\"line\"><span class=\"undefined\">    '太原':[112.53,37.87],</span></span><br><span class=\"line\"><span class=\"undefined\">    '清远':[113.01,23.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '中山':[113.38,22.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '昆明':[102.73,25.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '寿光':[118.73,36.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '盘锦':[122.070714,41.119997],</span></span><br><span class=\"line\"><span class=\"undefined\">    '长治':[113.08,36.18],</span></span><br><span class=\"line\"><span class=\"undefined\">    '深圳':[114.07,22.62],</span></span><br><span class=\"line\"><span class=\"undefined\">    '珠海':[113.52,22.3],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宿迁':[118.3,33.96],</span></span><br><span class=\"line\"><span class=\"undefined\">    '咸阳':[108.72,34.36],</span></span><br><span class=\"line\"><span class=\"undefined\">    '铜川':[109.11,35.09],</span></span><br><span class=\"line\"><span class=\"undefined\">    '平度':[119.97,36.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '佛山':[113.11,23.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '海口':[110.35,20.02],</span></span><br><span class=\"line\"><span class=\"undefined\">    '江门':[113.06,22.61],</span></span><br><span class=\"line\"><span class=\"undefined\">    '章丘':[117.53,36.72],</span></span><br><span class=\"line\"><span class=\"undefined\">    '肇庆':[112.44,23.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '大连':[121.62,38.92],</span></span><br><span class=\"line\"><span class=\"undefined\">    '临汾':[111.5,36.08],</span></span><br><span class=\"line\"><span class=\"undefined\">    '吴江':[120.63,31.16],</span></span><br><span class=\"line\"><span class=\"undefined\">    '石嘴山':[106.39,39.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '沈阳':[123.38,41.8],</span></span><br><span class=\"line\"><span class=\"undefined\">    '苏州':[120.62,31.32],</span></span><br><span class=\"line\"><span class=\"undefined\">    '茂名':[110.88,21.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '嘉兴':[120.76,30.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '长春':[125.35,43.88],</span></span><br><span class=\"line\"><span class=\"undefined\">    '胶州':[120.03336,36.264622],</span></span><br><span class=\"line\"><span class=\"undefined\">    '银川':[106.27,38.47],</span></span><br><span class=\"line\"><span class=\"undefined\">    '张家港':[120.555821,31.875428],</span></span><br><span class=\"line\"><span class=\"undefined\">    '三门峡':[111.19,34.76],</span></span><br><span class=\"line\"><span class=\"undefined\">    '锦州':[121.15,41.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南昌':[115.89,28.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '柳州':[109.4,24.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '三亚':[109.511909,18.252847],</span></span><br><span class=\"line\"><span class=\"undefined\">    '自贡':[104.778442,29.33903],</span></span><br><span class=\"line\"><span class=\"undefined\">    '吉林':[126.57,43.87],</span></span><br><span class=\"line\"><span class=\"undefined\">    '阳江':[111.95,21.85],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泸州':[105.39,28.91],</span></span><br><span class=\"line\"><span class=\"undefined\">    '西宁':[101.74,36.56],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宜宾':[104.56,29.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '呼和浩特':[111.65,40.82],</span></span><br><span class=\"line\"><span class=\"undefined\">    '成都':[104.06,30.67],</span></span><br><span class=\"line\"><span class=\"undefined\">    '大同':[113.3,40.12],</span></span><br><span class=\"line\"><span class=\"undefined\">    '镇江':[119.44,32.2],</span></span><br><span class=\"line\"><span class=\"undefined\">    '桂林':[110.28,25.29],</span></span><br><span class=\"line\"><span class=\"undefined\">    '张家界':[110.479191,29.117096],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宜兴':[119.82,31.36],</span></span><br><span class=\"line\"><span class=\"undefined\">    '北海':[109.12,21.49],</span></span><br><span class=\"line\"><span class=\"undefined\">    '西安':[108.95,34.27],</span></span><br><span class=\"line\"><span class=\"undefined\">    '金坛':[119.56,31.74],</span></span><br><span class=\"line\"><span class=\"undefined\">    '东营':[118.49,37.46],</span></span><br><span class=\"line\"><span class=\"undefined\">    '牡丹江':[129.58,44.6],</span></span><br><span class=\"line\"><span class=\"undefined\">    '遵义':[106.9,27.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '绍兴':[120.58,30.01],</span></span><br><span class=\"line\"><span class=\"undefined\">    '扬州':[119.42,32.39],</span></span><br><span class=\"line\"><span class=\"undefined\">    '常州':[119.95,31.79],</span></span><br><span class=\"line\"><span class=\"undefined\">    '潍坊':[119.1,36.62],</span></span><br><span class=\"line\"><span class=\"undefined\">    '重庆':[106.54,29.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '台州':[121.420757,28.656386],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南京':[118.78,32.04],</span></span><br><span class=\"line\"><span class=\"undefined\">    '滨州':[118.03,37.36],</span></span><br><span class=\"line\"><span class=\"undefined\">    '贵阳':[106.71,26.57],</span></span><br><span class=\"line\"><span class=\"undefined\">    '无锡':[120.29,31.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '本溪':[123.73,41.3],</span></span><br><span class=\"line\"><span class=\"undefined\">    '克拉玛依':[84.77,45.59],</span></span><br><span class=\"line\"><span class=\"undefined\">    '渭南':[109.5,34.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '马鞍山':[118.48,31.56],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宝鸡':[107.15,34.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '焦作':[113.21,35.24],</span></span><br><span class=\"line\"><span class=\"undefined\">    '句容':[119.16,31.95],</span></span><br><span class=\"line\"><span class=\"undefined\">    '北京':[116.46,39.92],</span></span><br><span class=\"line\"><span class=\"undefined\">    '徐州':[117.2,34.26],</span></span><br><span class=\"line\"><span class=\"undefined\">    '衡水':[115.72,37.72],</span></span><br><span class=\"line\"><span class=\"undefined\">    '包头':[110,40.58],</span></span><br><span class=\"line\"><span class=\"undefined\">    '绵阳':[104.73,31.48],</span></span><br><span class=\"line\"><span class=\"undefined\">    '乌鲁木齐':[87.68,43.77],</span></span><br><span class=\"line\"><span class=\"undefined\">    '枣庄':[117.57,34.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '杭州':[120.19,30.26],</span></span><br><span class=\"line\"><span class=\"undefined\">    '淄博':[118.05,36.78],</span></span><br><span class=\"line\"><span class=\"undefined\">    '鞍山':[122.85,41.12],</span></span><br><span class=\"line\"><span class=\"undefined\">    '溧阳':[119.48,31.43],</span></span><br><span class=\"line\"><span class=\"undefined\">    '库尔勒':[86.06,41.68],</span></span><br><span class=\"line\"><span class=\"undefined\">    '安阳':[114.35,36.1],</span></span><br><span class=\"line\"><span class=\"undefined\">    '开封':[114.35,34.79],</span></span><br><span class=\"line\"><span class=\"undefined\">    '济南':[117,36.65],</span></span><br><span class=\"line\"><span class=\"undefined\">    '德阳':[104.37,31.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '温州':[120.65,28.01],</span></span><br><span class=\"line\"><span class=\"undefined\">    '九江':[115.97,29.71],</span></span><br><span class=\"line\"><span class=\"undefined\">    '邯郸':[114.47,36.6],</span></span><br><span class=\"line\"><span class=\"undefined\">    '临安':[119.72,30.23],</span></span><br><span class=\"line\"><span class=\"undefined\">    '兰州':[103.73,36.03],</span></span><br><span class=\"line\"><span class=\"undefined\">    '沧州':[116.83,38.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '临沂':[118.35,35.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '南充':[106.110698,30.837793],</span></span><br><span class=\"line\"><span class=\"undefined\">    '天津':[117.2,39.13],</span></span><br><span class=\"line\"><span class=\"undefined\">    '富阳':[119.95,30.07],</span></span><br><span class=\"line\"><span class=\"undefined\">    '泰安':[117.13,36.18],</span></span><br><span class=\"line\"><span class=\"undefined\">    '诸暨':[120.23,29.71],</span></span><br><span class=\"line\"><span class=\"undefined\">    '郑州':[113.65,34.76],</span></span><br><span class=\"line\"><span class=\"undefined\">    '哈尔滨':[126.63,45.75],</span></span><br><span class=\"line\"><span class=\"undefined\">    '聊城':[115.97,36.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '芜湖':[118.38,31.33],</span></span><br><span class=\"line\"><span class=\"undefined\">    '唐山':[118.02,39.63],</span></span><br><span class=\"line\"><span class=\"undefined\">    '平顶山':[113.29,33.75],</span></span><br><span class=\"line\"><span class=\"undefined\">    '邢台':[114.48,37.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '德州':[116.29,37.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '济宁':[116.59,35.38],</span></span><br><span class=\"line\"><span class=\"undefined\">    '荆州':[112.239741,30.335165],</span></span><br><span class=\"line\"><span class=\"undefined\">    '宜昌':[111.3,30.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '义乌':[120.06,29.32],</span></span><br><span class=\"line\"><span class=\"undefined\">    '丽水':[119.92,28.45],</span></span><br><span class=\"line\"><span class=\"undefined\">    '洛阳':[112.44,34.7],</span></span><br><span class=\"line\"><span class=\"undefined\">    '秦皇岛':[119.57,39.95],</span></span><br><span class=\"line\"><span class=\"undefined\">    '株洲':[113.16,27.83],</span></span><br><span class=\"line\"><span class=\"undefined\">    '石家庄':[114.48,38.03],</span></span><br><span class=\"line\"><span class=\"undefined\">    '莱芜':[117.67,36.19],</span></span><br><span class=\"line\"><span class=\"undefined\">    '常德':[111.69,29.05],</span></span><br><span class=\"line\"><span class=\"undefined\">    '保定':[115.48,38.85],</span></span><br><span class=\"line\"><span class=\"undefined\">    '湘潭':[112.91,27.87],</span></span><br><span class=\"line\"><span class=\"undefined\">    '金华':[119.64,29.12],</span></span><br><span class=\"line\"><span class=\"undefined\">    '岳阳':[113.09,29.37],</span></span><br><span class=\"line\"><span class=\"undefined\">    '长沙':[113,28.21],</span></span><br><span class=\"line\"><span class=\"undefined\">    '衢州':[118.88,28.97],</span></span><br><span class=\"line\"><span class=\"undefined\">    '廊坊':[116.7,39.53],</span></span><br><span class=\"line\"><span class=\"undefined\">    '菏泽':[115.480656,35.23375],</span></span><br><span class=\"line\"><span class=\"undefined\">    '合肥':[117.27,31.86],</span></span><br><span class=\"line\"><span class=\"undefined\">    '武汉':[114.31,30.52],</span></span><br><span class=\"line\"><span class=\"undefined\">    '大庆':[125.03,46.58]</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var convertData = function (data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    var res = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    for (var i = 0; i &lt; data.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var geoCoord = geoCoordMap[data[i].name];</span></span><br><span class=\"line\"><span class=\"undefined\">        if (geoCoord) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            res.push(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                name: data[i].name,</span></span><br><span class=\"line\"><span class=\"undefined\">                value: geoCoord.concat(data[i].value)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    return res;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">option = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    title: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        text: 'echarts 和 百度地图API Demo',</span></span><br><span class=\"line\"><span class=\"undefined\">        // subtext: 'data from PM25.in',</span></span><br><span class=\"line\"><span class=\"undefined\">        // sublink: 'http://www.pm25.in',</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 'center'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    tooltip : &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        trigger: 'item'</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    bmap: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        center: [104.114129, 37.550339],</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 5,</span></span><br><span class=\"line\"><span class=\"undefined\">        roam: true,</span></span><br><span class=\"line\"><span class=\"undefined\">        mapStyle: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            styleJson: [&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'water',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'land',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#f3f3f3'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'railway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'highway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fdfdfd'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'highway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'labels',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'arterial',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'geometry',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fefefe'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'arterial',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'geometry.fill',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fefefe'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'poi',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'green',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'subway',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'manmade',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'local',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'arterial',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'labels',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'visibility': 'off'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'boundary',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#fefefe'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'building',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'all',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#d1d1d1'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                'featureType': 'label',</span></span><br><span class=\"line\"><span class=\"undefined\">                'elementType': 'labels.text.fill',</span></span><br><span class=\"line\"><span class=\"undefined\">                'stylers': &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    'color': '#999999'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;]</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    series : [</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            name: 'pm2.5',</span></span><br><span class=\"line\"><span class=\"undefined\">            type: 'scatter',</span></span><br><span class=\"line\"><span class=\"undefined\">            coordinateSystem: 'bmap',</span></span><br><span class=\"line\"><span class=\"undefined\">            data: convertData(data),</span></span><br><span class=\"line\"><span class=\"undefined\">            symbolSize: function (val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                return val[2] / 10;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            label: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    formatter: '&#123;b&#125;',</span></span><br><span class=\"line\"><span class=\"undefined\">                    position: 'right',</span></span><br><span class=\"line\"><span class=\"undefined\">                    show: false</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">                emphasis: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    show: true</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            itemStyle: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    color: 'purple'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            name: 'Top 5',</span></span><br><span class=\"line\"><span class=\"undefined\">            type: 'effectScatter',</span></span><br><span class=\"line\"><span class=\"undefined\">            coordinateSystem: 'bmap',</span></span><br><span class=\"line\"><span class=\"undefined\">            data: convertData(data.sort(function (a, b) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                return b.value - a.value;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;).slice(0, 6)),</span></span><br><span class=\"line\"><span class=\"undefined\">            symbolSize: function (val) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                return val[2] / 10;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            showEffectOn: 'render',</span></span><br><span class=\"line\"><span class=\"undefined\">            rippleEffect: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                brushType: 'stroke'</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            hoverAnimation: true,</span></span><br><span class=\"line\"><span class=\"undefined\">            label: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    formatter: '&#123;b&#125;',</span></span><br><span class=\"line\"><span class=\"undefined\">                    position: 'right',</span></span><br><span class=\"line\"><span class=\"undefined\">                    show: true</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            itemStyle: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                normal: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    color: 'purple',</span></span><br><span class=\"line\"><span class=\"undefined\">                    shadowBlur: 10,</span></span><br><span class=\"line\"><span class=\"undefined\">                    shadowColor: '#333'</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            zlevel: 1</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    ]</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">myChart.setOption(option);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"ExtendGcd,即扩展欧几里得算法的C++模板化解释","date":"2015-07-21T12:29:30.000Z","_content":"\n刚刚接触感觉很高大上的“扩展欧几里得算法“，很郁闷，研究了很久。现在感觉能够套模板了，当然这样是远远不够的，不过先写篇博客记录一下最近的动态。帮助自己记忆，也可以帮助大家理解下这个数学算法，当然欢迎各位的斧正和指点，我将不断努力！\n\n首先，明确我们要求ax+by=c中x,y的整数解（至于没有解的情况下边会讨论）\n\n大家应该看到过ax+by=Gcd(a,b)的式子，现在我也不明白这是什么，以下是我大概能够死记硬背的（大家能学会的还是去学学原理）。\n\n先求gcd(a,b),程序如下:\n\n\n```C\ntypedef long long LL;  \nusing namespace std;  \n  \nLL gcd(LL a,LL b){  \n    while(a%b){  \n        LL temp=b;  \n        b=a%b;  \n        a=temp;  \n    }  \n    return b;  \n}  \n```\nLL d=gcd(a,b);\n后，a/=d,b/=d,c/=d;这里有当c%d!=0是，ax+by=c不存在整数解（我也不知道为什么，真的模板化了)\n\n于是原式变成a'x+b'y=c'。据说那个扩展欧几里得求的是a'x+b'y=1的解，给出extendGcd(a,b)的模板\n\n\n```C\nvoid exGcd(LL a,LL b,LL &x,LL &y){\n    if(b==0){\n        x=1;y=0;  \n        return ;  \n    } \n    exGcd(b,a%b,x,y); \n        LL temp;  \n        temp=y;  \n        y=x-a/b*y;  \n        x=temp;  \n}\n```\n这里不难得到修改后的x,y为方程a'x+b'y=1的解，那么c'x0,c'y0就是a'x+b'y=c'的一组特解了，根据参数方程的性质，我们引入t（整数）来写出x,y通解的参数方程x=c'x0-b't，y=c'y0+a't。\n通常题目要求我们求问题的最小解，所以当x->0时，我们求出的t=c'x0/b(这里是有误差的，因为在C语言中的除不一定，事实上，我们可以判断下x<0时，可以让t=t+1。\n\n下面来看一道典型的模板题吧。\n\npoj 1061 \n\n\n青蛙的约会\nTime Limit: 1000MS\t \tMemory Limit: 10000K\nTotal Submissions: 96453\t \tAccepted: 18021\nDescription\n\n两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。 \n我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。 \nInput\n\n输入只包括一行5个整数x，y，m，n，L，其中x≠y < 2000000000，0 < m、n < 2000000000，0 < L < 2100000000。\nOutput\n\n输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行\"Impossible\"\nSample Input\n1 2 3 4 5\nSample Output\n4\n\n```C\n#include <iostream>  \n#include <cstdio>  \n  \ntypedef long long LL;  \nusing namespace std;  \n  \nLL gcd(LL a,LL b){  \n    while(a%b){  \n        LL temp=b;  \n        b=a%b;  \n        a=temp;  \n    }  \n    return b;  \n}  \n  \nvoid exGcd(LL a,LL b,LL &x,LL &y){  \n    if(b==0){  \n        x=1;y=0;  \n        return ;  \n    }  \n    exGcd(b,a%b,x,y);  \n        LL temp;  \n        temp=y;  \n        y=x-a/b*y;  \n        x=temp;  \n}  \nint main()  \n{  \n    LL x,y,m,n,l,ans,key,t;  \n    while(~scanf(\"%I64d%I64d%I64d%I64d%I64d\",&x,&y,&m,&n,&l)){  \n        /* (n-m)*ans+k*l=x-y; \n         * n-m=a,ans=x,k=y,l=b,x-y=c; \n         *   a*x+b*y=c; \n         */  \n        LL a=n-m,b=l,c=x-y;  \n        LL d=gcd(a,b);  \n        //cout <<  d  <<endl;  \n        if(c%d) {printf(\"Impossible\\n\");continue;}  \n  \n        a/=d;b/=d;c/=d;  \n        exGcd(a,b,ans,key);  \n  \n        t=c*ans/b;  \n        ans=c*ans-t*b;  \n        if(ans<0)  \n            ans+=b;  \n        printf(\"%I64d\\n\",ans);  \n    }  \n    return 0;  \n}  \n```","source":"_posts/ExtendGcd,即扩展欧几里得算法的C++模板化解释.md","raw":"---\ntitle: ExtendGcd,即扩展欧几里得算法的C++模板化解释\ndate: 2015-07-21 20:29:30\ntags: \"ACM&OJ\"\n---\n\n刚刚接触感觉很高大上的“扩展欧几里得算法“，很郁闷，研究了很久。现在感觉能够套模板了，当然这样是远远不够的，不过先写篇博客记录一下最近的动态。帮助自己记忆，也可以帮助大家理解下这个数学算法，当然欢迎各位的斧正和指点，我将不断努力！\n\n首先，明确我们要求ax+by=c中x,y的整数解（至于没有解的情况下边会讨论）\n\n大家应该看到过ax+by=Gcd(a,b)的式子，现在我也不明白这是什么，以下是我大概能够死记硬背的（大家能学会的还是去学学原理）。\n\n先求gcd(a,b),程序如下:\n\n\n```C\ntypedef long long LL;  \nusing namespace std;  \n  \nLL gcd(LL a,LL b){  \n    while(a%b){  \n        LL temp=b;  \n        b=a%b;  \n        a=temp;  \n    }  \n    return b;  \n}  \n```\nLL d=gcd(a,b);\n后，a/=d,b/=d,c/=d;这里有当c%d!=0是，ax+by=c不存在整数解（我也不知道为什么，真的模板化了)\n\n于是原式变成a'x+b'y=c'。据说那个扩展欧几里得求的是a'x+b'y=1的解，给出extendGcd(a,b)的模板\n\n\n```C\nvoid exGcd(LL a,LL b,LL &x,LL &y){\n    if(b==0){\n        x=1;y=0;  \n        return ;  \n    } \n    exGcd(b,a%b,x,y); \n        LL temp;  \n        temp=y;  \n        y=x-a/b*y;  \n        x=temp;  \n}\n```\n这里不难得到修改后的x,y为方程a'x+b'y=1的解，那么c'x0,c'y0就是a'x+b'y=c'的一组特解了，根据参数方程的性质，我们引入t（整数）来写出x,y通解的参数方程x=c'x0-b't，y=c'y0+a't。\n通常题目要求我们求问题的最小解，所以当x->0时，我们求出的t=c'x0/b(这里是有误差的，因为在C语言中的除不一定，事实上，我们可以判断下x<0时，可以让t=t+1。\n\n下面来看一道典型的模板题吧。\n\npoj 1061 \n\n\n青蛙的约会\nTime Limit: 1000MS\t \tMemory Limit: 10000K\nTotal Submissions: 96453\t \tAccepted: 18021\nDescription\n\n两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。 \n我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。 \nInput\n\n输入只包括一行5个整数x，y，m，n，L，其中x≠y < 2000000000，0 < m、n < 2000000000，0 < L < 2100000000。\nOutput\n\n输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行\"Impossible\"\nSample Input\n1 2 3 4 5\nSample Output\n4\n\n```C\n#include <iostream>  \n#include <cstdio>  \n  \ntypedef long long LL;  \nusing namespace std;  \n  \nLL gcd(LL a,LL b){  \n    while(a%b){  \n        LL temp=b;  \n        b=a%b;  \n        a=temp;  \n    }  \n    return b;  \n}  \n  \nvoid exGcd(LL a,LL b,LL &x,LL &y){  \n    if(b==0){  \n        x=1;y=0;  \n        return ;  \n    }  \n    exGcd(b,a%b,x,y);  \n        LL temp;  \n        temp=y;  \n        y=x-a/b*y;  \n        x=temp;  \n}  \nint main()  \n{  \n    LL x,y,m,n,l,ans,key,t;  \n    while(~scanf(\"%I64d%I64d%I64d%I64d%I64d\",&x,&y,&m,&n,&l)){  \n        /* (n-m)*ans+k*l=x-y; \n         * n-m=a,ans=x,k=y,l=b,x-y=c; \n         *   a*x+b*y=c; \n         */  \n        LL a=n-m,b=l,c=x-y;  \n        LL d=gcd(a,b);  \n        //cout <<  d  <<endl;  \n        if(c%d) {printf(\"Impossible\\n\");continue;}  \n  \n        a/=d;b/=d;c/=d;  \n        exGcd(a,b,ans,key);  \n  \n        t=c*ans/b;  \n        ans=c*ans-t*b;  \n        if(ans<0)  \n            ans+=b;  \n        printf(\"%I64d\\n\",ans);  \n    }  \n    return 0;  \n}  \n```","slug":"ExtendGcd,即扩展欧几里得算法的C++模板化解释","published":1,"updated":"2018-01-09T00:48:05.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzu70002yg3ik0x8mwvd","content":"<p>刚刚接触感觉很高大上的“扩展欧几里得算法“，很郁闷，研究了很久。现在感觉能够套模板了，当然这样是远远不够的，不过先写篇博客记录一下最近的动态。帮助自己记忆，也可以帮助大家理解下这个数学算法，当然欢迎各位的斧正和指点，我将不断努力！</p>\n<p>首先，明确我们要求ax+by=c中x,y的整数解（至于没有解的情况下边会讨论）</p>\n<p>大家应该看到过ax+by=Gcd(a,b)的式子，现在我也不明白这是什么，以下是我大概能够死记硬背的（大家能学会的还是去学学原理）。</p>\n<p>先求gcd(a,b),程序如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a,LL b)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a%b)&#123;  </span><br><span class=\"line\">        LL temp=b;  </span><br><span class=\"line\">        b=a%b;  </span><br><span class=\"line\">        a=temp;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LL d=gcd(a,b);<br>后，a/=d,b/=d,c/=d;这里有当c%d!=0是，ax+by=c不存在整数解（我也不知道为什么，真的模板化了)</p>\n<p>于是原式变成a’x+b’y=c’。据说那个扩展欧几里得求的是a’x+b’y=1的解，给出extendGcd(a,b)的模板</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exGcd</span><span class=\"params\">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    exGcd(b,a%b,x,y); </span><br><span class=\"line\">        LL temp;  </span><br><span class=\"line\">        temp=y;  </span><br><span class=\"line\">        y=x-a/b*y;  </span><br><span class=\"line\">        x=temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里不难得到修改后的x,y为方程a’x+b’y=1的解，那么c’x0,c’y0就是a’x+b’y=c’的一组特解了，根据参数方程的性质，我们引入t（整数）来写出x,y通解的参数方程x=c’x0-b’t，y=c’y0+a’t。<br>通常题目要求我们求问题的最小解，所以当x-&gt;0时，我们求出的t=c’x0/b(这里是有误差的，因为在C语言中的除不一定，事实上，我们可以判断下x&lt;0时，可以让t=t+1。</p>\n<p>下面来看一道典型的模板题吧。</p>\n<p>poj 1061 </p>\n<p>青蛙的约会<br>Time Limit: 1000MS         Memory Limit: 10000K<br>Total Submissions: 96453         Accepted: 18021<br>Description</p>\n<p>两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。<br>我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。<br>Input</p>\n<p>输入只包括一行5个整数x，y，m，n，L，其中x≠y &lt; 2000000000，0 &lt; m、n &lt; 2000000000，0 &lt; L &lt; 2100000000。<br>Output</p>\n<p>输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行”Impossible”<br>Sample Input<br>1 2 3 4 5<br>Sample Output<br>4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a,LL b)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a%b)&#123;  </span><br><span class=\"line\">        LL temp=b;  </span><br><span class=\"line\">        b=a%b;  </span><br><span class=\"line\">        a=temp;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exGcd</span><span class=\"params\">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">        x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    exGcd(b,a%b,x,y);  </span><br><span class=\"line\">        LL temp;  </span><br><span class=\"line\">        temp=y;  </span><br><span class=\"line\">        y=x-a/b*y;  </span><br><span class=\"line\">        x=temp;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    LL x,y,m,n,l,ans,key,t;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%I64d%I64d%I64d%I64d%I64d\"</span>,&amp;x,&amp;y,&amp;m,&amp;n,&amp;l))&#123;  </span><br><span class=\"line\">        <span class=\"comment\">/* (n-m)*ans+k*l=x-y; </span></span><br><span class=\"line\"><span class=\"comment\">         * n-m=a,ans=x,k=y,l=b,x-y=c; </span></span><br><span class=\"line\"><span class=\"comment\">         *   a*x+b*y=c; </span></span><br><span class=\"line\"><span class=\"comment\">         */</span>  </span><br><span class=\"line\">        LL a=n-m,b=l,c=x-y;  </span><br><span class=\"line\">        LL d=gcd(a,b);  </span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt;  d  &lt;&lt;endl;  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c%d) &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);<span class=\"keyword\">continue</span>;&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        a/=d;b/=d;c/=d;  </span><br><span class=\"line\">        exGcd(a,b,ans,key);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        t=c*ans/b;  </span><br><span class=\"line\">        ans=c*ans-t*b;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&lt;<span class=\"number\">0</span>)  </span><br><span class=\"line\">            ans+=b;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>,ans);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>刚刚接触感觉很高大上的“扩展欧几里得算法“，很郁闷，研究了很久。现在感觉能够套模板了，当然这样是远远不够的，不过先写篇博客记录一下最近的动态。帮助自己记忆，也可以帮助大家理解下这个数学算法，当然欢迎各位的斧正和指点，我将不断努力！</p>\n<p>首先，明确我们要求ax+by=c中x,y的整数解（至于没有解的情况下边会讨论）</p>\n<p>大家应该看到过ax+by=Gcd(a,b)的式子，现在我也不明白这是什么，以下是我大概能够死记硬背的（大家能学会的还是去学学原理）。</p>\n<p>先求gcd(a,b),程序如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a,LL b)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a%b)&#123;  </span><br><span class=\"line\">        LL temp=b;  </span><br><span class=\"line\">        b=a%b;  </span><br><span class=\"line\">        a=temp;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LL d=gcd(a,b);<br>后，a/=d,b/=d,c/=d;这里有当c%d!=0是，ax+by=c不存在整数解（我也不知道为什么，真的模板化了)</p>\n<p>于是原式变成a’x+b’y=c’。据说那个扩展欧几里得求的是a’x+b’y=1的解，给出extendGcd(a,b)的模板</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exGcd</span><span class=\"params\">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    exGcd(b,a%b,x,y); </span><br><span class=\"line\">        LL temp;  </span><br><span class=\"line\">        temp=y;  </span><br><span class=\"line\">        y=x-a/b*y;  </span><br><span class=\"line\">        x=temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里不难得到修改后的x,y为方程a’x+b’y=1的解，那么c’x0,c’y0就是a’x+b’y=c’的一组特解了，根据参数方程的性质，我们引入t（整数）来写出x,y通解的参数方程x=c’x0-b’t，y=c’y0+a’t。<br>通常题目要求我们求问题的最小解，所以当x-&gt;0时，我们求出的t=c’x0/b(这里是有误差的，因为在C语言中的除不一定，事实上，我们可以判断下x&lt;0时，可以让t=t+1。</p>\n<p>下面来看一道典型的模板题吧。</p>\n<p>poj 1061 </p>\n<p>青蛙的约会<br>Time Limit: 1000MS         Memory Limit: 10000K<br>Total Submissions: 96453         Accepted: 18021<br>Description</p>\n<p>两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。<br>我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。<br>Input</p>\n<p>输入只包括一行5个整数x，y，m，n，L，其中x≠y &lt; 2000000000，0 &lt; m、n &lt; 2000000000，0 &lt; L &lt; 2100000000。<br>Output</p>\n<p>输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行”Impossible”<br>Sample Input<br>1 2 3 4 5<br>Sample Output<br>4</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a,LL b)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a%b)&#123;  </span><br><span class=\"line\">        LL temp=b;  </span><br><span class=\"line\">        b=a%b;  </span><br><span class=\"line\">        a=temp;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exGcd</span><span class=\"params\">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">        x=<span class=\"number\">1</span>;y=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    exGcd(b,a%b,x,y);  </span><br><span class=\"line\">        LL temp;  </span><br><span class=\"line\">        temp=y;  </span><br><span class=\"line\">        y=x-a/b*y;  </span><br><span class=\"line\">        x=temp;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    LL x,y,m,n,l,ans,key,t;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%I64d%I64d%I64d%I64d%I64d\"</span>,&amp;x,&amp;y,&amp;m,&amp;n,&amp;l))&#123;  </span><br><span class=\"line\">        <span class=\"comment\">/* (n-m)*ans+k*l=x-y; </span></span><br><span class=\"line\"><span class=\"comment\">         * n-m=a,ans=x,k=y,l=b,x-y=c; </span></span><br><span class=\"line\"><span class=\"comment\">         *   a*x+b*y=c; </span></span><br><span class=\"line\"><span class=\"comment\">         */</span>  </span><br><span class=\"line\">        LL a=n-m,b=l,c=x-y;  </span><br><span class=\"line\">        LL d=gcd(a,b);  </span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt;  d  &lt;&lt;endl;  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c%d) &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">\"Impossible\\n\"</span>);<span class=\"keyword\">continue</span>;&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        a/=d;b/=d;c/=d;  </span><br><span class=\"line\">        exGcd(a,b,ans,key);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        t=c*ans/b;  </span><br><span class=\"line\">        ans=c*ans-t*b;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&lt;<span class=\"number\">0</span>)  </span><br><span class=\"line\">            ans+=b;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%I64d\\n\"</span>,ans);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"HDU 2181 哈密顿绕行世界问题","date":"2015-07-13T12:41:41.000Z","_content":"\n看到挺多人在写博客的，我也想来学习学习，接触ACM也快1年了吧，不过到现在还是个渣渣，不过正在努力提高！\n\n写的第一篇博客，哈密顿绕行世界问题：深度搜索问题（深搜）。与一般的地图找点（找出口问题）相似，只是搜索过程中需要记录每次走过的点，便于输出。题目如下：高手别喷，如有雷同，请勿见怪。\n\n题目链接: http://acm.hdu.edu.cn/showproblem.php?pid=2181<link>\n\n\n``` bash\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n  \nconst int MAXN=21;  \n  \nusing namespace std;  \n  \nint way[MAXN];          //保存每次走过的城市  \nint sumWays=0;          //记录总共有多少方案  \nint cas;  \nbool mp[MAXN][MAXN];    //保存原始输入数据  \nbool used[MAXN];        //判断该点（城市）是否被用过  \n  \nvoid inPut(){  \n    int a,b,c;  \n    for(int i=1;i<=20;i++){  \n        scanf(\"%d%d%d\",&a,&b,&c);  \n        mp[i][a]=true;  //表示与i城市连通的城市a,b,c。（数组特殊用法  \n        mp[i][b]=true;  \n        mp[i][c]=true;  \n    }  \n}  \n  \nvoid dfs(int nowStep,int count){  \n    way[count]=nowStep;             //当前计数走的城市编号，便于输出  \n    if(count==19){                  //搜索结束条件：当20个城市全部走完时  \n        if(mp[nowStep][cas]){       //若能够回到原点，则输出  \n            printf(\"%d:  \", ++ sumWays);  \n            for(int i = 0; i < 20; ++ i){  \n                printf(\"%d \", way[i]);  \n            }  \n            printf(\"%d\\n\", way[0]);  \n        }  \n    }  \n    else{  \n        for(int j = 1; j <= 20; j ++){  //找某条路是否连通，且通往该城市未被走过  \n            if(mp[nowStep][j] && !used[j]){  \n                used[j] = true;  \n                dfs(j, count+1);  \n                used[j] = false;    //记得消除！  \n            }  \n        }  \n    }  \n    return ;  \n}  \n  \nint main()  \n{  \n    memset(mp,false,sizeof(mp));  \n    inPut();  \n    while(scanf(\"%d\",&cas)&&cas){  \n        sumWays=0;  \n        memset(used,false,sizeof(used));  \n        //memset(way,0,sizeof(mp));  \n        used[cas]=true;  \n        dfs(cas,0); //深搜递归  \n    }  \n    return 0;  \n}  \n\n```","source":"_posts/HDU 2181 哈密顿绕行世界问题.md","raw":"---\ntitle: HDU 2181 哈密顿绕行世界问题\ndate: 2015-07-13 20:41:41\ntags: \"ACM&OJ\"\n---\n\n看到挺多人在写博客的，我也想来学习学习，接触ACM也快1年了吧，不过到现在还是个渣渣，不过正在努力提高！\n\n写的第一篇博客，哈密顿绕行世界问题：深度搜索问题（深搜）。与一般的地图找点（找出口问题）相似，只是搜索过程中需要记录每次走过的点，便于输出。题目如下：高手别喷，如有雷同，请勿见怪。\n\n题目链接: http://acm.hdu.edu.cn/showproblem.php?pid=2181<link>\n\n\n``` bash\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n  \nconst int MAXN=21;  \n  \nusing namespace std;  \n  \nint way[MAXN];          //保存每次走过的城市  \nint sumWays=0;          //记录总共有多少方案  \nint cas;  \nbool mp[MAXN][MAXN];    //保存原始输入数据  \nbool used[MAXN];        //判断该点（城市）是否被用过  \n  \nvoid inPut(){  \n    int a,b,c;  \n    for(int i=1;i<=20;i++){  \n        scanf(\"%d%d%d\",&a,&b,&c);  \n        mp[i][a]=true;  //表示与i城市连通的城市a,b,c。（数组特殊用法  \n        mp[i][b]=true;  \n        mp[i][c]=true;  \n    }  \n}  \n  \nvoid dfs(int nowStep,int count){  \n    way[count]=nowStep;             //当前计数走的城市编号，便于输出  \n    if(count==19){                  //搜索结束条件：当20个城市全部走完时  \n        if(mp[nowStep][cas]){       //若能够回到原点，则输出  \n            printf(\"%d:  \", ++ sumWays);  \n            for(int i = 0; i < 20; ++ i){  \n                printf(\"%d \", way[i]);  \n            }  \n            printf(\"%d\\n\", way[0]);  \n        }  \n    }  \n    else{  \n        for(int j = 1; j <= 20; j ++){  //找某条路是否连通，且通往该城市未被走过  \n            if(mp[nowStep][j] && !used[j]){  \n                used[j] = true;  \n                dfs(j, count+1);  \n                used[j] = false;    //记得消除！  \n            }  \n        }  \n    }  \n    return ;  \n}  \n  \nint main()  \n{  \n    memset(mp,false,sizeof(mp));  \n    inPut();  \n    while(scanf(\"%d\",&cas)&&cas){  \n        sumWays=0;  \n        memset(used,false,sizeof(used));  \n        //memset(way,0,sizeof(mp));  \n        used[cas]=true;  \n        dfs(cas,0); //深搜递归  \n    }  \n    return 0;  \n}  \n\n```","slug":"HDU 2181 哈密顿绕行世界问题","published":1,"updated":"2018-01-08T02:11:49.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzub0004yg3iksrzk8i2","content":"<p>看到挺多人在写博客的，我也想来学习学习，接触ACM也快1年了吧，不过到现在还是个渣渣，不过正在努力提高！</p>\n<p>写的第一篇博客，哈密顿绕行世界问题：深度搜索问题（深搜）。与一般的地图找点（找出口问题）相似，只是搜索过程中需要记录每次走过的点，便于输出。题目如下：高手别喷，如有雷同，请勿见怪。</p>\n<p>题目链接: <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2181\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=2181</a><link></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;  </span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;cstdio&gt;  </span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;cstring&gt;  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">const int MAXN=21;  </span><br><span class=\"line\">  </span><br><span class=\"line\">using namespace std;  </span><br><span class=\"line\">  </span><br><span class=\"line\">int way[MAXN];          //保存每次走过的城市  </span><br><span class=\"line\">int sumWays=0;          //记录总共有多少方案  </span><br><span class=\"line\">int cas;  </span><br><span class=\"line\">bool mp[MAXN][MAXN];    //保存原始输入数据  </span><br><span class=\"line\">bool used[MAXN];        //判断该点（城市）是否被用过  </span><br><span class=\"line\">  </span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">inPut</span></span>()&#123;  </span><br><span class=\"line\">    int a,b,c;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=1;i&lt;=20;i++)&#123;  </span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d%d%d\"</span>,&amp;a,&amp;b,&amp;c);  </span><br><span class=\"line\">        mp[i][a]=<span class=\"literal\">true</span>;  //表示与i城市连通的城市a,b,c。（数组特殊用法  </span><br><span class=\"line\">        mp[i][b]=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">        mp[i][c]=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">void dfs(int nowStep,int count)&#123;  </span><br><span class=\"line\">    way[count]=nowStep;             //当前计数走的城市编号，便于输出  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count==19)&#123;                  //搜索结束条件：当20个城市全部走完时  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp[nowStep][cas])&#123;       //若能够回到原点，则输出  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d:  \"</span>, ++ sumWays);  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i = 0; i &lt; 20; ++ i)&#123;  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, way[i]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, way[0]);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = 1; j &lt;= 20; j ++)&#123;  //找某条路是否连通，且通往该城市未被走过  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[nowStep][j] &amp;&amp; !used[j])&#123;  </span><br><span class=\"line\">                used[j] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                dfs(j, count+1);  </span><br><span class=\"line\">                used[j] = <span class=\"literal\">false</span>;    //记得消除！  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    memset(mp,<span class=\"literal\">false</span>,sizeof(mp));  </span><br><span class=\"line\">    inPut();  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(scanf(<span class=\"string\">\"%d\"</span>,&amp;cas)&amp;&amp;cas)&#123;  </span><br><span class=\"line\">        sumWays=0;  </span><br><span class=\"line\">        memset(used,<span class=\"literal\">false</span>,sizeof(used));  </span><br><span class=\"line\">        //memset(way,0,sizeof(mp));  </span><br><span class=\"line\">        used[cas]=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">        dfs(cas,0); //深搜递归  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">return</span> 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>看到挺多人在写博客的，我也想来学习学习，接触ACM也快1年了吧，不过到现在还是个渣渣，不过正在努力提高！</p>\n<p>写的第一篇博客，哈密顿绕行世界问题：深度搜索问题（深搜）。与一般的地图找点（找出口问题）相似，只是搜索过程中需要记录每次走过的点，便于输出。题目如下：高手别喷，如有雷同，请勿见怪。</p>\n<p>题目链接: <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2181\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=2181</a><link></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;iostream&gt;  </span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;cstdio&gt;  </span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;cstring&gt;  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">const int MAXN=21;  </span><br><span class=\"line\">  </span><br><span class=\"line\">using namespace std;  </span><br><span class=\"line\">  </span><br><span class=\"line\">int way[MAXN];          //保存每次走过的城市  </span><br><span class=\"line\">int sumWays=0;          //记录总共有多少方案  </span><br><span class=\"line\">int cas;  </span><br><span class=\"line\">bool mp[MAXN][MAXN];    //保存原始输入数据  </span><br><span class=\"line\">bool used[MAXN];        //判断该点（城市）是否被用过  </span><br><span class=\"line\">  </span><br><span class=\"line\">void <span class=\"function\"><span class=\"title\">inPut</span></span>()&#123;  </span><br><span class=\"line\">    int a,b,c;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=1;i&lt;=20;i++)&#123;  </span><br><span class=\"line\">        scanf(<span class=\"string\">\"%d%d%d\"</span>,&amp;a,&amp;b,&amp;c);  </span><br><span class=\"line\">        mp[i][a]=<span class=\"literal\">true</span>;  //表示与i城市连通的城市a,b,c。（数组特殊用法  </span><br><span class=\"line\">        mp[i][b]=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">        mp[i][c]=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">void dfs(int nowStep,int count)&#123;  </span><br><span class=\"line\">    way[count]=nowStep;             //当前计数走的城市编号，便于输出  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count==19)&#123;                  //搜索结束条件：当20个城市全部走完时  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp[nowStep][cas])&#123;       //若能够回到原点，则输出  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d:  \"</span>, ++ sumWays);  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int i = 0; i &lt; 20; ++ i)&#123;  </span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, way[i]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, way[0]);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j = 1; j &lt;= 20; j ++)&#123;  //找某条路是否连通，且通往该城市未被走过  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[nowStep][j] &amp;&amp; !used[j])&#123;  </span><br><span class=\"line\">                used[j] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                dfs(j, count+1);  </span><br><span class=\"line\">                used[j] = <span class=\"literal\">false</span>;    //记得消除！  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">return</span> ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    memset(mp,<span class=\"literal\">false</span>,sizeof(mp));  </span><br><span class=\"line\">    inPut();  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(scanf(<span class=\"string\">\"%d\"</span>,&amp;cas)&amp;&amp;cas)&#123;  </span><br><span class=\"line\">        sumWays=0;  </span><br><span class=\"line\">        memset(used,<span class=\"literal\">false</span>,sizeof(used));  </span><br><span class=\"line\">        //memset(way,0,sizeof(mp));  </span><br><span class=\"line\">        used[cas]=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">        dfs(cas,0); //深搜递归  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">return</span> 0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java文本带编码读入读出","date":"2016-11-25T02:23:32.000Z","_content":"\n\n很好用的java文件输入输出，不过内容比较简单，实际需要的时候还需要加上个性化设计。有空的时候可以更加模块化这个东西，主要是红来复制粘贴的...\n```Java\n public static void write(String path, String content)  \n            throws IOException {  \n        File file = new File(path);  \n        file.delete();  \n        file.createNewFile();  \n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(  \n                new FileOutputStream(file), \"UTF-8\"));  \n        writer.write(content);  \n        writer.close();  \n    }  \n  \n    public static String read(String path) throws IOException {  \n        String content = \"\";  \n        File file = new File(path);  \n        BufferedReader reader = new BufferedReader(new InputStreamReader(  \n                new FileInputStream(file), \"GBK\"));  \n        String line = null;  \n        while ((line = reader.readLine()) != null) {  \n            content += line + \"\\n\";  \n        }  \n        reader.close();  \n        content = content.replace(\"\\n\", \"\")\n        \t\t.replace(\"<&nbsp>\", \"\")\n        \t\t.replaceAll(\"<p>\", \"<p>&nbsp\");\n        //System.out.println(content);\n        return content;  \n    }\n```","source":"_posts/Java文本带编码读入读出.md","raw":"---\ntitle: Java文本带编码读入读出\ndate: 2016-11-25 10:23:32\ntags: \"Tools\"\n---\n\n\n很好用的java文件输入输出，不过内容比较简单，实际需要的时候还需要加上个性化设计。有空的时候可以更加模块化这个东西，主要是红来复制粘贴的...\n```Java\n public static void write(String path, String content)  \n            throws IOException {  \n        File file = new File(path);  \n        file.delete();  \n        file.createNewFile();  \n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(  \n                new FileOutputStream(file), \"UTF-8\"));  \n        writer.write(content);  \n        writer.close();  \n    }  \n  \n    public static String read(String path) throws IOException {  \n        String content = \"\";  \n        File file = new File(path);  \n        BufferedReader reader = new BufferedReader(new InputStreamReader(  \n                new FileInputStream(file), \"GBK\"));  \n        String line = null;  \n        while ((line = reader.readLine()) != null) {  \n            content += line + \"\\n\";  \n        }  \n        reader.close();  \n        content = content.replace(\"\\n\", \"\")\n        \t\t.replace(\"<&nbsp>\", \"\")\n        \t\t.replaceAll(\"<p>\", \"<p>&nbsp\");\n        //System.out.println(content);\n        return content;  \n    }\n```","slug":"Java文本带编码读入读出","published":1,"updated":"2018-01-09T02:40:16.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzuc0005yg3ii6xx6itj","content":"<p>很好用的java文件输入输出，不过内容比较简单，实际需要的时候还需要加上个性化设计。有空的时候可以更加模块化这个东西，主要是红来复制粘贴的…<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String path, String content)</span>  </span></span><br><span class=\"line\"><span class=\"function\">           <span class=\"keyword\">throws</span> IOException </span>&#123;  </span><br><span class=\"line\">       File file = <span class=\"keyword\">new</span> File(path);  </span><br><span class=\"line\">       file.delete();  </span><br><span class=\"line\">       file.createNewFile();  </span><br><span class=\"line\">       BufferedWriter writer = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(  </span><br><span class=\"line\">               <span class=\"keyword\">new</span> FileOutputStream(file), <span class=\"string\">\"UTF-8\"</span>));  </span><br><span class=\"line\">       writer.write(content);  </span><br><span class=\"line\">       writer.close();  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;  </span><br><span class=\"line\">       String content = <span class=\"string\">\"\"</span>;  </span><br><span class=\"line\">       File file = <span class=\"keyword\">new</span> File(path);  </span><br><span class=\"line\">       BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(  </span><br><span class=\"line\">               <span class=\"keyword\">new</span> FileInputStream(file), <span class=\"string\">\"GBK\"</span>));  </span><br><span class=\"line\">       String line = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">       <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">           content += line + <span class=\"string\">\"\\n\"</span>;  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       reader.close();  </span><br><span class=\"line\">       content = content.replace(<span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">       \t\t.replace(<span class=\"string\">\"&lt;&amp;nbsp&gt;\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">       \t\t.replaceAll(<span class=\"string\">\"&lt;p&gt;\"</span>, <span class=\"string\">\"&lt;p&gt;&amp;nbsp\"</span>);</span><br><span class=\"line\">       <span class=\"comment\">//System.out.println(content);</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> content;  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很好用的java文件输入输出，不过内容比较简单，实际需要的时候还需要加上个性化设计。有空的时候可以更加模块化这个东西，主要是红来复制粘贴的…<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String path, String content)</span>  </span></span><br><span class=\"line\"><span class=\"function\">           <span class=\"keyword\">throws</span> IOException </span>&#123;  </span><br><span class=\"line\">       File file = <span class=\"keyword\">new</span> File(path);  </span><br><span class=\"line\">       file.delete();  </span><br><span class=\"line\">       file.createNewFile();  </span><br><span class=\"line\">       BufferedWriter writer = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(  </span><br><span class=\"line\">               <span class=\"keyword\">new</span> FileOutputStream(file), <span class=\"string\">\"UTF-8\"</span>));  </span><br><span class=\"line\">       writer.write(content);  </span><br><span class=\"line\">       writer.close();  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;  </span><br><span class=\"line\">       String content = <span class=\"string\">\"\"</span>;  </span><br><span class=\"line\">       File file = <span class=\"keyword\">new</span> File(path);  </span><br><span class=\"line\">       BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(  </span><br><span class=\"line\">               <span class=\"keyword\">new</span> FileInputStream(file), <span class=\"string\">\"GBK\"</span>));  </span><br><span class=\"line\">       String line = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">       <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">           content += line + <span class=\"string\">\"\\n\"</span>;  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       reader.close();  </span><br><span class=\"line\">       content = content.replace(<span class=\"string\">\"\\n\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">       \t\t.replace(<span class=\"string\">\"&lt;&amp;nbsp&gt;\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">       \t\t.replaceAll(<span class=\"string\">\"&lt;p&gt;\"</span>, <span class=\"string\">\"&lt;p&gt;&amp;nbsp\"</span>);</span><br><span class=\"line\">       <span class=\"comment\">//System.out.println(content);</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> content;  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(转) KMP算法详解：简洁易懂的KMP算法","date":"2015-07-20T02:08:40.000Z","_content":"转自 http://www.matrix67.com/blog/archives/115\n\n（Matrix67原创）\n\n如果机房马上要关门了，或者你急着要和MM约会，请直接跳到第六个自然段。\n\n我们这里说的KMP不是拿来放电影的（虽然我很喜欢这个软件），而是一种算法。KMP算法是拿来处理字符串匹配的。换句话说，给你两个字符串，你需要回答，B串是否是A串的子串（A串是否包含B串）。比如，字符串A=\"I'm matrix67\"，字符串B=\"matrix\"，我们就说B是A的子串。你可以委婉地问你的MM：“假如你要向你喜欢的人表白的话，我的名字是你的告白语中的子串吗？”\n    \n解决这类问题，通常我们的方法是枚举从A串的什么位置起开始与B匹配，然后验证是否匹配。假如A串长度为n，B串长度为m，那么这种方法的复杂度是O (mn)的。虽然很多时候复杂度达不到mn（验证时只看头一两个字母就发现不匹配了），但我们有许多“最坏情况”，比如，A= \"aaaaaaaaaaaaaaaaaaaaaaaaaab\"，B=\"aaaaaaaab\"。我们将介绍的是一种最坏情况下O(n)的算法（这里假设 m<=n），即传说中的KMP算法。\n\n之所以叫做KMP，是因为这个算法是由Knuth、Morris、Pratt三个提出来的，取了这三个人的名字的头一个字母。这时，或许你突然明白了AVL 树为什么叫AVL，或者Bellman-Ford为什么中间是一杠不是一个点。有时一个东西有七八个人研究过，那怎么命名呢？通常这个东西干脆就不用人名字命名了，免得发生争议，比如“3x+1问题”。扯远了。\n\n个人认为KMP是最没有必要讲的东西，因为这个东西网上能找到很多资料。但网上的讲法基本上都涉及到“移动(shift)”、“Next函数”等概念，这非常容易产生误解（至少一年半前我看这些资料学习KMP时就没搞清楚）。在这里，我换一种方法来解释KMP算法。\n\n假如，A=\"abababaababacb\"，B=\"ababacb\"，我们来看看KMP是怎么工作的。我们用两个指针i和j分别表示，A[i-j+ 1..i]与B[1..j]完全相等。也就是说，i是不断增加的，随着i的增加j相应地变化，且j满足以A[i]结尾的长度为j的字符串正好匹配B串的前 j个字符（j当然越大越好），现在需要检验A[i+1]和B[j+1]的关系。当A[i+1]=B[j+1]时，i和j各加一；什么时候j=m了，我们就说B是A的子串（B串已经整完了），并且可以根据这时的i值算出匹配的位置。当A[i+1]<>B[j+1]，KMP的策略是调整j的位置（减小j值）使得A[i-j+1..i]与B[1..j]保持匹配且新的B[j+1]恰好与A[i+1]匹配（从而使得i和j能继续增加）。我们看一看当 i=j=5时的情况。\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B = a b a b a c b\n    j = 1 2 3 4 5 6 7\n```\n此时，A[6]<>B[6]。这表明，此时j不能等于5了，我们要把j改成比它小的值j'。j'可能是多少呢？仔细想一下，我们发现，j'必须要使得B[1..j]中的头j'个字母和末j'个字母完全相等（这样j变成了j'后才能继续保持i和j的性质）。这个j'当然要越大越好。在这里，B [1..5]=\"ababa\"，头3个字母和末3个字母都是\"aba\"。而当新的j为3时，A[6]恰好和B[4]相等。于是，i变成了6，而j则变成了 4：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =     a b a b a c b\n    j =     1 2 3 4 5 6 7\n```\n从上面的这个例子，我们可以看到，新的j可以取多少与i无关，只与B串有关。我们完全可以预处理出这样一个数组P[j]，表示当匹配到B数组的第j个字母而第j+1个字母不能匹配了时，新的j最大是多少。P[j]应该是所有满足B[1..P[j]]=B[j-P[j]+1..j]的最大值。\n再后来，A[7]=B[5]，i和j又各增加1。这时，又出现了A[i+1]<>B[j+1]的情况：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =     a b a b a c b\n    j =     1 2 3 4 5 6 7\n```\n由于P[5]=3，因此新的j=3：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =         a b a b a c b\n    j =         1 2 3 4 5 6 7\n```\n这时，新的j=3仍然不能满足A[i+1]=B[j+1]，此时我们再次减小j值，将j再次更新为P[3]：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =             a b a b a c b\n    j =             1 2 3 4 5 6 7\n```\n现在，i还是7，j已经变成1了。而此时A[8]居然仍然不等于B[j+1]。这样，j必须减小到P[1]，即0：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =               a b a b a c b\n    j =             0 1 2 3 4 5 6 7\n```\n终于，A[8]=B[1]，i变为8，j为1。事实上，有可能j到了0仍然不能满足A[i+1]=B[j+1]（比如A[8]=\"d\"时）。因此，准确的说法是，当j=0了时，我们增加i值但忽略j直到出现A[i]=B[1]为止。\n这个过程的代码很短（真的很短），我们在这里给出：\n```bash\nj:=0;\nfor i:=1 to n do\nbegin\n   while (j>0) and (B[j+1]<>A[i]) do j:=P[j];\n   if B[j+1]=A[i] then j:=j+1;\n   if j=m then\n   begin\n      writeln('Pattern occurs with shift ',i-m);\n      j:=P[j];\n   end;\nend;\n```\n最后的j:=P[j]是为了让程序继续做下去，因为我们有可能找到多处匹配。\n\n这个程序或许比想像中的要简单，因为对于i值的不断增加，代码用的是for循环\n。因此，这个代码可以这样形象地理解：扫描字符串A，并更新可以匹配到B的什么位置。\n\n\n现在，我们还遗留了两个重要的问题：一，为什么这个程序是线性的；二，如何快速预处理P数组。\n\n为什么这个程序是O(n)的？其实，主要的争议在于，while循环使得执行次数出现了不确定因素。我们将用到时间复杂度的摊还分析中的主要策略，简单地说就是通过观察某一个变量或函数值的变化来对零散的、杂乱的、不规则的执行次数进行累计。KMP的时间复杂度分析可谓摊还分析的典型。我们从上述程序的j 值入手。每一次执行while循环都会使j减小（但不能减成负的），而另外的改变j值的地方只有第五行。每次执行了这一行，j都只能加1；因此，整个过程中j最多加了n个1。于是，j最多只有n次减小的机会（j值减小的次数当然不能超过n，因为j永远是非负整数）。这告诉我们，while循环总共最多执行了n次。按照摊还分析的说法，平摊到每次for循环中后，一次for循环的复杂度为O(1)。整个过程显然是O(n)的。这样的分析对于后面P数组预处理的过程同样有效，同样可以得到预处理过程的复杂度为O(m)。\n\n预处理不需要按照P的定义写成O(m<sup>2</sup>) 甚至 O(m<sup>3</sup>)的。我们可以通过P[1],P[2],…,P[j-1]的值来获得P[j]的值。对于刚才的B=\"ababacb\"，假如我们已经求出了P[1],P[2],P[3]和P[4]，看看我们应该怎么求出P[5]和P[6]。P[4]=2，那么P [5]显然等于P[4]+1，因为由P[4]可以知道，B[1,2]已经和B[3,4]相等了，现在又有B[3]=B[5]，所以P[5]可以由P[4] 后面加一个字符得到。P[6]也等于P[5]+1吗？显然不是，因为B[ P[5]+1 ]<>B[6]。那么，我们要考虑“退一步”了。我们考虑P[6]是否有可能由P[5]的情况所包含的子串得到，即是否P[6]=P[ P[5] ]+1。这里想不通的话可以仔细看一下：\n```bash\n        1 2 3 4 5 6 7\n    B = a b a b a c b\n    P = 0 0 1 2 3 ?\n```\n\nP[5]=3是因为B[1..3]和B[3..5]都是\"aba\"；而P[3]=1则告诉我们，B[1]、B[3]和B[5]都是\"a\"。既然P[6]不能由P[5]得到，或许可以由P[3]得到（如果B[2]恰好和B[6]相等的话，P[6]就等于P[3]+1了）。显然，P[6]也不能通过P[3]得到，因为B[2]<>B[6]。事实上，这样一直推到P[1]也不行，最后，我们得到，P[6]=0。\n\n怎么这个预处理过程跟前面的KMP主程序这么像呢？其实，KMP的预处理本身就是一个B串“自我匹配”的过程。它的代码和上面的代码神似：\n```bash\nP[1]:=0;\nj:=0;\nfor i:=2 to m do\nbegin\n   while (j>0) and (B[j+1]<>B[i]) do j:=P[j];\n   if B[j+1]=B[i] then j:=j+1;\n   P[i]:=j;\nend;\n```\n最后补充一点：由于KMP算法只预处理B串，因此这种算法很适合这样的问题：给定一个B串和一群不同的A串，问B是哪些A串的子串。\n\n串匹配是一个很有研究价值的问题。事实上，我们还有后缀树，自动机等很多方法，这些算法都巧妙地运用了预处理，从而可以在线性的时间里解决字符串的匹配。我们以后来说。\n\n昨天发现一个特别晕的事，知道怎么去掉BitComet的广告吗？把界面语言设成英文就行了。\n还有，金山词霸和Dr.eye都可以去自杀了，Babylon素王道。\n\nMatrix67原创\n转贴请注明出处","source":"_posts/[转载]KMP算法详解：简洁易懂的KMP算法.md","raw":"---\ntitle: (转) KMP算法详解：简洁易懂的KMP算法\ndate: 2015-07-20 10:08:40\ntags: \"ACM&OJ\"\n---\n转自 http://www.matrix67.com/blog/archives/115\n\n（Matrix67原创）\n\n如果机房马上要关门了，或者你急着要和MM约会，请直接跳到第六个自然段。\n\n我们这里说的KMP不是拿来放电影的（虽然我很喜欢这个软件），而是一种算法。KMP算法是拿来处理字符串匹配的。换句话说，给你两个字符串，你需要回答，B串是否是A串的子串（A串是否包含B串）。比如，字符串A=\"I'm matrix67\"，字符串B=\"matrix\"，我们就说B是A的子串。你可以委婉地问你的MM：“假如你要向你喜欢的人表白的话，我的名字是你的告白语中的子串吗？”\n    \n解决这类问题，通常我们的方法是枚举从A串的什么位置起开始与B匹配，然后验证是否匹配。假如A串长度为n，B串长度为m，那么这种方法的复杂度是O (mn)的。虽然很多时候复杂度达不到mn（验证时只看头一两个字母就发现不匹配了），但我们有许多“最坏情况”，比如，A= \"aaaaaaaaaaaaaaaaaaaaaaaaaab\"，B=\"aaaaaaaab\"。我们将介绍的是一种最坏情况下O(n)的算法（这里假设 m<=n），即传说中的KMP算法。\n\n之所以叫做KMP，是因为这个算法是由Knuth、Morris、Pratt三个提出来的，取了这三个人的名字的头一个字母。这时，或许你突然明白了AVL 树为什么叫AVL，或者Bellman-Ford为什么中间是一杠不是一个点。有时一个东西有七八个人研究过，那怎么命名呢？通常这个东西干脆就不用人名字命名了，免得发生争议，比如“3x+1问题”。扯远了。\n\n个人认为KMP是最没有必要讲的东西，因为这个东西网上能找到很多资料。但网上的讲法基本上都涉及到“移动(shift)”、“Next函数”等概念，这非常容易产生误解（至少一年半前我看这些资料学习KMP时就没搞清楚）。在这里，我换一种方法来解释KMP算法。\n\n假如，A=\"abababaababacb\"，B=\"ababacb\"，我们来看看KMP是怎么工作的。我们用两个指针i和j分别表示，A[i-j+ 1..i]与B[1..j]完全相等。也就是说，i是不断增加的，随着i的增加j相应地变化，且j满足以A[i]结尾的长度为j的字符串正好匹配B串的前 j个字符（j当然越大越好），现在需要检验A[i+1]和B[j+1]的关系。当A[i+1]=B[j+1]时，i和j各加一；什么时候j=m了，我们就说B是A的子串（B串已经整完了），并且可以根据这时的i值算出匹配的位置。当A[i+1]<>B[j+1]，KMP的策略是调整j的位置（减小j值）使得A[i-j+1..i]与B[1..j]保持匹配且新的B[j+1]恰好与A[i+1]匹配（从而使得i和j能继续增加）。我们看一看当 i=j=5时的情况。\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B = a b a b a c b\n    j = 1 2 3 4 5 6 7\n```\n此时，A[6]<>B[6]。这表明，此时j不能等于5了，我们要把j改成比它小的值j'。j'可能是多少呢？仔细想一下，我们发现，j'必须要使得B[1..j]中的头j'个字母和末j'个字母完全相等（这样j变成了j'后才能继续保持i和j的性质）。这个j'当然要越大越好。在这里，B [1..5]=\"ababa\"，头3个字母和末3个字母都是\"aba\"。而当新的j为3时，A[6]恰好和B[4]相等。于是，i变成了6，而j则变成了 4：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =     a b a b a c b\n    j =     1 2 3 4 5 6 7\n```\n从上面的这个例子，我们可以看到，新的j可以取多少与i无关，只与B串有关。我们完全可以预处理出这样一个数组P[j]，表示当匹配到B数组的第j个字母而第j+1个字母不能匹配了时，新的j最大是多少。P[j]应该是所有满足B[1..P[j]]=B[j-P[j]+1..j]的最大值。\n再后来，A[7]=B[5]，i和j又各增加1。这时，又出现了A[i+1]<>B[j+1]的情况：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =     a b a b a c b\n    j =     1 2 3 4 5 6 7\n```\n由于P[5]=3，因此新的j=3：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =         a b a b a c b\n    j =         1 2 3 4 5 6 7\n```\n这时，新的j=3仍然不能满足A[i+1]=B[j+1]，此时我们再次减小j值，将j再次更新为P[3]：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =             a b a b a c b\n    j =             1 2 3 4 5 6 7\n```\n现在，i还是7，j已经变成1了。而此时A[8]居然仍然不等于B[j+1]。这样，j必须减小到P[1]，即0：\n```bash\n    i = 1 2 3 4 5 6 7 8 9 ……\n    A = a b a b a b a a b a b …\n    B =               a b a b a c b\n    j =             0 1 2 3 4 5 6 7\n```\n终于，A[8]=B[1]，i变为8，j为1。事实上，有可能j到了0仍然不能满足A[i+1]=B[j+1]（比如A[8]=\"d\"时）。因此，准确的说法是，当j=0了时，我们增加i值但忽略j直到出现A[i]=B[1]为止。\n这个过程的代码很短（真的很短），我们在这里给出：\n```bash\nj:=0;\nfor i:=1 to n do\nbegin\n   while (j>0) and (B[j+1]<>A[i]) do j:=P[j];\n   if B[j+1]=A[i] then j:=j+1;\n   if j=m then\n   begin\n      writeln('Pattern occurs with shift ',i-m);\n      j:=P[j];\n   end;\nend;\n```\n最后的j:=P[j]是为了让程序继续做下去，因为我们有可能找到多处匹配。\n\n这个程序或许比想像中的要简单，因为对于i值的不断增加，代码用的是for循环\n。因此，这个代码可以这样形象地理解：扫描字符串A，并更新可以匹配到B的什么位置。\n\n\n现在，我们还遗留了两个重要的问题：一，为什么这个程序是线性的；二，如何快速预处理P数组。\n\n为什么这个程序是O(n)的？其实，主要的争议在于，while循环使得执行次数出现了不确定因素。我们将用到时间复杂度的摊还分析中的主要策略，简单地说就是通过观察某一个变量或函数值的变化来对零散的、杂乱的、不规则的执行次数进行累计。KMP的时间复杂度分析可谓摊还分析的典型。我们从上述程序的j 值入手。每一次执行while循环都会使j减小（但不能减成负的），而另外的改变j值的地方只有第五行。每次执行了这一行，j都只能加1；因此，整个过程中j最多加了n个1。于是，j最多只有n次减小的机会（j值减小的次数当然不能超过n，因为j永远是非负整数）。这告诉我们，while循环总共最多执行了n次。按照摊还分析的说法，平摊到每次for循环中后，一次for循环的复杂度为O(1)。整个过程显然是O(n)的。这样的分析对于后面P数组预处理的过程同样有效，同样可以得到预处理过程的复杂度为O(m)。\n\n预处理不需要按照P的定义写成O(m<sup>2</sup>) 甚至 O(m<sup>3</sup>)的。我们可以通过P[1],P[2],…,P[j-1]的值来获得P[j]的值。对于刚才的B=\"ababacb\"，假如我们已经求出了P[1],P[2],P[3]和P[4]，看看我们应该怎么求出P[5]和P[6]。P[4]=2，那么P [5]显然等于P[4]+1，因为由P[4]可以知道，B[1,2]已经和B[3,4]相等了，现在又有B[3]=B[5]，所以P[5]可以由P[4] 后面加一个字符得到。P[6]也等于P[5]+1吗？显然不是，因为B[ P[5]+1 ]<>B[6]。那么，我们要考虑“退一步”了。我们考虑P[6]是否有可能由P[5]的情况所包含的子串得到，即是否P[6]=P[ P[5] ]+1。这里想不通的话可以仔细看一下：\n```bash\n        1 2 3 4 5 6 7\n    B = a b a b a c b\n    P = 0 0 1 2 3 ?\n```\n\nP[5]=3是因为B[1..3]和B[3..5]都是\"aba\"；而P[3]=1则告诉我们，B[1]、B[3]和B[5]都是\"a\"。既然P[6]不能由P[5]得到，或许可以由P[3]得到（如果B[2]恰好和B[6]相等的话，P[6]就等于P[3]+1了）。显然，P[6]也不能通过P[3]得到，因为B[2]<>B[6]。事实上，这样一直推到P[1]也不行，最后，我们得到，P[6]=0。\n\n怎么这个预处理过程跟前面的KMP主程序这么像呢？其实，KMP的预处理本身就是一个B串“自我匹配”的过程。它的代码和上面的代码神似：\n```bash\nP[1]:=0;\nj:=0;\nfor i:=2 to m do\nbegin\n   while (j>0) and (B[j+1]<>B[i]) do j:=P[j];\n   if B[j+1]=B[i] then j:=j+1;\n   P[i]:=j;\nend;\n```\n最后补充一点：由于KMP算法只预处理B串，因此这种算法很适合这样的问题：给定一个B串和一群不同的A串，问B是哪些A串的子串。\n\n串匹配是一个很有研究价值的问题。事实上，我们还有后缀树，自动机等很多方法，这些算法都巧妙地运用了预处理，从而可以在线性的时间里解决字符串的匹配。我们以后来说。\n\n昨天发现一个特别晕的事，知道怎么去掉BitComet的广告吗？把界面语言设成英文就行了。\n还有，金山词霸和Dr.eye都可以去自杀了，Babylon素王道。\n\nMatrix67原创\n转贴请注明出处","slug":"[转载]KMP算法详解：简洁易懂的KMP算法","published":1,"updated":"2018-01-08T02:29:20.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzud0006yg3i4r10593p","content":"<p>转自 <a href=\"http://www.matrix67.com/blog/archives/115\" target=\"_blank\" rel=\"noopener\">http://www.matrix67.com/blog/archives/115</a></p>\n<p>（Matrix67原创）</p>\n<p>如果机房马上要关门了，或者你急着要和MM约会，请直接跳到第六个自然段。</p>\n<p>我们这里说的KMP不是拿来放电影的（虽然我很喜欢这个软件），而是一种算法。KMP算法是拿来处理字符串匹配的。换句话说，给你两个字符串，你需要回答，B串是否是A串的子串（A串是否包含B串）。比如，字符串A=”I’m matrix67”，字符串B=”matrix”，我们就说B是A的子串。你可以委婉地问你的MM：“假如你要向你喜欢的人表白的话，我的名字是你的告白语中的子串吗？”</p>\n<p>解决这类问题，通常我们的方法是枚举从A串的什么位置起开始与B匹配，然后验证是否匹配。假如A串长度为n，B串长度为m，那么这种方法的复杂度是O (mn)的。虽然很多时候复杂度达不到mn（验证时只看头一两个字母就发现不匹配了），但我们有许多“最坏情况”，比如，A= “aaaaaaaaaaaaaaaaaaaaaaaaaab”，B=”aaaaaaaab”。我们将介绍的是一种最坏情况下O(n)的算法（这里假设 m&lt;=n），即传说中的KMP算法。</p>\n<p>之所以叫做KMP，是因为这个算法是由Knuth、Morris、Pratt三个提出来的，取了这三个人的名字的头一个字母。这时，或许你突然明白了AVL 树为什么叫AVL，或者Bellman-Ford为什么中间是一杠不是一个点。有时一个东西有七八个人研究过，那怎么命名呢？通常这个东西干脆就不用人名字命名了，免得发生争议，比如“3x+1问题”。扯远了。</p>\n<p>个人认为KMP是最没有必要讲的东西，因为这个东西网上能找到很多资料。但网上的讲法基本上都涉及到“移动(shift)”、“Next函数”等概念，这非常容易产生误解（至少一年半前我看这些资料学习KMP时就没搞清楚）。在这里，我换一种方法来解释KMP算法。</p>\n<p>假如，A=”abababaababacb”，B=”ababacb”，我们来看看KMP是怎么工作的。我们用两个指针i和j分别表示，A[i-j+ 1..i]与B[1..j]完全相等。也就是说，i是不断增加的，随着i的增加j相应地变化，且j满足以A[i]结尾的长度为j的字符串正好匹配B串的前 j个字符（j当然越大越好），现在需要检验A[i+1]和B[j+1]的关系。当A[i+1]=B[j+1]时，i和j各加一；什么时候j=m了，我们就说B是A的子串（B串已经整完了），并且可以根据这时的i值算出匹配的位置。当A[i+1]&lt;&gt;B[j+1]，KMP的策略是调整j的位置（减小j值）使得A[i-j+1..i]与B[1..j]保持匹配且新的B[j+1]恰好与A[i+1]匹配（从而使得i和j能继续增加）。我们看一看当 i=j=5时的情况。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B = a b a b a c b</span><br><span class=\"line\">j = 1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>此时，A[6]&lt;&gt;B[6]。这表明，此时j不能等于5了，我们要把j改成比它小的值j’。j’可能是多少呢？仔细想一下，我们发现，j’必须要使得B[1..j]中的头j’个字母和末j’个字母完全相等（这样j变成了j’后才能继续保持i和j的性质）。这个j’当然要越大越好。在这里，B [1..5]=”ababa”，头3个字母和末3个字母都是”aba”。而当新的j为3时，A[6]恰好和B[4]相等。于是，i变成了6，而j则变成了 4：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =     a b a b a c b</span><br><span class=\"line\">j =     1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>从上面的这个例子，我们可以看到，新的j可以取多少与i无关，只与B串有关。我们完全可以预处理出这样一个数组P[j]，表示当匹配到B数组的第j个字母而第j+1个字母不能匹配了时，新的j最大是多少。P[j]应该是所有满足B[1..P[j]]=B[j-P[j]+1..j]的最大值。<br>再后来，A[7]=B[5]，i和j又各增加1。这时，又出现了A[i+1]&lt;&gt;B[j+1]的情况：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =     a b a b a c b</span><br><span class=\"line\">j =     1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>由于P[5]=3，因此新的j=3：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =         a b a b a c b</span><br><span class=\"line\">j =         1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>这时，新的j=3仍然不能满足A[i+1]=B[j+1]，此时我们再次减小j值，将j再次更新为P[3]：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =             a b a b a c b</span><br><span class=\"line\">j =             1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>现在，i还是7，j已经变成1了。而此时A[8]居然仍然不等于B[j+1]。这样，j必须减小到P[1]，即0：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =               a b a b a c b</span><br><span class=\"line\">j =             0 1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>终于，A[8]=B[1]，i变为8，j为1。事实上，有可能j到了0仍然不能满足A[i+1]=B[j+1]（比如A[8]=”d”时）。因此，准确的说法是，当j=0了时，我们增加i值但忽略j直到出现A[i]=B[1]为止。<br>这个过程的代码很短（真的很短），我们在这里给出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">j:=0;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=1 to n <span class=\"keyword\">do</span></span><br><span class=\"line\">begin</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (j&gt;0) and (B[j+1]&lt;&gt;A[i]) <span class=\"keyword\">do</span> j:=P[j];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> B[j+1]=A[i] <span class=\"keyword\">then</span> j:=j+1;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> j=m <span class=\"keyword\">then</span></span><br><span class=\"line\">   begin</span><br><span class=\"line\">      writeln(<span class=\"string\">'Pattern occurs with shift '</span>,i-m);</span><br><span class=\"line\">      j:=P[j];</span><br><span class=\"line\">   end;</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure></p>\n<p>最后的j:=P[j]是为了让程序继续做下去，因为我们有可能找到多处匹配。</p>\n<p>这个程序或许比想像中的要简单，因为对于i值的不断增加，代码用的是for循环<br>。因此，这个代码可以这样形象地理解：扫描字符串A，并更新可以匹配到B的什么位置。</p>\n<p>现在，我们还遗留了两个重要的问题：一，为什么这个程序是线性的；二，如何快速预处理P数组。</p>\n<p>为什么这个程序是O(n)的？其实，主要的争议在于，while循环使得执行次数出现了不确定因素。我们将用到时间复杂度的摊还分析中的主要策略，简单地说就是通过观察某一个变量或函数值的变化来对零散的、杂乱的、不规则的执行次数进行累计。KMP的时间复杂度分析可谓摊还分析的典型。我们从上述程序的j 值入手。每一次执行while循环都会使j减小（但不能减成负的），而另外的改变j值的地方只有第五行。每次执行了这一行，j都只能加1；因此，整个过程中j最多加了n个1。于是，j最多只有n次减小的机会（j值减小的次数当然不能超过n，因为j永远是非负整数）。这告诉我们，while循环总共最多执行了n次。按照摊还分析的说法，平摊到每次for循环中后，一次for循环的复杂度为O(1)。整个过程显然是O(n)的。这样的分析对于后面P数组预处理的过程同样有效，同样可以得到预处理过程的复杂度为O(m)。</p>\n<p>预处理不需要按照P的定义写成O(m<sup>2</sup>) 甚至 O(m<sup>3</sup>)的。我们可以通过P[1],P[2],…,P[j-1]的值来获得P[j]的值。对于刚才的B=”ababacb”，假如我们已经求出了P[1],P[2],P[3]和P[4]，看看我们应该怎么求出P[5]和P[6]。P[4]=2，那么P [5]显然等于P[4]+1，因为由P[4]可以知道，B[1,2]已经和B[3,4]相等了，现在又有B[3]=B[5]，所以P[5]可以由P[4] 后面加一个字符得到。P[6]也等于P[5]+1吗？显然不是，因为B[ P[5]+1 ]&lt;&gt;B[6]。那么，我们要考虑“退一步”了。我们考虑P[6]是否有可能由P[5]的情况所包含的子串得到，即是否P[6]=P[ P[5] ]+1。这里想不通的话可以仔细看一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1 2 3 4 5 6 7</span><br><span class=\"line\">B = a b a b a c b</span><br><span class=\"line\">P = 0 0 1 2 3 ?</span><br></pre></td></tr></table></figure></p>\n<p>P[5]=3是因为B[1..3]和B[3..5]都是”aba”；而P[3]=1则告诉我们，B[1]、B[3]和B[5]都是”a”。既然P[6]不能由P[5]得到，或许可以由P[3]得到（如果B[2]恰好和B[6]相等的话，P[6]就等于P[3]+1了）。显然，P[6]也不能通过P[3]得到，因为B[2]&lt;&gt;B[6]。事实上，这样一直推到P[1]也不行，最后，我们得到，P[6]=0。</p>\n<p>怎么这个预处理过程跟前面的KMP主程序这么像呢？其实，KMP的预处理本身就是一个B串“自我匹配”的过程。它的代码和上面的代码神似：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P[1]:=0;</span><br><span class=\"line\">j:=0;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=2 to m <span class=\"keyword\">do</span></span><br><span class=\"line\">begin</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (j&gt;0) and (B[j+1]&lt;&gt;B[i]) <span class=\"keyword\">do</span> j:=P[j];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> B[j+1]=B[i] <span class=\"keyword\">then</span> j:=j+1;</span><br><span class=\"line\">   P[i]:=j;</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure></p>\n<p>最后补充一点：由于KMP算法只预处理B串，因此这种算法很适合这样的问题：给定一个B串和一群不同的A串，问B是哪些A串的子串。</p>\n<p>串匹配是一个很有研究价值的问题。事实上，我们还有后缀树，自动机等很多方法，这些算法都巧妙地运用了预处理，从而可以在线性的时间里解决字符串的匹配。我们以后来说。</p>\n<p>昨天发现一个特别晕的事，知道怎么去掉BitComet的广告吗？把界面语言设成英文就行了。<br>还有，金山词霸和Dr.eye都可以去自杀了，Babylon素王道。</p>\n<p>Matrix67原创<br>转贴请注明出处</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转自 <a href=\"http://www.matrix67.com/blog/archives/115\" target=\"_blank\" rel=\"noopener\">http://www.matrix67.com/blog/archives/115</a></p>\n<p>（Matrix67原创）</p>\n<p>如果机房马上要关门了，或者你急着要和MM约会，请直接跳到第六个自然段。</p>\n<p>我们这里说的KMP不是拿来放电影的（虽然我很喜欢这个软件），而是一种算法。KMP算法是拿来处理字符串匹配的。换句话说，给你两个字符串，你需要回答，B串是否是A串的子串（A串是否包含B串）。比如，字符串A=”I’m matrix67”，字符串B=”matrix”，我们就说B是A的子串。你可以委婉地问你的MM：“假如你要向你喜欢的人表白的话，我的名字是你的告白语中的子串吗？”</p>\n<p>解决这类问题，通常我们的方法是枚举从A串的什么位置起开始与B匹配，然后验证是否匹配。假如A串长度为n，B串长度为m，那么这种方法的复杂度是O (mn)的。虽然很多时候复杂度达不到mn（验证时只看头一两个字母就发现不匹配了），但我们有许多“最坏情况”，比如，A= “aaaaaaaaaaaaaaaaaaaaaaaaaab”，B=”aaaaaaaab”。我们将介绍的是一种最坏情况下O(n)的算法（这里假设 m&lt;=n），即传说中的KMP算法。</p>\n<p>之所以叫做KMP，是因为这个算法是由Knuth、Morris、Pratt三个提出来的，取了这三个人的名字的头一个字母。这时，或许你突然明白了AVL 树为什么叫AVL，或者Bellman-Ford为什么中间是一杠不是一个点。有时一个东西有七八个人研究过，那怎么命名呢？通常这个东西干脆就不用人名字命名了，免得发生争议，比如“3x+1问题”。扯远了。</p>\n<p>个人认为KMP是最没有必要讲的东西，因为这个东西网上能找到很多资料。但网上的讲法基本上都涉及到“移动(shift)”、“Next函数”等概念，这非常容易产生误解（至少一年半前我看这些资料学习KMP时就没搞清楚）。在这里，我换一种方法来解释KMP算法。</p>\n<p>假如，A=”abababaababacb”，B=”ababacb”，我们来看看KMP是怎么工作的。我们用两个指针i和j分别表示，A[i-j+ 1..i]与B[1..j]完全相等。也就是说，i是不断增加的，随着i的增加j相应地变化，且j满足以A[i]结尾的长度为j的字符串正好匹配B串的前 j个字符（j当然越大越好），现在需要检验A[i+1]和B[j+1]的关系。当A[i+1]=B[j+1]时，i和j各加一；什么时候j=m了，我们就说B是A的子串（B串已经整完了），并且可以根据这时的i值算出匹配的位置。当A[i+1]&lt;&gt;B[j+1]，KMP的策略是调整j的位置（减小j值）使得A[i-j+1..i]与B[1..j]保持匹配且新的B[j+1]恰好与A[i+1]匹配（从而使得i和j能继续增加）。我们看一看当 i=j=5时的情况。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B = a b a b a c b</span><br><span class=\"line\">j = 1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>此时，A[6]&lt;&gt;B[6]。这表明，此时j不能等于5了，我们要把j改成比它小的值j’。j’可能是多少呢？仔细想一下，我们发现，j’必须要使得B[1..j]中的头j’个字母和末j’个字母完全相等（这样j变成了j’后才能继续保持i和j的性质）。这个j’当然要越大越好。在这里，B [1..5]=”ababa”，头3个字母和末3个字母都是”aba”。而当新的j为3时，A[6]恰好和B[4]相等。于是，i变成了6，而j则变成了 4：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =     a b a b a c b</span><br><span class=\"line\">j =     1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>从上面的这个例子，我们可以看到，新的j可以取多少与i无关，只与B串有关。我们完全可以预处理出这样一个数组P[j]，表示当匹配到B数组的第j个字母而第j+1个字母不能匹配了时，新的j最大是多少。P[j]应该是所有满足B[1..P[j]]=B[j-P[j]+1..j]的最大值。<br>再后来，A[7]=B[5]，i和j又各增加1。这时，又出现了A[i+1]&lt;&gt;B[j+1]的情况：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =     a b a b a c b</span><br><span class=\"line\">j =     1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>由于P[5]=3，因此新的j=3：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =         a b a b a c b</span><br><span class=\"line\">j =         1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>这时，新的j=3仍然不能满足A[i+1]=B[j+1]，此时我们再次减小j值，将j再次更新为P[3]：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =             a b a b a c b</span><br><span class=\"line\">j =             1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>现在，i还是7，j已经变成1了。而此时A[8]居然仍然不等于B[j+1]。这样，j必须减小到P[1]，即0：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = 1 2 3 4 5 6 7 8 9 ……</span><br><span class=\"line\">A = a b a b a b a a b a b …</span><br><span class=\"line\">B =               a b a b a c b</span><br><span class=\"line\">j =             0 1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure></p>\n<p>终于，A[8]=B[1]，i变为8，j为1。事实上，有可能j到了0仍然不能满足A[i+1]=B[j+1]（比如A[8]=”d”时）。因此，准确的说法是，当j=0了时，我们增加i值但忽略j直到出现A[i]=B[1]为止。<br>这个过程的代码很短（真的很短），我们在这里给出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">j:=0;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=1 to n <span class=\"keyword\">do</span></span><br><span class=\"line\">begin</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (j&gt;0) and (B[j+1]&lt;&gt;A[i]) <span class=\"keyword\">do</span> j:=P[j];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> B[j+1]=A[i] <span class=\"keyword\">then</span> j:=j+1;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> j=m <span class=\"keyword\">then</span></span><br><span class=\"line\">   begin</span><br><span class=\"line\">      writeln(<span class=\"string\">'Pattern occurs with shift '</span>,i-m);</span><br><span class=\"line\">      j:=P[j];</span><br><span class=\"line\">   end;</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure></p>\n<p>最后的j:=P[j]是为了让程序继续做下去，因为我们有可能找到多处匹配。</p>\n<p>这个程序或许比想像中的要简单，因为对于i值的不断增加，代码用的是for循环<br>。因此，这个代码可以这样形象地理解：扫描字符串A，并更新可以匹配到B的什么位置。</p>\n<p>现在，我们还遗留了两个重要的问题：一，为什么这个程序是线性的；二，如何快速预处理P数组。</p>\n<p>为什么这个程序是O(n)的？其实，主要的争议在于，while循环使得执行次数出现了不确定因素。我们将用到时间复杂度的摊还分析中的主要策略，简单地说就是通过观察某一个变量或函数值的变化来对零散的、杂乱的、不规则的执行次数进行累计。KMP的时间复杂度分析可谓摊还分析的典型。我们从上述程序的j 值入手。每一次执行while循环都会使j减小（但不能减成负的），而另外的改变j值的地方只有第五行。每次执行了这一行，j都只能加1；因此，整个过程中j最多加了n个1。于是，j最多只有n次减小的机会（j值减小的次数当然不能超过n，因为j永远是非负整数）。这告诉我们，while循环总共最多执行了n次。按照摊还分析的说法，平摊到每次for循环中后，一次for循环的复杂度为O(1)。整个过程显然是O(n)的。这样的分析对于后面P数组预处理的过程同样有效，同样可以得到预处理过程的复杂度为O(m)。</p>\n<p>预处理不需要按照P的定义写成O(m<sup>2</sup>) 甚至 O(m<sup>3</sup>)的。我们可以通过P[1],P[2],…,P[j-1]的值来获得P[j]的值。对于刚才的B=”ababacb”，假如我们已经求出了P[1],P[2],P[3]和P[4]，看看我们应该怎么求出P[5]和P[6]。P[4]=2，那么P [5]显然等于P[4]+1，因为由P[4]可以知道，B[1,2]已经和B[3,4]相等了，现在又有B[3]=B[5]，所以P[5]可以由P[4] 后面加一个字符得到。P[6]也等于P[5]+1吗？显然不是，因为B[ P[5]+1 ]&lt;&gt;B[6]。那么，我们要考虑“退一步”了。我们考虑P[6]是否有可能由P[5]的情况所包含的子串得到，即是否P[6]=P[ P[5] ]+1。这里想不通的话可以仔细看一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1 2 3 4 5 6 7</span><br><span class=\"line\">B = a b a b a c b</span><br><span class=\"line\">P = 0 0 1 2 3 ?</span><br></pre></td></tr></table></figure></p>\n<p>P[5]=3是因为B[1..3]和B[3..5]都是”aba”；而P[3]=1则告诉我们，B[1]、B[3]和B[5]都是”a”。既然P[6]不能由P[5]得到，或许可以由P[3]得到（如果B[2]恰好和B[6]相等的话，P[6]就等于P[3]+1了）。显然，P[6]也不能通过P[3]得到，因为B[2]&lt;&gt;B[6]。事实上，这样一直推到P[1]也不行，最后，我们得到，P[6]=0。</p>\n<p>怎么这个预处理过程跟前面的KMP主程序这么像呢？其实，KMP的预处理本身就是一个B串“自我匹配”的过程。它的代码和上面的代码神似：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P[1]:=0;</span><br><span class=\"line\">j:=0;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=2 to m <span class=\"keyword\">do</span></span><br><span class=\"line\">begin</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (j&gt;0) and (B[j+1]&lt;&gt;B[i]) <span class=\"keyword\">do</span> j:=P[j];</span><br><span class=\"line\">   <span class=\"keyword\">if</span> B[j+1]=B[i] <span class=\"keyword\">then</span> j:=j+1;</span><br><span class=\"line\">   P[i]:=j;</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure></p>\n<p>最后补充一点：由于KMP算法只预处理B串，因此这种算法很适合这样的问题：给定一个B串和一群不同的A串，问B是哪些A串的子串。</p>\n<p>串匹配是一个很有研究价值的问题。事实上，我们还有后缀树，自动机等很多方法，这些算法都巧妙地运用了预处理，从而可以在线性的时间里解决字符串的匹配。我们以后来说。</p>\n<p>昨天发现一个特别晕的事，知道怎么去掉BitComet的广告吗？把界面语言设成英文就行了。<br>还有，金山词霸和Dr.eye都可以去自杀了，Babylon素王道。</p>\n<p>Matrix67原创<br>转贴请注明出处</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-01-08T02:11:11.907Z","updated":"2018-01-08T02:11:11.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzuf0009yg3ia9mj4xi9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"两道基础线段树简解:HDU 1166，HDU 1754","date":"2015-07-22T12:06:14.000Z","_content":"\n今天刚学了下线段树，感觉如果想快速攻入熟练的程度还是需要时间的，不过看了几题之后发现这些还是有规律的，或许是我们所说的模板吧。但是还是很多难题不能解出来的。还有就是，我感觉上来，树的算法还是比较依靠空间的（不知是不是我做的优化还不够）。写下两道简单的题目，供自己记忆和理解，有兴趣的朋友也可以看看，帮忙斧正斧正。\n\n接下来的两道题我也想了很久，看了许多朋友写的代码，好不容易才磨出来。我还要加油了！\nDHU 1166 敌兵布阵\n\n敌兵布阵\nTime Limit:1000MS     Memory Limit:32768KB     64bit IO Format:%I64d & %I64u\nSubmitStatus\n\nDescription\n C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。 \n中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:\"你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：\"我知错了。。。\"但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. \n\nInput\n第一行一个整数T，表示有T组数据。 \n每组数据第一行一个正整数N（N<=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1<=ai<=50）。 \n接下来每行有一条命令，命令有4种形式： \n(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30） \n(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）; \n(3)Query i j ,i和j为正整数,i<=j，表示询问第i到第j个营地的总人数; \n(4)End 表示结束，这条命令在每组数据最后出现; \n每组数据最多有40000条命令 \nOutput\n\n\n\n\n对第i组数据,首先输出“Case i:”和回车, \n对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 \n\n\nSample Input\n\n\n1\n10\n1 2 3 4 5 6 7 8 9 10\nQuery 1 3\nAdd 3 6\nQuery 2 7\nSub 10 2\nAdd 6 3\nQuery 3 10\nEnd \n   \n\n\n\n\nSample Output\n\n\n\n\nCase 1:\n6\n33\n59 \n\n```C\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#define MAXN 50000+5  \nusing namespace std;  \n  \nint sumOfPeople[MAXN];  \nlong long Qsum;  \n  \nstruct Tree{  \n    int l;  \n    int r;  \n    int sum;  \n}node[4*MAXN];              //线段树记得开到原来MAXN的4倍,其实消耗好像并没有这么大。  \n  \nvoid build(int x,int y,int i){  //建树，线段树很多思想都用到二分的方法  \n    node[i].l=x;  \n    node[i].r=y;  \n    if(x==y) node[i].sum=sumOfPeople[y];//当y==x时，到达最底下node,有的朋友习惯在这里用scanf读入数据。  \n    else{  \n        build(x,(x+y)/2,i<<1);           //x+y/2为左边子树的右端点，(x+y)/2+1为右端树左端点  \n        build((x+y)/2+1,y,i<<1|1);       //node下标变为i*2和i*2+1  \n        node[i].sum=node[i+i].sum+node[i+i+1].sum;  \n    }  \n}  \nvoid query(int x,int y,int i){          //询问  \n    if(x<=node[i].l&&y>=node[i].r)      //找到后修改全局变量  \n        Qsum+=node[i].sum;  \n    else{  \n        int mid=(node[i].l+node[i].r)/2;//否则左右查找  \n        if(x>mid) query(x,y,i+i+1);  \n        else if(y<=mid) query(x,y,i+i);  \n        else{  \n            query(x,y,i+i);             //记得不在某一边时两边都要查找  \n            query(x,y,i+i+1);  \n        }  \n    }  \n}  \nvoid add(int x,int y,int i){  \n    node[i].sum+=y;  \n    if(node[i].l==x&&node[i].r==x) return;  \n    if(x>(node[i].l+node[i].r)/2) add(x,y,i+i+1);  \n    else add(x,y,i+i);  \n}  \nvoid sub(int x,int y,int i)  {  \n    node[i].sum-=y;  \n    if(node[i].l==x&&node[i].r==x) return;  \n    if(x>(node[i].l+node[i].r)/2) sub(x,y,i+i+1);  \n    else sub(x,y,i+i);  \n}  \nint main()  \n{  \n    int times=1;  \n    int T;  \n    scanf(\"%d\",&T);  \n    while(T--){  \n        printf(\"Case %d:\\n\",times++);  \n        int N;  \n        scanf(\"%d\",&N);  \n        for(int i=1;i<=N;i++)  \n            scanf(\"%d\",&sumOfPeople[i]);  \n        build(1,N,1);  \n        char key[10];  \n        //scanf(\"\\n\");  \n        while(scanf(\" %s\",key)&&key[0]!='E'){//\" %s\"前的空格用于清空缓冲区  \n            int a,b;  \n            scanf(\"%d%d\",&a,&b);  \n            if(strcmp(key,\"Query\")==0){  \n                Qsum=0;  \n                query(a,b,1);  \n                cout<<Qsum<<endl;  \n            }  \n            else if(strcmp(key,\"Add\")==0)  \n                add(a,b,1);  \n            else if(strcmp(key,\"Sub\")==0)  \n                sub(a,b,1);  \n            //printf(\"%s\\n\",key);  \n            //scanf(\"\\n\");  \n        }  \n    }  \n    return 0;  \n}  \n```\n下面这题是线段树的另一种用法：找max/min值\n\n\nI Hate It\nTime Limit:3000MS     Memory Limit:32768KB     64bit IO Format:%I64d & %I64u\nSubmitStatus\n\nDescription\n\n很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。 \n这让很多学生很反感。 \n\n不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。 \n\nInput\n本题目包含多组测试，请处理到文件结束。 \n在每个测试的第一行，有两个正整数 N 和 M ( 0<N<=200000,0<M<5000 )，分别代表学生的数目和操作的数目。 \n学生ID编号分别从1编到N。 \n第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。 \n接下来有M行。每一行有一个字符 C (只取'Q'或'U') ，和两个正整数A，B。 \n当C为'Q'的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。 \n当C为'U'的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。 \n\nOutput\n对于每一次询问操作，在一行里面输出最高成绩。 \n\nSample Input\n\n5 6\n1 2 3 4 5\nQ 1 5\nU 3 6\nQ 3 4\nQ 4 5\nU 2 9\nQ 1 5 \n\nSample Output\n\n5\n6\n5\n9 \n\n\n Hint\n\n\nHuge input,the C function scanf() will work better than cin \n\n代码和上题类似\n\n```C\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#include <cmath>  \n#define MAX 200000+10  \n  \nusing namespace std;  \n  \nint stu[MAX];  \nint MaxMarks=0;  \nstruct Tree{  \n    int l;  \n    int r;  \n    int maxn;  \n}node[4*MAX];  \n//建树，最简单的一部分。  \nvoid build(int x,int y,int i){  \n    node[i].l=x;  \n    node[i].r=y;  \n    if(x==y){ node[i].maxn=stu[x];return ;}  \n    int mid=(x+y)/2;  \n    build(x,mid,i+i);  \n    build(mid+1,y,i+i+1);  \n    node[i].maxn=max(node[i+i+1].maxn,node[i+i].maxn);  \n}  \n  \n//询问函数：这边有一点我也不太清楚，写出void修改全局变量好像更快一些  \nint query(int x,int y,int i){  \n    if(x==node[i].l&&node[i].r==y)  \n        return node[i].maxn;  \n    int mid=(node[i].r+node[i].l)>>1;  \n    if(x>mid) return query(x,y,i+i+1);  \n    else if(y<=mid) return query(x,y,i+i);  \n    else  \n        return max(query(x,mid,i+i),query(mid+1,y,i+i+1));  \n}  \n  \nvoid upData(int x,int y,int i,int tmp){  \n    if(x== node[i].l && y==node[i].r){  \n        node[i].maxn = tmp;  \n        return;  \n    }  \n    int mid =(node[i].l + node[i].r)>>1;  \n    if(y <= mid)  \n        upData(x,y,i<<1,tmp);  \n    else if(x>mid)  \n        upData(x,y,i<<1|1,tmp);  \n    else {  \n        upData(x,mid,i<<1,tmp);  \n        upData(mid+1,y,i<<1|1,tmp);  \n    }  \n    node[i].maxn = max(node[i<<1].maxn,node[i<<1|1].maxn); //更新完单个点之后更新整棵树  \n}  \n  \nint main()  \n{  \n    int N,T;  \n    while(~scanf(\"%d%d\",&N,&T)){  \n        for(int i=1;i<=N;i++)  \n            scanf(\"%d\",&stu[i]);  \n        build(1,N,1);  \n        while(T--){  \n            char c;  \n            int a,b;  \n            scanf(\" %c%d%d\",&c,&a,&b);  \n            //cout << \"a=\"<<a<<\" b=\"<<b<<endl;  \n            if(c=='Q') cout << query(a,b,1)<<endl;  \n            else upData(a,a,1,b);  \n        }  \n    }  \n    return 0;  \n}  \n```\n\n","source":"_posts/两道基础线段树简解:HDU 1166，HDU 1754.md","raw":"---\ntitle: 两道基础线段树简解:HDU 1166，HDU 1754\ndate: 2015-07-22 20:06:14\ntags: \"ACM&OJ\"\n---\n\n今天刚学了下线段树，感觉如果想快速攻入熟练的程度还是需要时间的，不过看了几题之后发现这些还是有规律的，或许是我们所说的模板吧。但是还是很多难题不能解出来的。还有就是，我感觉上来，树的算法还是比较依靠空间的（不知是不是我做的优化还不够）。写下两道简单的题目，供自己记忆和理解，有兴趣的朋友也可以看看，帮忙斧正斧正。\n\n接下来的两道题我也想了很久，看了许多朋友写的代码，好不容易才磨出来。我还要加油了！\nDHU 1166 敌兵布阵\n\n敌兵布阵\nTime Limit:1000MS     Memory Limit:32768KB     64bit IO Format:%I64d & %I64u\nSubmitStatus\n\nDescription\n C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。 \n中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:\"你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：\"我知错了。。。\"但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. \n\nInput\n第一行一个整数T，表示有T组数据。 \n每组数据第一行一个正整数N（N<=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1<=ai<=50）。 \n接下来每行有一条命令，命令有4种形式： \n(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30） \n(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）; \n(3)Query i j ,i和j为正整数,i<=j，表示询问第i到第j个营地的总人数; \n(4)End 表示结束，这条命令在每组数据最后出现; \n每组数据最多有40000条命令 \nOutput\n\n\n\n\n对第i组数据,首先输出“Case i:”和回车, \n对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 \n\n\nSample Input\n\n\n1\n10\n1 2 3 4 5 6 7 8 9 10\nQuery 1 3\nAdd 3 6\nQuery 2 7\nSub 10 2\nAdd 6 3\nQuery 3 10\nEnd \n   \n\n\n\n\nSample Output\n\n\n\n\nCase 1:\n6\n33\n59 \n\n```C\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#define MAXN 50000+5  \nusing namespace std;  \n  \nint sumOfPeople[MAXN];  \nlong long Qsum;  \n  \nstruct Tree{  \n    int l;  \n    int r;  \n    int sum;  \n}node[4*MAXN];              //线段树记得开到原来MAXN的4倍,其实消耗好像并没有这么大。  \n  \nvoid build(int x,int y,int i){  //建树，线段树很多思想都用到二分的方法  \n    node[i].l=x;  \n    node[i].r=y;  \n    if(x==y) node[i].sum=sumOfPeople[y];//当y==x时，到达最底下node,有的朋友习惯在这里用scanf读入数据。  \n    else{  \n        build(x,(x+y)/2,i<<1);           //x+y/2为左边子树的右端点，(x+y)/2+1为右端树左端点  \n        build((x+y)/2+1,y,i<<1|1);       //node下标变为i*2和i*2+1  \n        node[i].sum=node[i+i].sum+node[i+i+1].sum;  \n    }  \n}  \nvoid query(int x,int y,int i){          //询问  \n    if(x<=node[i].l&&y>=node[i].r)      //找到后修改全局变量  \n        Qsum+=node[i].sum;  \n    else{  \n        int mid=(node[i].l+node[i].r)/2;//否则左右查找  \n        if(x>mid) query(x,y,i+i+1);  \n        else if(y<=mid) query(x,y,i+i);  \n        else{  \n            query(x,y,i+i);             //记得不在某一边时两边都要查找  \n            query(x,y,i+i+1);  \n        }  \n    }  \n}  \nvoid add(int x,int y,int i){  \n    node[i].sum+=y;  \n    if(node[i].l==x&&node[i].r==x) return;  \n    if(x>(node[i].l+node[i].r)/2) add(x,y,i+i+1);  \n    else add(x,y,i+i);  \n}  \nvoid sub(int x,int y,int i)  {  \n    node[i].sum-=y;  \n    if(node[i].l==x&&node[i].r==x) return;  \n    if(x>(node[i].l+node[i].r)/2) sub(x,y,i+i+1);  \n    else sub(x,y,i+i);  \n}  \nint main()  \n{  \n    int times=1;  \n    int T;  \n    scanf(\"%d\",&T);  \n    while(T--){  \n        printf(\"Case %d:\\n\",times++);  \n        int N;  \n        scanf(\"%d\",&N);  \n        for(int i=1;i<=N;i++)  \n            scanf(\"%d\",&sumOfPeople[i]);  \n        build(1,N,1);  \n        char key[10];  \n        //scanf(\"\\n\");  \n        while(scanf(\" %s\",key)&&key[0]!='E'){//\" %s\"前的空格用于清空缓冲区  \n            int a,b;  \n            scanf(\"%d%d\",&a,&b);  \n            if(strcmp(key,\"Query\")==0){  \n                Qsum=0;  \n                query(a,b,1);  \n                cout<<Qsum<<endl;  \n            }  \n            else if(strcmp(key,\"Add\")==0)  \n                add(a,b,1);  \n            else if(strcmp(key,\"Sub\")==0)  \n                sub(a,b,1);  \n            //printf(\"%s\\n\",key);  \n            //scanf(\"\\n\");  \n        }  \n    }  \n    return 0;  \n}  \n```\n下面这题是线段树的另一种用法：找max/min值\n\n\nI Hate It\nTime Limit:3000MS     Memory Limit:32768KB     64bit IO Format:%I64d & %I64u\nSubmitStatus\n\nDescription\n\n很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。 \n这让很多学生很反感。 \n\n不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。 \n\nInput\n本题目包含多组测试，请处理到文件结束。 \n在每个测试的第一行，有两个正整数 N 和 M ( 0<N<=200000,0<M<5000 )，分别代表学生的数目和操作的数目。 \n学生ID编号分别从1编到N。 \n第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。 \n接下来有M行。每一行有一个字符 C (只取'Q'或'U') ，和两个正整数A，B。 \n当C为'Q'的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。 \n当C为'U'的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。 \n\nOutput\n对于每一次询问操作，在一行里面输出最高成绩。 \n\nSample Input\n\n5 6\n1 2 3 4 5\nQ 1 5\nU 3 6\nQ 3 4\nQ 4 5\nU 2 9\nQ 1 5 \n\nSample Output\n\n5\n6\n5\n9 \n\n\n Hint\n\n\nHuge input,the C function scanf() will work better than cin \n\n代码和上题类似\n\n```C\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#include <cmath>  \n#define MAX 200000+10  \n  \nusing namespace std;  \n  \nint stu[MAX];  \nint MaxMarks=0;  \nstruct Tree{  \n    int l;  \n    int r;  \n    int maxn;  \n}node[4*MAX];  \n//建树，最简单的一部分。  \nvoid build(int x,int y,int i){  \n    node[i].l=x;  \n    node[i].r=y;  \n    if(x==y){ node[i].maxn=stu[x];return ;}  \n    int mid=(x+y)/2;  \n    build(x,mid,i+i);  \n    build(mid+1,y,i+i+1);  \n    node[i].maxn=max(node[i+i+1].maxn,node[i+i].maxn);  \n}  \n  \n//询问函数：这边有一点我也不太清楚，写出void修改全局变量好像更快一些  \nint query(int x,int y,int i){  \n    if(x==node[i].l&&node[i].r==y)  \n        return node[i].maxn;  \n    int mid=(node[i].r+node[i].l)>>1;  \n    if(x>mid) return query(x,y,i+i+1);  \n    else if(y<=mid) return query(x,y,i+i);  \n    else  \n        return max(query(x,mid,i+i),query(mid+1,y,i+i+1));  \n}  \n  \nvoid upData(int x,int y,int i,int tmp){  \n    if(x== node[i].l && y==node[i].r){  \n        node[i].maxn = tmp;  \n        return;  \n    }  \n    int mid =(node[i].l + node[i].r)>>1;  \n    if(y <= mid)  \n        upData(x,y,i<<1,tmp);  \n    else if(x>mid)  \n        upData(x,y,i<<1|1,tmp);  \n    else {  \n        upData(x,mid,i<<1,tmp);  \n        upData(mid+1,y,i<<1|1,tmp);  \n    }  \n    node[i].maxn = max(node[i<<1].maxn,node[i<<1|1].maxn); //更新完单个点之后更新整棵树  \n}  \n  \nint main()  \n{  \n    int N,T;  \n    while(~scanf(\"%d%d\",&N,&T)){  \n        for(int i=1;i<=N;i++)  \n            scanf(\"%d\",&stu[i]);  \n        build(1,N,1);  \n        while(T--){  \n            char c;  \n            int a,b;  \n            scanf(\" %c%d%d\",&c,&a,&b);  \n            //cout << \"a=\"<<a<<\" b=\"<<b<<endl;  \n            if(c=='Q') cout << query(a,b,1)<<endl;  \n            else upData(a,a,1,b);  \n        }  \n    }  \n    return 0;  \n}  \n```\n\n","slug":"两道基础线段树简解:HDU 1166，HDU 1754","published":1,"updated":"2018-01-09T00:57:46.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzuh000ayg3igyqa6jzr","content":"<p>今天刚学了下线段树，感觉如果想快速攻入熟练的程度还是需要时间的，不过看了几题之后发现这些还是有规律的，或许是我们所说的模板吧。但是还是很多难题不能解出来的。还有就是，我感觉上来，树的算法还是比较依靠空间的（不知是不是我做的优化还不够）。写下两道简单的题目，供自己记忆和理解，有兴趣的朋友也可以看看，帮忙斧正斧正。</p>\n<p>接下来的两道题我也想了很久，看了许多朋友写的代码，好不容易才磨出来。我还要加油了！<br>DHU 1166 敌兵布阵</p>\n<p>敌兵布阵<br>Time Limit:1000MS     Memory Limit:32768KB     64bit IO Format:%I64d &amp; %I64u<br>SubmitStatus</p>\n<p>Description<br> C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. </p>\n<p>Input<br>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令<br>Output</p>\n<p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 </p>\n<p>Sample Input</p>\n<p>1<br>10<br>1 2 3 4 5 6 7 8 9 10<br>Query 1 3<br>Add 3 6<br>Query 2 7<br>Sub 10 2<br>Add 6 3<br>Query 3 10<br>End </p>\n<p>Sample Output</p>\n<p>Case 1:<br>6<br>33<br>59 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50000+5  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> sumOfPeople[MAXN];  </span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> Qsum;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> l;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> r;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum;  </span><br><span class=\"line\">&#125;node[<span class=\"number\">4</span>*MAXN];              <span class=\"comment\">//线段树记得开到原来MAXN的4倍,其实消耗好像并没有这么大。  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  <span class=\"comment\">//建树，线段树很多思想都用到二分的方法  </span></span><br><span class=\"line\">    node[i].l=x;  </span><br><span class=\"line\">    node[i].r=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y) node[i].sum=sumOfPeople[y];<span class=\"comment\">//当y==x时，到达最底下node,有的朋友习惯在这里用scanf读入数据。  </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        build(x,(x+y)/<span class=\"number\">2</span>,i&lt;&lt;<span class=\"number\">1</span>);           <span class=\"comment\">//x+y/2为左边子树的右端点，(x+y)/2+1为右端树左端点  </span></span><br><span class=\"line\">        build((x+y)/<span class=\"number\">2</span>+<span class=\"number\">1</span>,y,i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>);       <span class=\"comment\">//node下标变为i*2和i*2+1  </span></span><br><span class=\"line\">        node[i].sum=node[i+i].sum+node[i+i+<span class=\"number\">1</span>].sum;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;          <span class=\"comment\">//询问  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=node[i].l&amp;&amp;y&gt;=node[i].r)      <span class=\"comment\">//找到后修改全局变量  </span></span><br><span class=\"line\">        Qsum+=node[i].sum;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(node[i].l+node[i].r)/<span class=\"number\">2</span>;<span class=\"comment\">//否则左右查找  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;mid) query(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y&lt;=mid) query(x,y,i+i);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            query(x,y,i+i);             <span class=\"comment\">//记得不在某一边时两边都要查找  </span></span><br><span class=\"line\">            query(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">    node[i].sum+=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node[i].l==x&amp;&amp;node[i].r==x) <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;(node[i].l+node[i].r)/<span class=\"number\">2</span>) add(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> add(x,y,i+i);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sub</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span>  </span>&#123;  </span><br><span class=\"line\">    node[i].sum-=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node[i].l==x&amp;&amp;node[i].r==x) <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;(node[i].l+node[i].r)/<span class=\"number\">2</span>) sub(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> sub(x,y,i+i);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> times=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case %d:\\n\"</span>,times++);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> N;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;sumOfPeople[i]);  </span><br><span class=\"line\">        build(<span class=\"number\">1</span>,N,<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> key[<span class=\"number\">10</span>];  </span><br><span class=\"line\">        <span class=\"comment\">//scanf(\"\\n\");  </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\" %s\"</span>,key)&amp;&amp;key[<span class=\"number\">0</span>]!=<span class=\"string\">'E'</span>)&#123;<span class=\"comment\">//\" %s\"前的空格用于清空缓冲区  </span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> a,b;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(key,<span class=\"string\">\"Query\"</span>)==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                Qsum=<span class=\"number\">0</span>;  </span><br><span class=\"line\">                query(a,b,<span class=\"number\">1</span>);  </span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;Qsum&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(key,<span class=\"string\">\"Add\"</span>)==<span class=\"number\">0</span>)  </span><br><span class=\"line\">                add(a,b,<span class=\"number\">1</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(key,<span class=\"string\">\"Sub\"</span>)==<span class=\"number\">0</span>)  </span><br><span class=\"line\">                sub(a,b,<span class=\"number\">1</span>);  </span><br><span class=\"line\">            <span class=\"comment\">//printf(\"%s\\n\",key);  </span></span><br><span class=\"line\">            <span class=\"comment\">//scanf(\"\\n\");  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这题是线段树的另一种用法：找max/min值</p>\n<p>I Hate It<br>Time Limit:3000MS     Memory Limit:32768KB     64bit IO Format:%I64d &amp; %I64u<br>SubmitStatus</p>\n<p>Description</p>\n<p>很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br>这让很多学生很反感。 </p>\n<p>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。 </p>\n<p>Input<br>本题目包含多组测试，请处理到文件结束。<br>在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br>学生ID编号分别从1编到N。<br>第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br>接下来有M行。每一行有一个字符 C (只取’Q’或’U’) ，和两个正整数A，B。<br>当C为’Q’的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br>当C为’U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。 </p>\n<p>Output<br>对于每一次询问操作，在一行里面输出最高成绩。 </p>\n<p>Sample Input</p>\n<p>5 6<br>1 2 3 4 5<br>Q 1 5<br>U 3 6<br>Q 3 4<br>Q 4 5<br>U 2 9<br>Q 1 5 </p>\n<p>Sample Output</p>\n<p>5<br>6<br>5<br>9 </p>\n<p> Hint</p>\n<p>Huge input,the C function scanf() will work better than cin </p>\n<p>代码和上题类似</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 200000+10  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> stu[MAX];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> MaxMarks=<span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> l;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> r;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxn;  </span><br><span class=\"line\">&#125;node[<span class=\"number\">4</span>*MAX];  </span><br><span class=\"line\"><span class=\"comment\">//建树，最简单的一部分。  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">    node[i].l=x;  </span><br><span class=\"line\">    node[i].r=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y)&#123; node[i].maxn=stu[x];<span class=\"keyword\">return</span> ;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(x+y)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">    build(x,mid,i+i);  </span><br><span class=\"line\">    build(mid+<span class=\"number\">1</span>,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    node[i].maxn=max(node[i+i+<span class=\"number\">1</span>].maxn,node[i+i].maxn);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//询问函数：这边有一点我也不太清楚，写出void修改全局变量好像更快一些  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==node[i].l&amp;&amp;node[i].r==y)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> node[i].maxn;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(node[i].r+node[i].l)&gt;&gt;<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;mid) <span class=\"keyword\">return</span> query(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y&lt;=mid) <span class=\"keyword\">return</span> query(x,y,i+i);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(query(x,mid,i+i),query(mid+<span class=\"number\">1</span>,y,i+i+<span class=\"number\">1</span>));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upData</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> tmp)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x== node[i].l &amp;&amp; y==node[i].r)&#123;  </span><br><span class=\"line\">        node[i].maxn = tmp;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid =(node[i].l + node[i].r)&gt;&gt;<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y &lt;= mid)  </span><br><span class=\"line\">        upData(x,y,i&lt;&lt;<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;mid)  </span><br><span class=\"line\">        upData(x,y,i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        upData(x,mid,i&lt;&lt;<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">        upData(mid+<span class=\"number\">1</span>,y,i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    node[i].maxn = max(node[i&lt;&lt;<span class=\"number\">1</span>].maxn,node[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxn); <span class=\"comment\">//更新完单个点之后更新整棵树  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N,T;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;T))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;stu[i]);  </span><br><span class=\"line\">        build(<span class=\"number\">1</span>,N,<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T--)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">char</span> c;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> a,b;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\" %c%d%d\"</span>,&amp;c,&amp;a,&amp;b);  </span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"a=\"&lt;&lt;a&lt;&lt;\" b=\"&lt;&lt;b&lt;&lt;endl;  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c==<span class=\"string\">'Q'</span>) <span class=\"built_in\">cout</span> &lt;&lt; query(a,b,<span class=\"number\">1</span>)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> upData(a,a,<span class=\"number\">1</span>,b);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>今天刚学了下线段树，感觉如果想快速攻入熟练的程度还是需要时间的，不过看了几题之后发现这些还是有规律的，或许是我们所说的模板吧。但是还是很多难题不能解出来的。还有就是，我感觉上来，树的算法还是比较依靠空间的（不知是不是我做的优化还不够）。写下两道简单的题目，供自己记忆和理解，有兴趣的朋友也可以看看，帮忙斧正斧正。</p>\n<p>接下来的两道题我也想了很久，看了许多朋友写的代码，好不容易才磨出来。我还要加油了！<br>DHU 1166 敌兵布阵</p>\n<p>敌兵布阵<br>Time Limit:1000MS     Memory Limit:32768KB     64bit IO Format:%I64d &amp; %I64u<br>SubmitStatus</p>\n<p>Description<br> C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. </p>\n<p>Input<br>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令<br>Output</p>\n<p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 </p>\n<p>Sample Input</p>\n<p>1<br>10<br>1 2 3 4 5 6 7 8 9 10<br>Query 1 3<br>Add 3 6<br>Query 2 7<br>Sub 10 2<br>Add 6 3<br>Query 3 10<br>End </p>\n<p>Sample Output</p>\n<p>Case 1:<br>6<br>33<br>59 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50000+5  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> sumOfPeople[MAXN];  </span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> Qsum;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> l;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> r;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum;  </span><br><span class=\"line\">&#125;node[<span class=\"number\">4</span>*MAXN];              <span class=\"comment\">//线段树记得开到原来MAXN的4倍,其实消耗好像并没有这么大。  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  <span class=\"comment\">//建树，线段树很多思想都用到二分的方法  </span></span><br><span class=\"line\">    node[i].l=x;  </span><br><span class=\"line\">    node[i].r=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y) node[i].sum=sumOfPeople[y];<span class=\"comment\">//当y==x时，到达最底下node,有的朋友习惯在这里用scanf读入数据。  </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        build(x,(x+y)/<span class=\"number\">2</span>,i&lt;&lt;<span class=\"number\">1</span>);           <span class=\"comment\">//x+y/2为左边子树的右端点，(x+y)/2+1为右端树左端点  </span></span><br><span class=\"line\">        build((x+y)/<span class=\"number\">2</span>+<span class=\"number\">1</span>,y,i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>);       <span class=\"comment\">//node下标变为i*2和i*2+1  </span></span><br><span class=\"line\">        node[i].sum=node[i+i].sum+node[i+i+<span class=\"number\">1</span>].sum;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;          <span class=\"comment\">//询问  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=node[i].l&amp;&amp;y&gt;=node[i].r)      <span class=\"comment\">//找到后修改全局变量  </span></span><br><span class=\"line\">        Qsum+=node[i].sum;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(node[i].l+node[i].r)/<span class=\"number\">2</span>;<span class=\"comment\">//否则左右查找  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;mid) query(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y&lt;=mid) query(x,y,i+i);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            query(x,y,i+i);             <span class=\"comment\">//记得不在某一边时两边都要查找  </span></span><br><span class=\"line\">            query(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">    node[i].sum+=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node[i].l==x&amp;&amp;node[i].r==x) <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;(node[i].l+node[i].r)/<span class=\"number\">2</span>) add(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> add(x,y,i+i);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sub</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span>  </span>&#123;  </span><br><span class=\"line\">    node[i].sum-=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node[i].l==x&amp;&amp;node[i].r==x) <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;(node[i].l+node[i].r)/<span class=\"number\">2</span>) sub(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> sub(x,y,i+i);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> times=<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case %d:\\n\"</span>,times++);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> N;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;sumOfPeople[i]);  </span><br><span class=\"line\">        build(<span class=\"number\">1</span>,N,<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> key[<span class=\"number\">10</span>];  </span><br><span class=\"line\">        <span class=\"comment\">//scanf(\"\\n\");  </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\" %s\"</span>,key)&amp;&amp;key[<span class=\"number\">0</span>]!=<span class=\"string\">'E'</span>)&#123;<span class=\"comment\">//\" %s\"前的空格用于清空缓冲区  </span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> a,b;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(key,<span class=\"string\">\"Query\"</span>)==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                Qsum=<span class=\"number\">0</span>;  </span><br><span class=\"line\">                query(a,b,<span class=\"number\">1</span>);  </span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;Qsum&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(key,<span class=\"string\">\"Add\"</span>)==<span class=\"number\">0</span>)  </span><br><span class=\"line\">                add(a,b,<span class=\"number\">1</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(key,<span class=\"string\">\"Sub\"</span>)==<span class=\"number\">0</span>)  </span><br><span class=\"line\">                sub(a,b,<span class=\"number\">1</span>);  </span><br><span class=\"line\">            <span class=\"comment\">//printf(\"%s\\n\",key);  </span></span><br><span class=\"line\">            <span class=\"comment\">//scanf(\"\\n\");  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这题是线段树的另一种用法：找max/min值</p>\n<p>I Hate It<br>Time Limit:3000MS     Memory Limit:32768KB     64bit IO Format:%I64d &amp; %I64u<br>SubmitStatus</p>\n<p>Description</p>\n<p>很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br>这让很多学生很反感。 </p>\n<p>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。 </p>\n<p>Input<br>本题目包含多组测试，请处理到文件结束。<br>在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br>学生ID编号分别从1编到N。<br>第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br>接下来有M行。每一行有一个字符 C (只取’Q’或’U’) ，和两个正整数A，B。<br>当C为’Q’的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br>当C为’U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。 </p>\n<p>Output<br>对于每一次询问操作，在一行里面输出最高成绩。 </p>\n<p>Sample Input</p>\n<p>5 6<br>1 2 3 4 5<br>Q 1 5<br>U 3 6<br>Q 3 4<br>Q 4 5<br>U 2 9<br>Q 1 5 </p>\n<p>Sample Output</p>\n<p>5<br>6<br>5<br>9 </p>\n<p> Hint</p>\n<p>Huge input,the C function scanf() will work better than cin </p>\n<p>代码和上题类似</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 200000+10  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> stu[MAX];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> MaxMarks=<span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> l;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> r;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxn;  </span><br><span class=\"line\">&#125;node[<span class=\"number\">4</span>*MAX];  </span><br><span class=\"line\"><span class=\"comment\">//建树，最简单的一部分。  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">    node[i].l=x;  </span><br><span class=\"line\">    node[i].r=y;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y)&#123; node[i].maxn=stu[x];<span class=\"keyword\">return</span> ;&#125;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(x+y)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">    build(x,mid,i+i);  </span><br><span class=\"line\">    build(mid+<span class=\"number\">1</span>,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    node[i].maxn=max(node[i+i+<span class=\"number\">1</span>].maxn,node[i+i].maxn);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//询问函数：这边有一点我也不太清楚，写出void修改全局变量好像更快一些  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==node[i].l&amp;&amp;node[i].r==y)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> node[i].maxn;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(node[i].r+node[i].l)&gt;&gt;<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;mid) <span class=\"keyword\">return</span> query(x,y,i+i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(y&lt;=mid) <span class=\"keyword\">return</span> query(x,y,i+i);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(query(x,mid,i+i),query(mid+<span class=\"number\">1</span>,y,i+i+<span class=\"number\">1</span>));  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upData</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> tmp)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x== node[i].l &amp;&amp; y==node[i].r)&#123;  </span><br><span class=\"line\">        node[i].maxn = tmp;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid =(node[i].l + node[i].r)&gt;&gt;<span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y &lt;= mid)  </span><br><span class=\"line\">        upData(x,y,i&lt;&lt;<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;mid)  </span><br><span class=\"line\">        upData(x,y,i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        upData(x,mid,i&lt;&lt;<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">        upData(mid+<span class=\"number\">1</span>,y,i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>,tmp);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    node[i].maxn = max(node[i&lt;&lt;<span class=\"number\">1</span>].maxn,node[i&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].maxn); <span class=\"comment\">//更新完单个点之后更新整棵树  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N,T;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;T))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;stu[i]);  </span><br><span class=\"line\">        build(<span class=\"number\">1</span>,N,<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(T--)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">char</span> c;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> a,b;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\" %c%d%d\"</span>,&amp;c,&amp;a,&amp;b);  </span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; \"a=\"&lt;&lt;a&lt;&lt;\" b=\"&lt;&lt;b&lt;&lt;endl;  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c==<span class=\"string\">'Q'</span>) <span class=\"built_in\">cout</span> &lt;&lt; query(a,b,<span class=\"number\">1</span>)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> upData(a,a,<span class=\"number\">1</span>,b);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"互农——文库模块总结","date":"2016-11-24T13:41:00.000Z","_content":"\n近期有在忙一个Java项目，里面的文库部分，大概写完了，总结了以下几点，并附上代码。\n\n这是一个android访问，文章内容用webview（html访问）就可以了的项目。\n\n1、利用jsoup可将数据库中的文章创建成多份.html文件，注意点在于mysql中的编码格式和输出到文件时要注意输出流格式。以下是代码，主要用到jsoup包。\n\n```Java\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.List;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\nimport com.geowind.hunong.jpa.Article;\nimport com.geowind.hunong.jpa.ArticleDAO;\n\n/*\n//Library data\n//文库数据预览\nString _articleId; \t//ID\t\t0\nString _classification;\t//分类\t\t1\nString _title;\t\t//标题     \t\t2 \nString _list;\t\t//文章目录\t3\t如有多项，##分割\nString _summary;\t\t//简介   \t\t4\nString _keyword;\t\t//关键字\t\t5\t如有多项，##分割\nString _content;\t\t//内容\t\t6\t不同目录下文章内容用##分割，换行：<p>...</p>，空格:&nbsp\nString _imgURL;\t\t//图片链接\t7\nString _videoURL;\t//视频链接\t8\nString _other;\n*/\npublic class LibraryHTMLBuilder {\n\tString HTMLModlePath = null;//需要一个原始的模板html路径和名称\n\tString HTMLModelName = null;\n\tList<Article> articleList = null;\n\tpublic LibraryHTMLBuilder() {\n\t\tHTMLModlePath = PathUtil.Util_HTMLpath;\n\t\tarticleList = new ArticleDAO().findAll();//数据库操作，查找所有内容\n\t\tHTMLModelName = PathUtil.Util_HTMLModelName;\n\t}\n\tString[] dataMes = new String[9];\n\tpublic void SetHTMLModel(String ModelPath, String ModeName) {\n\t\tHTMLModlePath = ModelPath;\n\t\tHTMLModelName = ModeName;\n\t}\n\t// 设置文章信息，提取数据库文件\n\tpublic void CreateAllHTML() {\n\t\ttry {SetArticle();\n\t\t} catch (IOException e) {e.printStackTrace();}\n\t}\n\t// 设置每一条文章\n\tprivate void SetArticle() throws IOException {\n\n\t\t// 此处的每个都加i只是为了区别是不同的元组\n\t\tint articleNum = articleList.size();\n\t\tfor (int i = 0; i < articleNum; i++) {\n\t\t\tArticle now = articleList.get(i);\n\t\t\t/* article content format */\n\t\t\tdataMes[0] = now.getArticleId().toString();\n\t\t\tdataMes[1] = now.getClassification();\n\t\t\tdataMes[2] = now.getTitle();\n\t\t\tdataMes[3] = now.getList();\n\t\t\tdataMes[4] = now.getSummary();\n\t\t\tdataMes[5] = now.getKeyword();\n\t\t\tdataMes[6] = now.getContent();\n\t\t\tdataMes[7] = now.getImgUrl();\n\t\t\t// dataMes[8] = now.getVideoUrl();\n\t\t\t// 每设置好一个元组，便生成Html\n\t\t\tCreateHTML();\n\t\t}\n\t}\n\t/* 开始创建html */\n\tprivate void SetHtmlContent(String ModelPath, String NewPath) throws IOException {\n\t\tFile file = new File(ModelPath);\n\n\t\tDocument doc = Jsoup.parse(file, \"UTF-8\");\n\t\t// point1:set title\n\t\tElement elmt = doc.getElementById(\"title_h1\");// title\n\t\telmt.html(dataMes[2]);\n\t\t// point2:set list\n\t\telmt = doc.getElementById(\"list\");\n\t\tString[] airticlList = dataMes[3].split(\"##\");\n\n\t\tint listLen = airticlList.length;\n\t\tfor (int i = 0; i < listLen; i++) {\n\t\t\tString html = \"<li><a href=\\\"#\" + (\"info_title\" + i) + \"\\\">\" + airticlList[i] + \"</a><li>\";\n\t\t\telmt.append(html);\n\t\t}\n\t\t// point3: set description 简介\n\t\telmt = doc.getElementById(\"summary\");\n\t\telmt.html(dataMes[4]);\n\t\t// point4:set articles\n\t\telmt = doc.getElementById(\"article_div\");\n\t\tString[] articles = dataMes[6].split(\"##\");\n\t\tint minLen = Math.min(airticlList.length, articles.length);\n\t\t// int articleLen = articles.length;//listLen和articlelen应该是相等的\n\t\tfor (int i = 0; i < minLen; i++) {\n\t\t\tString html = \"<div><h1 id=\\\"info_title\" + i + \"\\\">\" + airticlList[i] + \"</h1>\" + articles[i] + \"</div>\";\n\t\t\telmt.append(html);\n\t\t}\n\t\t// set pictures\n\t\tString imgTag = \"<img src=\"+ PathUtil.Lib_PictureURL + dataMes[7] + \"\\\" width=\\\"100%\\\" height=\\\"100%\\\">\";\n\t\tSystem.out.println(imgTag);\n\t\telmt = doc.getElementById(\"header_right\");\n\t\telmt.append(imgTag);\n\t\t// set finished\n\t\tfile = new File(NewPath);\n\t\tif (file.exists())\n\t\t\tfile.delete();\n\t\tFileOutputStream fos = new FileOutputStream(NewPath, true);\n\t\tOutputStreamWriter osw = new OutputStreamWriter(fos, \"UTF-8\");\n\n\t\tosw.write(doc.html());\n\t\tosw.flush();\n\t\tosw.close();\n\n\t\t// fos.write(doc.html().getBytes());这种会乱码\n\t\t// fos.close();\n\n\t}\n\n\tprivate void CreateHTML() throws IOException {\n\t\t// step1 build path 制作路径\n\t\tString ModelPath = HTMLModlePath + \"/\" + HTMLModelName; // 模板文件完整路径\n\t\tString NewPath = HTMLModlePath + \"/\" + dataMes[0] + \".html\";// 新建文件完整路径\n\n\t\t// System.out.println(ModelPath);\n\t\t// step2 set html and setp3 write html 解析html并设置新值，写出html\n\t\tSetHtmlContent(ModelPath, NewPath);\n\t}\n\n\t// public static void main(String[] args) {\n\t// LibraryHTMLBuilder lhb = new LibraryHTMLBuilder();\n\t// lhb.CreateAllHTML();\n\t// }\n\n}\n```\n2、自己写的模糊查询，很普遍了，由于中文的关系，数据库连接时的字符串需要注意一下。\n\n```Java\n//db.properties\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql://127.0.0.1:3306/databases?characterEncoding=utf-8\nusername=xxx\npassword=xxx\n```\n```Java\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport org.apache.commons.dbcp2.BasicDataSourceFactory;\nimport org.apache.logging.log4j.LogManager;\n//仅连接部分，下面还有一些\npublic class DBHelper {\n\n\tprivate static DataSource dataSource;\n\n\tstatic {\n\t\ttry { // Class.forName(DRIVER_CLASS_NAME);\n\t\t\tProperties props = new Properties();\n\t\t\tInputStream in = DBHelper.class.getClassLoader()\n\t\t\t\t\t.getResourceAsStream(\"db.properties\");\n\t\t\tprops.load(in);\n\n\t\t\t// 使用连接池技术，数据源DBCP\n\t\t\tdataSource = BasicDataSourceFactory.createDataSource(props);\n\t\t\tLogManager.getLogger().debug(\"加载数据库属性元素构建数据源成功\");\n\t\t} catch (Exception e) {\n\t\t\tLogManager.getLogger().error(\"加载数据库属性元素构建数据源失败\", e);\n\t\t}\n\t}\n\n\t/**\n\t * 连接数据库\n\t * \n\t * @return\n\t */\n\tpublic static Connection getConn() {\n\t\tConnection con = null;\n\t\ttry {\n\t\t\tcon = dataSource.getConnection();\n\t\t\tLogManager.getLogger().debug(\"数据库连接成功\");\n\t\t} catch (Exception e) {\n\t\t\tLogManager.getLogger().error(\"数据库连接失败\", e);\n\t\t}\n\t\treturn con;\n\t}\n}\n```\n\n```Java\nimport static com.geowind.hunong.util.PathUtil.ServerIP;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.geowind.hunong.entity.ArticleSim;\n\npublic class DBHelperSim {\n\n\t// other\n\tprivate static List<ArticleSim> sqlExecute(String sql) {\n\t\tList<ArticleSim> res = new ArrayList<>();\n\n\t\ttry {\n\t\t\tConnection conn = DBHelper.getConn();\n\t\t\tStatement stmt = conn.createStatement(); // 创建Statement对象\n\t\t\t// System.out.println(\"成功连接到数据库！\");\n\t\t\t// System.out.println(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);// 创建数据对象\n\t\t\twhile (rs.next()) {\n\n\t\t\t\tString id = rs.getString(\"articleId\");\n\t\t\t\t// System.out.println(id_list.size());\n\t\t\t\tString title = rs.getString(\"title\");\n\t\t\t\tString url = \"http://\" + ServerIP + \":8080/MutualAgriculture/LibraryHTML/\" + id + \".html\";\n\t\t\t\tString summary = rs.getString(\"summary\");\n\t\t\t\tres.add(new ArticleSim(id, title, summary, url));\n\t\t\t}\n\t\t\trs.close();\n\t\t\tstmt.close();\n\t\t\tconn.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static List<ArticleSim> GetArticleSimUseSql(String sql) {\n\n\t\treturn sqlExecute(sql);\n\t}\n\t// public static void main(String[] args) {\n\t// List<String> list = GetIdBykeyword(\"我是\",\"select * from article where\n\t// keyword like '\" + \"%我是关键字\" + \"'\");\n\t// System.out.println(list.get(0));\n\t// }\n\n}\n```\n3、最后应该是Servlet和一些工具类\n\n```Java\nimport static com.geowind.hunong.util.PathUtil.*;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.geowind.hunong.entity.ArticleSim;\nimport com.geowind.hunong.util.DBHelperSim;\nimport com.geowind.hunong.util.LibraryKeywordSearch;\nimport com.google.gson.Gson;\n\n/**\n * Servlet implementation class LibraryServlet\n */\npublic class LibraryServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\tString method = null;\n\t\ttry{\n\t\t\tmethod = request.getParameter(\"method\");\n\t\t}catch (NullPointerException e) {\n\t\t\treturn ;\n\t\t}\n\t\tif (method.equals(\"serchLib\")) {\n\t\t\tSearchMethod(request, response);\n\t\t} else if (method.equals(\"getArticles\")) {\n\t\t\tGetArticlesMethod(request, response);\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tdoGet(request, response);\n\t}\n\n\tprivate void SearchMethod(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\t\tString keyword = request.getParameter(\"keyword\");\n\t\tSystem.out.println(\"library serlvet op=\" + keyword);\n\t\t// String keyword = request.getParameter(\"keyword\");\n\t\tList<ArticleSim> ArticleMeg = LibraryKeywordSearch.GetMatchArticlesURL(keyword);\n\t\tfor (int i = 0; i < ArticleMeg.size(); i++) {\n\t\t\tArticleSim now = ArticleMeg.get(i);\n\t\t\tnow.url = \"http://\" + ServerIP + \":8080/MutualAgriculture/LibraryHTML/\" + now.id + \".html\";\n\t\t}\n\t\t// System.out.println(\"IP=\"+ServerIP);\n\t\tPrintWriter out = response.getWriter();\n\t\tGson gson = new Gson();\n\t\tString msg = gson.toJson(ArticleMeg);\n\n\t\tout.print(msg);\n\t\tout.flush();\n\t\tout.close();\n\t}\n\t//辅助搜索，由于在分页搜索按条件搜索时可能会出现或不足的情况，需要向后延续。\n\t//记录当前向后延续到了哪里,并从那里继续往下查找\n\tprivate int [] beginOfSearch = new int[9];\n\tprivate boolean isFirstGet = true;\n\tprivate void GetArticlesMethod(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tString category = request.getParameter(\"category\");\n\t\tString nowPage = request.getParameter(\"nowPage\");\n\t\t\n\t\t// 10001 10010\n\t\tint type = Integer.parseInt(category); //需要查的文章类别\n\t\tint pagN = Integer.parseInt(nowPage);  //当前分页数目\n\t\t\n\t\t//如果当前分页是第一页（即第0页),对当前类别给定初始值。\n\t\tif(isFirstGet) {\n\t\t\tfor(int i=0;i<9;i++) beginOfSearch[i] = ArticleBeginId;\n\t\t\tisFirstGet = false;\n\t\t}\n\t\tif(pagN == TabBegin){\n\t\t\tbeginOfSearch[type] = ArticleBeginId;\n\t\t}\n\t\t\n\t\tList<ArticleSim> res = new ArrayList<>();\n\t\t\n\t\twhile(res.size()<APageOfTable_N && beginOfSearch[type]<=ArticleEndId){\n\t\t\t\n\t\t\tint begin_page = beginOfSearch[type];\n\t\t\tint end_page = begin_page+(APageOfTable_N-res.size()) - 1;\n\t\t\tbeginOfSearch[type] = end_page + 1;\n\t\t\t\n\t\t\tString sql = \"select * from article \";\n\t\t\tif (category.equals(\"0\")) {\n\t\t\t\tsql += \"where articleId between \" + begin_page + \" and \" + end_page;\n\t\t\t} else {\n\t\t\t\tsql += \"where classification like '%\" + category + \"%' and articleId between \" + begin_page + \" and \"\n\t\t\t\t\t\t+ end_page;\n\t\t\t}\n\t\t\t\n\t\t\tres.addAll(DBHelperSim.GetArticleSimUseSql(sql));\n\t\t}\n\t\t\n\t\t\n\t\tPrintWriter out = response.getWriter();\n\t\tGson gson = new Gson();\n\t\tString msg = gson.toJson(res);\n\n\t\tout.print(msg);\n\t\tout.flush();\n\t\tout.close();\n\t}\n\n}\n```\n```Java\npublic class PathUtil {\n\tpublic static String Util_HTMLpath = \"LibraryHTML\";\n\tpublic static String Util_HTMLModelName = \"library.html\";\n\tpublic static String Lib_PictureURL = \"/images/\";\n\tpublic final static String ServerIP = \"115.159.125.122\";\n\t\n\tpublic static int ArticleNumber = 0;//文章总条数\n\tpublic static int ArticleBeginId = 0; //文库开始编号\n\tpublic static int ArticleEndId = 0; //文库开始编号\n\tpublic final static int TabBegin = 0;//分页从第几页开始\n\tpublic final static int APageOfTable_N = 10;//一页显示10条目录\n\t\n}\n```\n补充一点，如果在java web想要在项目刚启动时处理某些东西，可以在xml中如下配置，并写一个initServlet。\n```Sql\n<servlet>\n\t<servlet-name>InitServlet</servlet-name>\n\t<servlet-class>com.geowind.hunong.servlet.InitServlet</servlet-class>\n\t初始化变量xx为haha\n        <init-param>\n\t\t<param-name>xx</param-name>\n\t\t<param-value>haha</param-value>\n\t</init-param>\n        启动优先级 0 最大\n\t<load-on-startup>0</load-on-startup>\n</servlet>\n```\n这次收获还不小，只是发现自己不太喜欢做这种繁琐的事。","source":"_posts/互农——文库模块总结.md","raw":"---\ntitle: 互农——文库模块总结\ndate: 2016-11-24 21:41:00\ntags: \"Projects\"\n---\n\n近期有在忙一个Java项目，里面的文库部分，大概写完了，总结了以下几点，并附上代码。\n\n这是一个android访问，文章内容用webview（html访问）就可以了的项目。\n\n1、利用jsoup可将数据库中的文章创建成多份.html文件，注意点在于mysql中的编码格式和输出到文件时要注意输出流格式。以下是代码，主要用到jsoup包。\n\n```Java\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.List;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\nimport com.geowind.hunong.jpa.Article;\nimport com.geowind.hunong.jpa.ArticleDAO;\n\n/*\n//Library data\n//文库数据预览\nString _articleId; \t//ID\t\t0\nString _classification;\t//分类\t\t1\nString _title;\t\t//标题     \t\t2 \nString _list;\t\t//文章目录\t3\t如有多项，##分割\nString _summary;\t\t//简介   \t\t4\nString _keyword;\t\t//关键字\t\t5\t如有多项，##分割\nString _content;\t\t//内容\t\t6\t不同目录下文章内容用##分割，换行：<p>...</p>，空格:&nbsp\nString _imgURL;\t\t//图片链接\t7\nString _videoURL;\t//视频链接\t8\nString _other;\n*/\npublic class LibraryHTMLBuilder {\n\tString HTMLModlePath = null;//需要一个原始的模板html路径和名称\n\tString HTMLModelName = null;\n\tList<Article> articleList = null;\n\tpublic LibraryHTMLBuilder() {\n\t\tHTMLModlePath = PathUtil.Util_HTMLpath;\n\t\tarticleList = new ArticleDAO().findAll();//数据库操作，查找所有内容\n\t\tHTMLModelName = PathUtil.Util_HTMLModelName;\n\t}\n\tString[] dataMes = new String[9];\n\tpublic void SetHTMLModel(String ModelPath, String ModeName) {\n\t\tHTMLModlePath = ModelPath;\n\t\tHTMLModelName = ModeName;\n\t}\n\t// 设置文章信息，提取数据库文件\n\tpublic void CreateAllHTML() {\n\t\ttry {SetArticle();\n\t\t} catch (IOException e) {e.printStackTrace();}\n\t}\n\t// 设置每一条文章\n\tprivate void SetArticle() throws IOException {\n\n\t\t// 此处的每个都加i只是为了区别是不同的元组\n\t\tint articleNum = articleList.size();\n\t\tfor (int i = 0; i < articleNum; i++) {\n\t\t\tArticle now = articleList.get(i);\n\t\t\t/* article content format */\n\t\t\tdataMes[0] = now.getArticleId().toString();\n\t\t\tdataMes[1] = now.getClassification();\n\t\t\tdataMes[2] = now.getTitle();\n\t\t\tdataMes[3] = now.getList();\n\t\t\tdataMes[4] = now.getSummary();\n\t\t\tdataMes[5] = now.getKeyword();\n\t\t\tdataMes[6] = now.getContent();\n\t\t\tdataMes[7] = now.getImgUrl();\n\t\t\t// dataMes[8] = now.getVideoUrl();\n\t\t\t// 每设置好一个元组，便生成Html\n\t\t\tCreateHTML();\n\t\t}\n\t}\n\t/* 开始创建html */\n\tprivate void SetHtmlContent(String ModelPath, String NewPath) throws IOException {\n\t\tFile file = new File(ModelPath);\n\n\t\tDocument doc = Jsoup.parse(file, \"UTF-8\");\n\t\t// point1:set title\n\t\tElement elmt = doc.getElementById(\"title_h1\");// title\n\t\telmt.html(dataMes[2]);\n\t\t// point2:set list\n\t\telmt = doc.getElementById(\"list\");\n\t\tString[] airticlList = dataMes[3].split(\"##\");\n\n\t\tint listLen = airticlList.length;\n\t\tfor (int i = 0; i < listLen; i++) {\n\t\t\tString html = \"<li><a href=\\\"#\" + (\"info_title\" + i) + \"\\\">\" + airticlList[i] + \"</a><li>\";\n\t\t\telmt.append(html);\n\t\t}\n\t\t// point3: set description 简介\n\t\telmt = doc.getElementById(\"summary\");\n\t\telmt.html(dataMes[4]);\n\t\t// point4:set articles\n\t\telmt = doc.getElementById(\"article_div\");\n\t\tString[] articles = dataMes[6].split(\"##\");\n\t\tint minLen = Math.min(airticlList.length, articles.length);\n\t\t// int articleLen = articles.length;//listLen和articlelen应该是相等的\n\t\tfor (int i = 0; i < minLen; i++) {\n\t\t\tString html = \"<div><h1 id=\\\"info_title\" + i + \"\\\">\" + airticlList[i] + \"</h1>\" + articles[i] + \"</div>\";\n\t\t\telmt.append(html);\n\t\t}\n\t\t// set pictures\n\t\tString imgTag = \"<img src=\"+ PathUtil.Lib_PictureURL + dataMes[7] + \"\\\" width=\\\"100%\\\" height=\\\"100%\\\">\";\n\t\tSystem.out.println(imgTag);\n\t\telmt = doc.getElementById(\"header_right\");\n\t\telmt.append(imgTag);\n\t\t// set finished\n\t\tfile = new File(NewPath);\n\t\tif (file.exists())\n\t\t\tfile.delete();\n\t\tFileOutputStream fos = new FileOutputStream(NewPath, true);\n\t\tOutputStreamWriter osw = new OutputStreamWriter(fos, \"UTF-8\");\n\n\t\tosw.write(doc.html());\n\t\tosw.flush();\n\t\tosw.close();\n\n\t\t// fos.write(doc.html().getBytes());这种会乱码\n\t\t// fos.close();\n\n\t}\n\n\tprivate void CreateHTML() throws IOException {\n\t\t// step1 build path 制作路径\n\t\tString ModelPath = HTMLModlePath + \"/\" + HTMLModelName; // 模板文件完整路径\n\t\tString NewPath = HTMLModlePath + \"/\" + dataMes[0] + \".html\";// 新建文件完整路径\n\n\t\t// System.out.println(ModelPath);\n\t\t// step2 set html and setp3 write html 解析html并设置新值，写出html\n\t\tSetHtmlContent(ModelPath, NewPath);\n\t}\n\n\t// public static void main(String[] args) {\n\t// LibraryHTMLBuilder lhb = new LibraryHTMLBuilder();\n\t// lhb.CreateAllHTML();\n\t// }\n\n}\n```\n2、自己写的模糊查询，很普遍了，由于中文的关系，数据库连接时的字符串需要注意一下。\n\n```Java\n//db.properties\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql://127.0.0.1:3306/databases?characterEncoding=utf-8\nusername=xxx\npassword=xxx\n```\n```Java\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.sql.DataSource;\n\nimport org.apache.commons.dbcp2.BasicDataSourceFactory;\nimport org.apache.logging.log4j.LogManager;\n//仅连接部分，下面还有一些\npublic class DBHelper {\n\n\tprivate static DataSource dataSource;\n\n\tstatic {\n\t\ttry { // Class.forName(DRIVER_CLASS_NAME);\n\t\t\tProperties props = new Properties();\n\t\t\tInputStream in = DBHelper.class.getClassLoader()\n\t\t\t\t\t.getResourceAsStream(\"db.properties\");\n\t\t\tprops.load(in);\n\n\t\t\t// 使用连接池技术，数据源DBCP\n\t\t\tdataSource = BasicDataSourceFactory.createDataSource(props);\n\t\t\tLogManager.getLogger().debug(\"加载数据库属性元素构建数据源成功\");\n\t\t} catch (Exception e) {\n\t\t\tLogManager.getLogger().error(\"加载数据库属性元素构建数据源失败\", e);\n\t\t}\n\t}\n\n\t/**\n\t * 连接数据库\n\t * \n\t * @return\n\t */\n\tpublic static Connection getConn() {\n\t\tConnection con = null;\n\t\ttry {\n\t\t\tcon = dataSource.getConnection();\n\t\t\tLogManager.getLogger().debug(\"数据库连接成功\");\n\t\t} catch (Exception e) {\n\t\t\tLogManager.getLogger().error(\"数据库连接失败\", e);\n\t\t}\n\t\treturn con;\n\t}\n}\n```\n\n```Java\nimport static com.geowind.hunong.util.PathUtil.ServerIP;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.geowind.hunong.entity.ArticleSim;\n\npublic class DBHelperSim {\n\n\t// other\n\tprivate static List<ArticleSim> sqlExecute(String sql) {\n\t\tList<ArticleSim> res = new ArrayList<>();\n\n\t\ttry {\n\t\t\tConnection conn = DBHelper.getConn();\n\t\t\tStatement stmt = conn.createStatement(); // 创建Statement对象\n\t\t\t// System.out.println(\"成功连接到数据库！\");\n\t\t\t// System.out.println(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);// 创建数据对象\n\t\t\twhile (rs.next()) {\n\n\t\t\t\tString id = rs.getString(\"articleId\");\n\t\t\t\t// System.out.println(id_list.size());\n\t\t\t\tString title = rs.getString(\"title\");\n\t\t\t\tString url = \"http://\" + ServerIP + \":8080/MutualAgriculture/LibraryHTML/\" + id + \".html\";\n\t\t\t\tString summary = rs.getString(\"summary\");\n\t\t\t\tres.add(new ArticleSim(id, title, summary, url));\n\t\t\t}\n\t\t\trs.close();\n\t\t\tstmt.close();\n\t\t\tconn.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static List<ArticleSim> GetArticleSimUseSql(String sql) {\n\n\t\treturn sqlExecute(sql);\n\t}\n\t// public static void main(String[] args) {\n\t// List<String> list = GetIdBykeyword(\"我是\",\"select * from article where\n\t// keyword like '\" + \"%我是关键字\" + \"'\");\n\t// System.out.println(list.get(0));\n\t// }\n\n}\n```\n3、最后应该是Servlet和一些工具类\n\n```Java\nimport static com.geowind.hunong.util.PathUtil.*;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.geowind.hunong.entity.ArticleSim;\nimport com.geowind.hunong.util.DBHelperSim;\nimport com.geowind.hunong.util.LibraryKeywordSearch;\nimport com.google.gson.Gson;\n\n/**\n * Servlet implementation class LibraryServlet\n */\npublic class LibraryServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\tString method = null;\n\t\ttry{\n\t\t\tmethod = request.getParameter(\"method\");\n\t\t}catch (NullPointerException e) {\n\t\t\treturn ;\n\t\t}\n\t\tif (method.equals(\"serchLib\")) {\n\t\t\tSearchMethod(request, response);\n\t\t} else if (method.equals(\"getArticles\")) {\n\t\t\tGetArticlesMethod(request, response);\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\n\t}\n\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\tdoGet(request, response);\n\t}\n\n\tprivate void SearchMethod(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\t\tString keyword = request.getParameter(\"keyword\");\n\t\tSystem.out.println(\"library serlvet op=\" + keyword);\n\t\t// String keyword = request.getParameter(\"keyword\");\n\t\tList<ArticleSim> ArticleMeg = LibraryKeywordSearch.GetMatchArticlesURL(keyword);\n\t\tfor (int i = 0; i < ArticleMeg.size(); i++) {\n\t\t\tArticleSim now = ArticleMeg.get(i);\n\t\t\tnow.url = \"http://\" + ServerIP + \":8080/MutualAgriculture/LibraryHTML/\" + now.id + \".html\";\n\t\t}\n\t\t// System.out.println(\"IP=\"+ServerIP);\n\t\tPrintWriter out = response.getWriter();\n\t\tGson gson = new Gson();\n\t\tString msg = gson.toJson(ArticleMeg);\n\n\t\tout.print(msg);\n\t\tout.flush();\n\t\tout.close();\n\t}\n\t//辅助搜索，由于在分页搜索按条件搜索时可能会出现或不足的情况，需要向后延续。\n\t//记录当前向后延续到了哪里,并从那里继续往下查找\n\tprivate int [] beginOfSearch = new int[9];\n\tprivate boolean isFirstGet = true;\n\tprivate void GetArticlesMethod(HttpServletRequest request, HttpServletResponse response) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tString category = request.getParameter(\"category\");\n\t\tString nowPage = request.getParameter(\"nowPage\");\n\t\t\n\t\t// 10001 10010\n\t\tint type = Integer.parseInt(category); //需要查的文章类别\n\t\tint pagN = Integer.parseInt(nowPage);  //当前分页数目\n\t\t\n\t\t//如果当前分页是第一页（即第0页),对当前类别给定初始值。\n\t\tif(isFirstGet) {\n\t\t\tfor(int i=0;i<9;i++) beginOfSearch[i] = ArticleBeginId;\n\t\t\tisFirstGet = false;\n\t\t}\n\t\tif(pagN == TabBegin){\n\t\t\tbeginOfSearch[type] = ArticleBeginId;\n\t\t}\n\t\t\n\t\tList<ArticleSim> res = new ArrayList<>();\n\t\t\n\t\twhile(res.size()<APageOfTable_N && beginOfSearch[type]<=ArticleEndId){\n\t\t\t\n\t\t\tint begin_page = beginOfSearch[type];\n\t\t\tint end_page = begin_page+(APageOfTable_N-res.size()) - 1;\n\t\t\tbeginOfSearch[type] = end_page + 1;\n\t\t\t\n\t\t\tString sql = \"select * from article \";\n\t\t\tif (category.equals(\"0\")) {\n\t\t\t\tsql += \"where articleId between \" + begin_page + \" and \" + end_page;\n\t\t\t} else {\n\t\t\t\tsql += \"where classification like '%\" + category + \"%' and articleId between \" + begin_page + \" and \"\n\t\t\t\t\t\t+ end_page;\n\t\t\t}\n\t\t\t\n\t\t\tres.addAll(DBHelperSim.GetArticleSimUseSql(sql));\n\t\t}\n\t\t\n\t\t\n\t\tPrintWriter out = response.getWriter();\n\t\tGson gson = new Gson();\n\t\tString msg = gson.toJson(res);\n\n\t\tout.print(msg);\n\t\tout.flush();\n\t\tout.close();\n\t}\n\n}\n```\n```Java\npublic class PathUtil {\n\tpublic static String Util_HTMLpath = \"LibraryHTML\";\n\tpublic static String Util_HTMLModelName = \"library.html\";\n\tpublic static String Lib_PictureURL = \"/images/\";\n\tpublic final static String ServerIP = \"115.159.125.122\";\n\t\n\tpublic static int ArticleNumber = 0;//文章总条数\n\tpublic static int ArticleBeginId = 0; //文库开始编号\n\tpublic static int ArticleEndId = 0; //文库开始编号\n\tpublic final static int TabBegin = 0;//分页从第几页开始\n\tpublic final static int APageOfTable_N = 10;//一页显示10条目录\n\t\n}\n```\n补充一点，如果在java web想要在项目刚启动时处理某些东西，可以在xml中如下配置，并写一个initServlet。\n```Sql\n<servlet>\n\t<servlet-name>InitServlet</servlet-name>\n\t<servlet-class>com.geowind.hunong.servlet.InitServlet</servlet-class>\n\t初始化变量xx为haha\n        <init-param>\n\t\t<param-name>xx</param-name>\n\t\t<param-value>haha</param-value>\n\t</init-param>\n        启动优先级 0 最大\n\t<load-on-startup>0</load-on-startup>\n</servlet>\n```\n这次收获还不小，只是发现自己不太喜欢做这种繁琐的事。","slug":"互农——文库模块总结","published":1,"updated":"2018-01-09T02:36:51.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzuj000cyg3id7g0gro0","content":"<p>近期有在忙一个Java项目，里面的文库部分，大概写完了，总结了以下几点，并附上代码。</p>\n<p>这是一个android访问，文章内容用webview（html访问）就可以了的项目。</p>\n<p>1、利用jsoup可将数据库中的文章创建成多份.html文件，注意点在于mysql中的编码格式和输出到文件时要注意输出流格式。以下是代码，主要用到jsoup包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.jpa.Article;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.jpa.ArticleDAO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//Library data</span></span><br><span class=\"line\"><span class=\"comment\">//文库数据预览</span></span><br><span class=\"line\"><span class=\"comment\">String _articleId; \t//ID\t\t0</span></span><br><span class=\"line\"><span class=\"comment\">String _classification;\t//分类\t\t1</span></span><br><span class=\"line\"><span class=\"comment\">String _title;\t\t//标题     \t\t2 </span></span><br><span class=\"line\"><span class=\"comment\">String _list;\t\t//文章目录\t3\t如有多项，##分割</span></span><br><span class=\"line\"><span class=\"comment\">String _summary;\t\t//简介   \t\t4</span></span><br><span class=\"line\"><span class=\"comment\">String _keyword;\t\t//关键字\t\t5\t如有多项，##分割</span></span><br><span class=\"line\"><span class=\"comment\">String _content;\t\t//内容\t\t6\t不同目录下文章内容用##分割，换行：&lt;p&gt;...&lt;/p&gt;，空格:&amp;nbsp</span></span><br><span class=\"line\"><span class=\"comment\">String _imgURL;\t\t//图片链接\t7</span></span><br><span class=\"line\"><span class=\"comment\">String _videoURL;\t//视频链接\t8</span></span><br><span class=\"line\"><span class=\"comment\">String _other;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryHTMLBuilder</span> </span>&#123;</span><br><span class=\"line\">\tString HTMLModlePath = <span class=\"keyword\">null</span>;<span class=\"comment\">//需要一个原始的模板html路径和名称</span></span><br><span class=\"line\">\tString HTMLModelName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tList&lt;Article&gt; articleList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LibraryHTMLBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tHTMLModlePath = PathUtil.Util_HTMLpath;</span><br><span class=\"line\">\t\tarticleList = <span class=\"keyword\">new</span> ArticleDAO().findAll();<span class=\"comment\">//数据库操作，查找所有内容</span></span><br><span class=\"line\">\t\tHTMLModelName = PathUtil.Util_HTMLModelName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tString[] dataMes = <span class=\"keyword\">new</span> String[<span class=\"number\">9</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetHTMLModel</span><span class=\"params\">(String ModelPath, String ModeName)</span> </span>&#123;</span><br><span class=\"line\">\t\tHTMLModlePath = ModelPath;</span><br><span class=\"line\">\t\tHTMLModelName = ModeName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文章信息，提取数据库文件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateAllHTML</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;SetArticle();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;e.printStackTrace();&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置每一条文章</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetArticle</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 此处的每个都加i只是为了区别是不同的元组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> articleNum = articleList.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; articleNum; i++) &#123;</span><br><span class=\"line\">\t\t\tArticle now = articleList.get(i);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* article content format */</span></span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">0</span>] = now.getArticleId().toString();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">1</span>] = now.getClassification();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">2</span>] = now.getTitle();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">3</span>] = now.getList();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">4</span>] = now.getSummary();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">5</span>] = now.getKeyword();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">6</span>] = now.getContent();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">7</span>] = now.getImgUrl();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// dataMes[8] = now.getVideoUrl();</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每设置好一个元组，便生成Html</span></span><br><span class=\"line\">\t\t\tCreateHTML();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* 开始创建html */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetHtmlContent</span><span class=\"params\">(String ModelPath, String NewPath)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(ModelPath);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(file, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// point1:set title</span></span><br><span class=\"line\">\t\tElement elmt = doc.getElementById(<span class=\"string\">\"title_h1\"</span>);<span class=\"comment\">// title</span></span><br><span class=\"line\">\t\telmt.html(dataMes[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">// point2:set list</span></span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"list\"</span>);</span><br><span class=\"line\">\t\tString[] airticlList = dataMes[<span class=\"number\">3</span>].split(<span class=\"string\">\"##\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> listLen = airticlList.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; listLen; i++) &#123;</span><br><span class=\"line\">\t\t\tString html = <span class=\"string\">\"&lt;li&gt;&lt;a href=\\\"#\"</span> + (<span class=\"string\">\"info_title\"</span> + i) + <span class=\"string\">\"\\\"&gt;\"</span> + airticlList[i] + <span class=\"string\">\"&lt;/a&gt;&lt;li&gt;\"</span>;</span><br><span class=\"line\">\t\t\telmt.append(html);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// point3: set description 简介</span></span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"summary\"</span>);</span><br><span class=\"line\">\t\telmt.html(dataMes[<span class=\"number\">4</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">// point4:set articles</span></span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"article_div\"</span>);</span><br><span class=\"line\">\t\tString[] articles = dataMes[<span class=\"number\">6</span>].split(<span class=\"string\">\"##\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> minLen = Math.min(airticlList.length, articles.length);</span><br><span class=\"line\">\t\t<span class=\"comment\">// int articleLen = articles.length;//listLen和articlelen应该是相等的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; minLen; i++) &#123;</span><br><span class=\"line\">\t\t\tString html = <span class=\"string\">\"&lt;div&gt;&lt;h1 id=\\\"info_title\"</span> + i + <span class=\"string\">\"\\\"&gt;\"</span> + airticlList[i] + <span class=\"string\">\"&lt;/h1&gt;\"</span> + articles[i] + <span class=\"string\">\"&lt;/div&gt;\"</span>;</span><br><span class=\"line\">\t\t\telmt.append(html);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// set pictures</span></span><br><span class=\"line\">\t\tString imgTag = <span class=\"string\">\"&lt;img src=\"</span>+ PathUtil.Lib_PictureURL + dataMes[<span class=\"number\">7</span>] + <span class=\"string\">\"\\\" width=\\\"100%\\\" height=\\\"100%\\\"&gt;\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(imgTag);</span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"header_right\"</span>);</span><br><span class=\"line\">\t\telmt.append(imgTag);</span><br><span class=\"line\">\t\t<span class=\"comment\">// set finished</span></span><br><span class=\"line\">\t\tfile = <span class=\"keyword\">new</span> File(NewPath);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (file.exists())</span><br><span class=\"line\">\t\t\tfile.delete();</span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(NewPath, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tOutputStreamWriter osw = <span class=\"keyword\">new</span> OutputStreamWriter(fos, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tosw.write(doc.html());</span><br><span class=\"line\">\t\tosw.flush();</span><br><span class=\"line\">\t\tosw.close();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// fos.write(doc.html().getBytes());这种会乱码</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// fos.close();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateHTML</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// step1 build path 制作路径</span></span><br><span class=\"line\">\t\tString ModelPath = HTMLModlePath + <span class=\"string\">\"/\"</span> + HTMLModelName; <span class=\"comment\">// 模板文件完整路径</span></span><br><span class=\"line\">\t\tString NewPath = HTMLModlePath + <span class=\"string\">\"/\"</span> + dataMes[<span class=\"number\">0</span>] + <span class=\"string\">\".html\"</span>;<span class=\"comment\">// 新建文件完整路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(ModelPath);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// step2 set html and setp3 write html 解析html并设置新值，写出html</span></span><br><span class=\"line\">\t\tSetHtmlContent(ModelPath, NewPath);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// public static void main(String[] args) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// LibraryHTMLBuilder lhb = new LibraryHTMLBuilder();</span></span><br><span class=\"line\">\t<span class=\"comment\">// lhb.CreateAllHTML();</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、自己写的模糊查询，很普遍了，由于中文的关系，数据库连接时的字符串需要注意一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//db.properties</span></span><br><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql:<span class=\"comment\">//127.0.0.1:3306/databases?characterEncoding=utf-8</span></span><br><span class=\"line\">username=xxx</span><br><span class=\"line\">password=xxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSetMetaData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.LogManager;</span><br><span class=\"line\"><span class=\"comment\">//仅连接部分，下面还有一些</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123; <span class=\"comment\">// Class.forName(DRIVER_CLASS_NAME);</span></span><br><span class=\"line\">\t\t\tProperties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tInputStream in = DBHelper.class.getClassLoader()</span><br><span class=\"line\">\t\t\t\t\t.getResourceAsStream(<span class=\"string\">\"db.properties\"</span>);</span><br><span class=\"line\">\t\t\tprops.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用连接池技术，数据源DBCP</span></span><br><span class=\"line\">\t\t\tdataSource = BasicDataSourceFactory.createDataSource(props);</span><br><span class=\"line\">\t\t\tLogManager.getLogger().debug(<span class=\"string\">\"加载数据库属性元素构建数据源成功\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tLogManager.getLogger().error(<span class=\"string\">\"加载数据库属性元素构建数据源失败\"</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection con = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tcon = dataSource.getConnection();</span><br><span class=\"line\">\t\t\tLogManager.getLogger().debug(<span class=\"string\">\"数据库连接成功\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tLogManager.getLogger().error(<span class=\"string\">\"数据库连接失败\"</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> con;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.geowind.hunong.util.PathUtil.ServerIP;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.entity.ArticleSim;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelperSim</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// other</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ArticleSim&gt; <span class=\"title\">sqlExecute</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;ArticleSim&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tConnection conn = DBHelper.getConn();</span><br><span class=\"line\">\t\t\tStatement stmt = conn.createStatement(); <span class=\"comment\">// 创建Statement对象</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(\"成功连接到数据库！\");</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(sql);</span></span><br><span class=\"line\">\t\t\tResultSet rs = stmt.executeQuery(sql);<span class=\"comment\">// 创建数据对象</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tString id = rs.getString(<span class=\"string\">\"articleId\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// System.out.println(id_list.size());</span></span><br><span class=\"line\">\t\t\t\tString title = rs.getString(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\t\t\t\tString url = <span class=\"string\">\"http://\"</span> + ServerIP + <span class=\"string\">\":8080/MutualAgriculture/LibraryHTML/\"</span> + id + <span class=\"string\">\".html\"</span>;</span><br><span class=\"line\">\t\t\t\tString summary = rs.getString(<span class=\"string\">\"summary\"</span>);</span><br><span class=\"line\">\t\t\t\tres.add(<span class=\"keyword\">new</span> ArticleSim(id, title, summary, url));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\trs.close();</span><br><span class=\"line\">\t\t\tstmt.close();</span><br><span class=\"line\">\t\t\tconn.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;ArticleSim&gt; <span class=\"title\">GetArticleSimUseSql</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sqlExecute(sql);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// public static void main(String[] args) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// List&lt;String&gt; list = GetIdBykeyword(\"我是\",\"select * from article where</span></span><br><span class=\"line\">\t<span class=\"comment\">// keyword like '\" + \"%我是关键字\" + \"'\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// System.out.println(list.get(0));</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、最后应该是Servlet和一些工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.geowind.hunong.util.PathUtil.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.entity.ArticleSim;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.util.DBHelperSim;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.util.LibraryKeywordSearch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Servlet implementation class LibraryServlet</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tString method = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tmethod = request.getParameter(<span class=\"string\">\"method\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"serchLib\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tSearchMethod(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"getArticles\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tGetArticlesMethod(request, response);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SearchMethod</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tString keyword = request.getParameter(<span class=\"string\">\"keyword\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"library serlvet op=\"</span> + keyword);</span><br><span class=\"line\">\t\t<span class=\"comment\">// String keyword = request.getParameter(\"keyword\");</span></span><br><span class=\"line\">\t\tList&lt;ArticleSim&gt; ArticleMeg = LibraryKeywordSearch.GetMatchArticlesURL(keyword);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ArticleMeg.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tArticleSim now = ArticleMeg.get(i);</span><br><span class=\"line\">\t\t\tnow.url = <span class=\"string\">\"http://\"</span> + ServerIP + <span class=\"string\">\":8080/MutualAgriculture/LibraryHTML/\"</span> + now.id + <span class=\"string\">\".html\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"IP=\"+ServerIP);</span></span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tGson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">\t\tString msg = gson.toJson(ArticleMeg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tout.print(msg);</span><br><span class=\"line\">\t\tout.flush();</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//辅助搜索，由于在分页搜索按条件搜索时可能会出现或不足的情况，需要向后延续。</span></span><br><span class=\"line\">\t<span class=\"comment\">//记录当前向后延续到了哪里,并从那里继续往下查找</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> [] beginOfSearch = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isFirstGet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">GetArticlesMethod</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tString category = request.getParameter(<span class=\"string\">\"category\"</span>);</span><br><span class=\"line\">\t\tString nowPage = request.getParameter(<span class=\"string\">\"nowPage\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 10001 10010</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> type = Integer.parseInt(category); <span class=\"comment\">//需要查的文章类别</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> pagN = Integer.parseInt(nowPage);  <span class=\"comment\">//当前分页数目</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果当前分页是第一页（即第0页),对当前类别给定初始值。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFirstGet) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">9</span>;i++) beginOfSearch[i] = ArticleBeginId;</span><br><span class=\"line\">\t\t\tisFirstGet = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pagN == TabBegin)&#123;</span><br><span class=\"line\">\t\t\tbeginOfSearch[type] = ArticleBeginId;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;ArticleSim&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(res.size()&lt;APageOfTable_N &amp;&amp; beginOfSearch[type]&lt;=ArticleEndId)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> begin_page = beginOfSearch[type];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> end_page = begin_page+(APageOfTable_N-res.size()) - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tbeginOfSearch[type] = end_page + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from article \"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (category.equals(<span class=\"string\">\"0\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tsql += <span class=\"string\">\"where articleId between \"</span> + begin_page + <span class=\"string\">\" and \"</span> + end_page;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tsql += <span class=\"string\">\"where classification like '%\"</span> + category + <span class=\"string\">\"%' and articleId between \"</span> + begin_page + <span class=\"string\">\" and \"</span></span><br><span class=\"line\">\t\t\t\t\t\t+ end_page;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tres.addAll(DBHelperSim.GetArticleSimUseSql(sql));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tGson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">\t\tString msg = gson.toJson(res);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tout.print(msg);</span><br><span class=\"line\">\t\tout.flush();</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PathUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Util_HTMLpath = <span class=\"string\">\"LibraryHTML\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Util_HTMLModelName = <span class=\"string\">\"library.html\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Lib_PictureURL = <span class=\"string\">\"/images/\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String ServerIP = <span class=\"string\">\"115.159.125.122\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ArticleNumber = <span class=\"number\">0</span>;<span class=\"comment\">//文章总条数</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ArticleBeginId = <span class=\"number\">0</span>; <span class=\"comment\">//文库开始编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ArticleEndId = <span class=\"number\">0</span>; <span class=\"comment\">//文库开始编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> TabBegin = <span class=\"number\">0</span>;<span class=\"comment\">//分页从第几页开始</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> APageOfTable_N = <span class=\"number\">10</span>;<span class=\"comment\">//一页显示10条目录</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充一点，如果在java web想要在项目刚启动时处理某些东西，可以在xml中如下配置，并写一个initServlet。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">\t&lt;servlet-name&gt;InitServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t&lt;servlet-class&gt;com.geowind.hunong.servlet.InitServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">\t初始化变量xx为haha</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">\t\t&lt;param-name&gt;xx&lt;/param-name&gt;</span><br><span class=\"line\">\t\t&lt;param-value&gt;haha&lt;/param-value&gt;</span><br><span class=\"line\">\t&lt;/init-param&gt;</span><br><span class=\"line\">        启动优先级 0 最大</span><br><span class=\"line\">\t&lt;load-on-startup&gt;0&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这次收获还不小，只是发现自己不太喜欢做这种繁琐的事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>近期有在忙一个Java项目，里面的文库部分，大概写完了，总结了以下几点，并附上代码。</p>\n<p>这是一个android访问，文章内容用webview（html访问）就可以了的项目。</p>\n<p>1、利用jsoup可将数据库中的文章创建成多份.html文件，注意点在于mysql中的编码格式和输出到文件时要注意输出流格式。以下是代码，主要用到jsoup包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Element;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.jpa.Article;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.jpa.ArticleDAO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//Library data</span></span><br><span class=\"line\"><span class=\"comment\">//文库数据预览</span></span><br><span class=\"line\"><span class=\"comment\">String _articleId; \t//ID\t\t0</span></span><br><span class=\"line\"><span class=\"comment\">String _classification;\t//分类\t\t1</span></span><br><span class=\"line\"><span class=\"comment\">String _title;\t\t//标题     \t\t2 </span></span><br><span class=\"line\"><span class=\"comment\">String _list;\t\t//文章目录\t3\t如有多项，##分割</span></span><br><span class=\"line\"><span class=\"comment\">String _summary;\t\t//简介   \t\t4</span></span><br><span class=\"line\"><span class=\"comment\">String _keyword;\t\t//关键字\t\t5\t如有多项，##分割</span></span><br><span class=\"line\"><span class=\"comment\">String _content;\t\t//内容\t\t6\t不同目录下文章内容用##分割，换行：&lt;p&gt;...&lt;/p&gt;，空格:&amp;nbsp</span></span><br><span class=\"line\"><span class=\"comment\">String _imgURL;\t\t//图片链接\t7</span></span><br><span class=\"line\"><span class=\"comment\">String _videoURL;\t//视频链接\t8</span></span><br><span class=\"line\"><span class=\"comment\">String _other;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryHTMLBuilder</span> </span>&#123;</span><br><span class=\"line\">\tString HTMLModlePath = <span class=\"keyword\">null</span>;<span class=\"comment\">//需要一个原始的模板html路径和名称</span></span><br><span class=\"line\">\tString HTMLModelName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tList&lt;Article&gt; articleList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LibraryHTMLBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tHTMLModlePath = PathUtil.Util_HTMLpath;</span><br><span class=\"line\">\t\tarticleList = <span class=\"keyword\">new</span> ArticleDAO().findAll();<span class=\"comment\">//数据库操作，查找所有内容</span></span><br><span class=\"line\">\t\tHTMLModelName = PathUtil.Util_HTMLModelName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tString[] dataMes = <span class=\"keyword\">new</span> String[<span class=\"number\">9</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetHTMLModel</span><span class=\"params\">(String ModelPath, String ModeName)</span> </span>&#123;</span><br><span class=\"line\">\t\tHTMLModlePath = ModelPath;</span><br><span class=\"line\">\t\tHTMLModelName = ModeName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文章信息，提取数据库文件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateAllHTML</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;SetArticle();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;e.printStackTrace();&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置每一条文章</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetArticle</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 此处的每个都加i只是为了区别是不同的元组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> articleNum = articleList.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; articleNum; i++) &#123;</span><br><span class=\"line\">\t\t\tArticle now = articleList.get(i);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* article content format */</span></span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">0</span>] = now.getArticleId().toString();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">1</span>] = now.getClassification();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">2</span>] = now.getTitle();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">3</span>] = now.getList();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">4</span>] = now.getSummary();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">5</span>] = now.getKeyword();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">6</span>] = now.getContent();</span><br><span class=\"line\">\t\t\tdataMes[<span class=\"number\">7</span>] = now.getImgUrl();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// dataMes[8] = now.getVideoUrl();</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每设置好一个元组，便生成Html</span></span><br><span class=\"line\">\t\t\tCreateHTML();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* 开始创建html */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetHtmlContent</span><span class=\"params\">(String ModelPath, String NewPath)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tFile file = <span class=\"keyword\">new</span> File(ModelPath);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDocument doc = Jsoup.parse(file, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// point1:set title</span></span><br><span class=\"line\">\t\tElement elmt = doc.getElementById(<span class=\"string\">\"title_h1\"</span>);<span class=\"comment\">// title</span></span><br><span class=\"line\">\t\telmt.html(dataMes[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">// point2:set list</span></span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"list\"</span>);</span><br><span class=\"line\">\t\tString[] airticlList = dataMes[<span class=\"number\">3</span>].split(<span class=\"string\">\"##\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> listLen = airticlList.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; listLen; i++) &#123;</span><br><span class=\"line\">\t\t\tString html = <span class=\"string\">\"&lt;li&gt;&lt;a href=\\\"#\"</span> + (<span class=\"string\">\"info_title\"</span> + i) + <span class=\"string\">\"\\\"&gt;\"</span> + airticlList[i] + <span class=\"string\">\"&lt;/a&gt;&lt;li&gt;\"</span>;</span><br><span class=\"line\">\t\t\telmt.append(html);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// point3: set description 简介</span></span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"summary\"</span>);</span><br><span class=\"line\">\t\telmt.html(dataMes[<span class=\"number\">4</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">// point4:set articles</span></span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"article_div\"</span>);</span><br><span class=\"line\">\t\tString[] articles = dataMes[<span class=\"number\">6</span>].split(<span class=\"string\">\"##\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> minLen = Math.min(airticlList.length, articles.length);</span><br><span class=\"line\">\t\t<span class=\"comment\">// int articleLen = articles.length;//listLen和articlelen应该是相等的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; minLen; i++) &#123;</span><br><span class=\"line\">\t\t\tString html = <span class=\"string\">\"&lt;div&gt;&lt;h1 id=\\\"info_title\"</span> + i + <span class=\"string\">\"\\\"&gt;\"</span> + airticlList[i] + <span class=\"string\">\"&lt;/h1&gt;\"</span> + articles[i] + <span class=\"string\">\"&lt;/div&gt;\"</span>;</span><br><span class=\"line\">\t\t\telmt.append(html);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// set pictures</span></span><br><span class=\"line\">\t\tString imgTag = <span class=\"string\">\"&lt;img src=\"</span>+ PathUtil.Lib_PictureURL + dataMes[<span class=\"number\">7</span>] + <span class=\"string\">\"\\\" width=\\\"100%\\\" height=\\\"100%\\\"&gt;\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(imgTag);</span><br><span class=\"line\">\t\telmt = doc.getElementById(<span class=\"string\">\"header_right\"</span>);</span><br><span class=\"line\">\t\telmt.append(imgTag);</span><br><span class=\"line\">\t\t<span class=\"comment\">// set finished</span></span><br><span class=\"line\">\t\tfile = <span class=\"keyword\">new</span> File(NewPath);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (file.exists())</span><br><span class=\"line\">\t\t\tfile.delete();</span><br><span class=\"line\">\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(NewPath, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tOutputStreamWriter osw = <span class=\"keyword\">new</span> OutputStreamWriter(fos, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tosw.write(doc.html());</span><br><span class=\"line\">\t\tosw.flush();</span><br><span class=\"line\">\t\tosw.close();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// fos.write(doc.html().getBytes());这种会乱码</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// fos.close();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateHTML</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// step1 build path 制作路径</span></span><br><span class=\"line\">\t\tString ModelPath = HTMLModlePath + <span class=\"string\">\"/\"</span> + HTMLModelName; <span class=\"comment\">// 模板文件完整路径</span></span><br><span class=\"line\">\t\tString NewPath = HTMLModlePath + <span class=\"string\">\"/\"</span> + dataMes[<span class=\"number\">0</span>] + <span class=\"string\">\".html\"</span>;<span class=\"comment\">// 新建文件完整路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(ModelPath);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// step2 set html and setp3 write html 解析html并设置新值，写出html</span></span><br><span class=\"line\">\t\tSetHtmlContent(ModelPath, NewPath);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// public static void main(String[] args) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// LibraryHTMLBuilder lhb = new LibraryHTMLBuilder();</span></span><br><span class=\"line\">\t<span class=\"comment\">// lhb.CreateAllHTML();</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、自己写的模糊查询，很普遍了，由于中文的关系，数据库连接时的字符串需要注意一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//db.properties</span></span><br><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql:<span class=\"comment\">//127.0.0.1:3306/databases?characterEncoding=utf-8</span></span><br><span class=\"line\">username=xxx</span><br><span class=\"line\">password=xxx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSetMetaData;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.LogManager;</span><br><span class=\"line\"><span class=\"comment\">//仅连接部分，下面还有一些</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123; <span class=\"comment\">// Class.forName(DRIVER_CLASS_NAME);</span></span><br><span class=\"line\">\t\t\tProperties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tInputStream in = DBHelper.class.getClassLoader()</span><br><span class=\"line\">\t\t\t\t\t.getResourceAsStream(<span class=\"string\">\"db.properties\"</span>);</span><br><span class=\"line\">\t\t\tprops.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用连接池技术，数据源DBCP</span></span><br><span class=\"line\">\t\t\tdataSource = BasicDataSourceFactory.createDataSource(props);</span><br><span class=\"line\">\t\t\tLogManager.getLogger().debug(<span class=\"string\">\"加载数据库属性元素构建数据源成功\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tLogManager.getLogger().error(<span class=\"string\">\"加载数据库属性元素构建数据源失败\"</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection con = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tcon = dataSource.getConnection();</span><br><span class=\"line\">\t\t\tLogManager.getLogger().debug(<span class=\"string\">\"数据库连接成功\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tLogManager.getLogger().error(<span class=\"string\">\"数据库连接失败\"</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> con;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.geowind.hunong.util.PathUtil.ServerIP;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.entity.ArticleSim;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHelperSim</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// other</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;ArticleSim&gt; <span class=\"title\">sqlExecute</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;ArticleSim&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tConnection conn = DBHelper.getConn();</span><br><span class=\"line\">\t\t\tStatement stmt = conn.createStatement(); <span class=\"comment\">// 创建Statement对象</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(\"成功连接到数据库！\");</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(sql);</span></span><br><span class=\"line\">\t\t\tResultSet rs = stmt.executeQuery(sql);<span class=\"comment\">// 创建数据对象</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tString id = rs.getString(<span class=\"string\">\"articleId\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// System.out.println(id_list.size());</span></span><br><span class=\"line\">\t\t\t\tString title = rs.getString(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">\t\t\t\tString url = <span class=\"string\">\"http://\"</span> + ServerIP + <span class=\"string\">\":8080/MutualAgriculture/LibraryHTML/\"</span> + id + <span class=\"string\">\".html\"</span>;</span><br><span class=\"line\">\t\t\t\tString summary = rs.getString(<span class=\"string\">\"summary\"</span>);</span><br><span class=\"line\">\t\t\t\tres.add(<span class=\"keyword\">new</span> ArticleSim(id, title, summary, url));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\trs.close();</span><br><span class=\"line\">\t\t\tstmt.close();</span><br><span class=\"line\">\t\t\tconn.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;ArticleSim&gt; <span class=\"title\">GetArticleSimUseSql</span><span class=\"params\">(String sql)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sqlExecute(sql);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// public static void main(String[] args) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// List&lt;String&gt; list = GetIdBykeyword(\"我是\",\"select * from article where</span></span><br><span class=\"line\">\t<span class=\"comment\">// keyword like '\" + \"%我是关键字\" + \"'\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// System.out.println(list.get(0));</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、最后应该是Servlet和一些工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.geowind.hunong.util.PathUtil.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.entity.ArticleSim;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.util.DBHelperSim;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geowind.hunong.util.LibraryKeywordSearch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Servlet implementation class LibraryServlet</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LibraryServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tString method = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tmethod = request.getParameter(<span class=\"string\">\"method\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"serchLib\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tSearchMethod(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"getArticles\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tGetArticlesMethod(request, response);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SearchMethod</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tString keyword = request.getParameter(<span class=\"string\">\"keyword\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"library serlvet op=\"</span> + keyword);</span><br><span class=\"line\">\t\t<span class=\"comment\">// String keyword = request.getParameter(\"keyword\");</span></span><br><span class=\"line\">\t\tList&lt;ArticleSim&gt; ArticleMeg = LibraryKeywordSearch.GetMatchArticlesURL(keyword);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ArticleMeg.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tArticleSim now = ArticleMeg.get(i);</span><br><span class=\"line\">\t\t\tnow.url = <span class=\"string\">\"http://\"</span> + ServerIP + <span class=\"string\">\":8080/MutualAgriculture/LibraryHTML/\"</span> + now.id + <span class=\"string\">\".html\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"IP=\"+ServerIP);</span></span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tGson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">\t\tString msg = gson.toJson(ArticleMeg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tout.print(msg);</span><br><span class=\"line\">\t\tout.flush();</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//辅助搜索，由于在分页搜索按条件搜索时可能会出现或不足的情况，需要向后延续。</span></span><br><span class=\"line\">\t<span class=\"comment\">//记录当前向后延续到了哪里,并从那里继续往下查找</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> [] beginOfSearch = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isFirstGet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">GetArticlesMethod</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tString category = request.getParameter(<span class=\"string\">\"category\"</span>);</span><br><span class=\"line\">\t\tString nowPage = request.getParameter(<span class=\"string\">\"nowPage\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 10001 10010</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> type = Integer.parseInt(category); <span class=\"comment\">//需要查的文章类别</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> pagN = Integer.parseInt(nowPage);  <span class=\"comment\">//当前分页数目</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果当前分页是第一页（即第0页),对当前类别给定初始值。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFirstGet) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">9</span>;i++) beginOfSearch[i] = ArticleBeginId;</span><br><span class=\"line\">\t\t\tisFirstGet = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pagN == TabBegin)&#123;</span><br><span class=\"line\">\t\t\tbeginOfSearch[type] = ArticleBeginId;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;ArticleSim&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(res.size()&lt;APageOfTable_N &amp;&amp; beginOfSearch[type]&lt;=ArticleEndId)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> begin_page = beginOfSearch[type];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> end_page = begin_page+(APageOfTable_N-res.size()) - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tbeginOfSearch[type] = end_page + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from article \"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (category.equals(<span class=\"string\">\"0\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tsql += <span class=\"string\">\"where articleId between \"</span> + begin_page + <span class=\"string\">\" and \"</span> + end_page;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tsql += <span class=\"string\">\"where classification like '%\"</span> + category + <span class=\"string\">\"%' and articleId between \"</span> + begin_page + <span class=\"string\">\" and \"</span></span><br><span class=\"line\">\t\t\t\t\t\t+ end_page;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tres.addAll(DBHelperSim.GetArticleSimUseSql(sql));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPrintWriter out = response.getWriter();</span><br><span class=\"line\">\t\tGson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">\t\tString msg = gson.toJson(res);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tout.print(msg);</span><br><span class=\"line\">\t\tout.flush();</span><br><span class=\"line\">\t\tout.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PathUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Util_HTMLpath = <span class=\"string\">\"LibraryHTML\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Util_HTMLModelName = <span class=\"string\">\"library.html\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String Lib_PictureURL = <span class=\"string\">\"/images/\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String ServerIP = <span class=\"string\">\"115.159.125.122\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ArticleNumber = <span class=\"number\">0</span>;<span class=\"comment\">//文章总条数</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ArticleBeginId = <span class=\"number\">0</span>; <span class=\"comment\">//文库开始编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ArticleEndId = <span class=\"number\">0</span>; <span class=\"comment\">//文库开始编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> TabBegin = <span class=\"number\">0</span>;<span class=\"comment\">//分页从第几页开始</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> APageOfTable_N = <span class=\"number\">10</span>;<span class=\"comment\">//一页显示10条目录</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充一点，如果在java web想要在项目刚启动时处理某些东西，可以在xml中如下配置，并写一个initServlet。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">\t&lt;servlet-name&gt;InitServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t&lt;servlet-class&gt;com.geowind.hunong.servlet.InitServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">\t初始化变量xx为haha</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">\t\t&lt;param-name&gt;xx&lt;/param-name&gt;</span><br><span class=\"line\">\t\t&lt;param-value&gt;haha&lt;/param-value&gt;</span><br><span class=\"line\">\t&lt;/init-param&gt;</span><br><span class=\"line\">        启动优先级 0 最大</span><br><span class=\"line\">\t&lt;load-on-startup&gt;0&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这次收获还不小，只是发现自己不太喜欢做这种繁琐的事。</p>\n"},{"title":"再谈字典树：HDOJ 1671 Phone List（内存释放）","date":"2015-07-24T11:42:50.000Z","_content":"\n前两天刚发了篇博客，讲的是两道简单的字典树，今天无意间看到了这道题，我觉得有必要再来扩充一下我的字典树知识：合理分配动态内存。记得上C++课的时候，老师讲过，用new创建的指针，程序结束后最好都用delete来删除动态内存，不然会造成内存泄露。然而以前做的题虽然内存开的很大，也没在意。看了今天这道，自己也反思了下，像很多网友说的，不要为了AC而AC，虽然说的很那啥，但这确实是值得我思考的。\n\n看一下题吧：\nhttp://acm.hdu.edu.cn/showproblem.php?pid=1671\n\n题意：给你一组电话，如果里面有一些短的号码（设整个号码为i）和长一点的号码的前i个数字相同，那么电话机会自动拨打那个短号码，所以你就不能往下按了。就是你不能拨打那个长号码了。如果有这种短号码，即不能拨打某个号码，输出NO，否则输出YES；\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \nusing namespace std;  \n  \nstruct Trie{  \n    Trie *next[11];  \n    bool boom;  \n    Trie(){  \n        for(int i=0;i<11;i++)  \n            next[i]=NULL;  \n        boom=true;  \n    }  \n};  \n  \nbool flag=true;  \n  \nvoid buildAndSearch(char s[],Trie *root){  \n    Trie *now=root;  \n    int len=strlen(s);  \n    for(int i=0;i<len;i++){  \n        if(now->next[s[i]-'0']==NULL)  \n            now->next[s[i]-'0']=new Trie;  \n        else{  \n            if((now->next[s[i]-'0'])->boom==false){  \n                flag=false; break;  \n            }  \n        }  \n        now=now->next[s[i]-'0'];  \n    }  \n    now->boom=false;  \n  \n    for(int i=0;i<11;i++){  \n        if(now->next[i]!=NULL){  \n            flag=false;return;  \n        }  \n    }  \n}  \nvoid freeDom(Trie *now){  \n    for(int i=0;i<11;i++){  \n        if(now->next[i]!=NULL) freeDom(now->next[i]);  \n    }  \n    delete now;  \n}  \nint main()  \n{  \n    int T;  \n    scanf(\"%d\",&T);//scanf(\"\\n\");  \n    while(T--){  \n        flag=true;  \n        Trie *root=new Trie;  \n        int N;  \n        scanf(\"%d\",&N);scanf(\"\\n\");  \n        char pn[11];  \n        while(N--){  \n            scanf(\"%s\",pn);  \n            buildAndSearch(pn,root);  \n        }  \n        if(flag) printf(\"YES\\n\");  \n        else printf(\"NO\\n\");  \n        freeDom(root);  \n    }  \n    return 0;  \n}  \n```\n注意911(先)   91125426(后) 和 91125426(先)   911(后)，输入循序不同要都考虑进去。当然，若是使用那种建树与查询分开的做法，好像是不用讨论的，具体我没试过，最后记得将每次的动态内存删除。","source":"_posts/再谈字典树：HDOJ 1671 Phone List（内存释放）.md","raw":"---\ntitle: 再谈字典树：HDOJ 1671 Phone List（内存释放）\ndate: 2015-07-24 19:42:50\ntags: \"ACM&OJ\"\n---\n\n前两天刚发了篇博客，讲的是两道简单的字典树，今天无意间看到了这道题，我觉得有必要再来扩充一下我的字典树知识：合理分配动态内存。记得上C++课的时候，老师讲过，用new创建的指针，程序结束后最好都用delete来删除动态内存，不然会造成内存泄露。然而以前做的题虽然内存开的很大，也没在意。看了今天这道，自己也反思了下，像很多网友说的，不要为了AC而AC，虽然说的很那啥，但这确实是值得我思考的。\n\n看一下题吧：\nhttp://acm.hdu.edu.cn/showproblem.php?pid=1671\n\n题意：给你一组电话，如果里面有一些短的号码（设整个号码为i）和长一点的号码的前i个数字相同，那么电话机会自动拨打那个短号码，所以你就不能往下按了。就是你不能拨打那个长号码了。如果有这种短号码，即不能拨打某个号码，输出NO，否则输出YES；\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \nusing namespace std;  \n  \nstruct Trie{  \n    Trie *next[11];  \n    bool boom;  \n    Trie(){  \n        for(int i=0;i<11;i++)  \n            next[i]=NULL;  \n        boom=true;  \n    }  \n};  \n  \nbool flag=true;  \n  \nvoid buildAndSearch(char s[],Trie *root){  \n    Trie *now=root;  \n    int len=strlen(s);  \n    for(int i=0;i<len;i++){  \n        if(now->next[s[i]-'0']==NULL)  \n            now->next[s[i]-'0']=new Trie;  \n        else{  \n            if((now->next[s[i]-'0'])->boom==false){  \n                flag=false; break;  \n            }  \n        }  \n        now=now->next[s[i]-'0'];  \n    }  \n    now->boom=false;  \n  \n    for(int i=0;i<11;i++){  \n        if(now->next[i]!=NULL){  \n            flag=false;return;  \n        }  \n    }  \n}  \nvoid freeDom(Trie *now){  \n    for(int i=0;i<11;i++){  \n        if(now->next[i]!=NULL) freeDom(now->next[i]);  \n    }  \n    delete now;  \n}  \nint main()  \n{  \n    int T;  \n    scanf(\"%d\",&T);//scanf(\"\\n\");  \n    while(T--){  \n        flag=true;  \n        Trie *root=new Trie;  \n        int N;  \n        scanf(\"%d\",&N);scanf(\"\\n\");  \n        char pn[11];  \n        while(N--){  \n            scanf(\"%s\",pn);  \n            buildAndSearch(pn,root);  \n        }  \n        if(flag) printf(\"YES\\n\");  \n        else printf(\"NO\\n\");  \n        freeDom(root);  \n    }  \n    return 0;  \n}  \n```\n注意911(先)   91125426(后) 和 91125426(先)   911(后)，输入循序不同要都考虑进去。当然，若是使用那种建树与查询分开的做法，好像是不用讨论的，具体我没试过，最后记得将每次的动态内存删除。","slug":"再谈字典树：HDOJ 1671 Phone List（内存释放）","published":1,"updated":"2018-01-09T02:55:55.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzul000eyg3ikhwya0qt","content":"<p>前两天刚发了篇博客，讲的是两道简单的字典树，今天无意间看到了这道题，我觉得有必要再来扩充一下我的字典树知识：合理分配动态内存。记得上C++课的时候，老师讲过，用new创建的指针，程序结束后最好都用delete来删除动态内存，不然会造成内存泄露。然而以前做的题虽然内存开的很大，也没在意。看了今天这道，自己也反思了下，像很多网友说的，不要为了AC而AC，虽然说的很那啥，但这确实是值得我思考的。</p>\n<p>看一下题吧：<br><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1671\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1671</a></p>\n<p>题意：给你一组电话，如果里面有一些短的号码（设整个号码为i）和长一点的号码的前i个数字相同，那么电话机会自动拨打那个短号码，所以你就不能往下按了。就是你不能拨打那个长号码了。如果有这种短号码，即不能拨打某个号码，输出NO，否则输出YES；<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>  </span><br><span class=\"line\">    Trie *next[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">bool</span> boom;  </span><br><span class=\"line\">    Trie()&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)  </span><br><span class=\"line\">            next[i]=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">        boom=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildAndSearch</span><span class=\"params\">(<span class=\"keyword\">char</span> s[],Trie *root)</span></span>&#123;  </span><br><span class=\"line\">    Trie *now=root;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(s);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[s[i]-<span class=\"string\">'0'</span>]==<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">            now-&gt;next[s[i]-<span class=\"string\">'0'</span>]=<span class=\"keyword\">new</span> Trie;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>((now-&gt;next[s[i]-<span class=\"string\">'0'</span>])-&gt;boom==<span class=\"literal\">false</span>)&#123;  </span><br><span class=\"line\">                flag=<span class=\"literal\">false</span>; <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        now=now-&gt;next[s[i]-<span class=\"string\">'0'</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    now-&gt;boom=<span class=\"literal\">false</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[i]!=<span class=\"literal\">NULL</span>)&#123;  </span><br><span class=\"line\">            flag=<span class=\"literal\">false</span>;<span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeDom</span><span class=\"params\">(Trie *now)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[i]!=<span class=\"literal\">NULL</span>) freeDom(now-&gt;next[i]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">delete</span> now;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);<span class=\"comment\">//scanf(\"\\n\");  </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;  </span><br><span class=\"line\">        flag=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">        Trie *root=<span class=\"keyword\">new</span> Trie;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> N;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);<span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> pn[<span class=\"number\">11</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(N--)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,pn);  </span><br><span class=\"line\">            buildAndSearch(pn,root);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);  </span><br><span class=\"line\">        freeDom(root);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意911(先)   91125426(后) 和 91125426(先)   911(后)，输入循序不同要都考虑进去。当然，若是使用那种建树与查询分开的做法，好像是不用讨论的，具体我没试过，最后记得将每次的动态内存删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天刚发了篇博客，讲的是两道简单的字典树，今天无意间看到了这道题，我觉得有必要再来扩充一下我的字典树知识：合理分配动态内存。记得上C++课的时候，老师讲过，用new创建的指针，程序结束后最好都用delete来删除动态内存，不然会造成内存泄露。然而以前做的题虽然内存开的很大，也没在意。看了今天这道，自己也反思了下，像很多网友说的，不要为了AC而AC，虽然说的很那啥，但这确实是值得我思考的。</p>\n<p>看一下题吧：<br><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1671\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1671</a></p>\n<p>题意：给你一组电话，如果里面有一些短的号码（设整个号码为i）和长一点的号码的前i个数字相同，那么电话机会自动拨打那个短号码，所以你就不能往下按了。就是你不能拨打那个长号码了。如果有这种短号码，即不能拨打某个号码，输出NO，否则输出YES；<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>  </span><br><span class=\"line\">    Trie *next[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">bool</span> boom;  </span><br><span class=\"line\">    Trie()&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)  </span><br><span class=\"line\">            next[i]=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">        boom=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildAndSearch</span><span class=\"params\">(<span class=\"keyword\">char</span> s[],Trie *root)</span></span>&#123;  </span><br><span class=\"line\">    Trie *now=root;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(s);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[s[i]-<span class=\"string\">'0'</span>]==<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">            now-&gt;next[s[i]-<span class=\"string\">'0'</span>]=<span class=\"keyword\">new</span> Trie;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>((now-&gt;next[s[i]-<span class=\"string\">'0'</span>])-&gt;boom==<span class=\"literal\">false</span>)&#123;  </span><br><span class=\"line\">                flag=<span class=\"literal\">false</span>; <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        now=now-&gt;next[s[i]-<span class=\"string\">'0'</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    now-&gt;boom=<span class=\"literal\">false</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[i]!=<span class=\"literal\">NULL</span>)&#123;  </span><br><span class=\"line\">            flag=<span class=\"literal\">false</span>;<span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeDom</span><span class=\"params\">(Trie *now)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[i]!=<span class=\"literal\">NULL</span>) freeDom(now-&gt;next[i]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">delete</span> now;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);<span class=\"comment\">//scanf(\"\\n\");  </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;  </span><br><span class=\"line\">        flag=<span class=\"literal\">true</span>;  </span><br><span class=\"line\">        Trie *root=<span class=\"keyword\">new</span> Trie;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> N;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);<span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> pn[<span class=\"number\">11</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(N--)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,pn);  </span><br><span class=\"line\">            buildAndSearch(pn,root);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);  </span><br><span class=\"line\">        freeDom(root);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意911(先)   91125426(后) 和 91125426(先)   911(后)，输入循序不同要都考虑进去。当然，若是使用那种建树与查询分开的做法，好像是不用讨论的，具体我没试过，最后记得将每次的动态内存删除。</p>\n"},{"title":"字典树例题介绍：ZOJ 1109,HDOJ 1075","date":"2015-07-24T02:58:25.000Z","_content":"\n关于字典树，相信还是比较好理解的吧，就是将一次输入中的一些单词，字符串建立成字典。将这些字符每一层存放一个字符，顺序往下查找，在该个字符串（找完该字符串的最后一个字符，即最后一个节点）末尾设置一个节点（一般是存放的东西，比如要翻译过来的单词啊什么的）。\n\n下面来分享两道典型的字典树题：\n\n1.ZOJ 1109 Language of FatMouse：http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1109\n\n大概题意:FatMouse只会说鼠语，但是为了迎接WTO的热潮，它想学好英语，所以就搞了个类似小抄的东西。输入英语语言和鼠语，要求我们将鼠语言翻译英语输出。\n\n这是单词的翻译，属于简单的字典树。只要将鼠语见成字典树，对应的英语单词作为节点放在鼠语结束的末尾，每次翻译是查找字典树即可。\n\n```C\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#include <string>  \nusing namespace std;  \n  \nchar fwords[11];  \nstruct Trie{  \n    Trie *next[26];     //建树，每一层都有26个小写的英文单词（管它用不用呢，万一要全用），如果加入大写和数字，那就要开的更大了  \n    char eword[11];     //用来储存英语（要存在节点出的，同样，管他用不用呢。  \n  \n    Trie(){             //树的初始化  \n        for(int i=0;i<26;i++)  \n            next[i]=NULL;  \n        eword[0]='\\0';  \n    }  \n};  \nTrie root;                          //这里是树根，从此开始往下建树  \nvoid build(char ew[],char d[]){     //d是鼠语  \n    Trie *now=&root;                //每次建树都要从树根开始，看看初始鼠语字符是否存在  \n    int len=strlen(d);  \n    for(int i=0;i<len;i++){  \n        if(now->next[d[i]-'a']==NULL)   //如果没有，那就新往下建一个  \n            now->next[d[i]-'a']=new Trie;  \n        now=now->next[d[i]-'a'];        //有那就顺着这个节点往下摸  \n    }  \n    strcpy(now->eword,ew);  \n}  \nchar *TrieSearch(char str[]){  \n    Trie *p=&root;  \n    int len=strlen(str);  \n    int i;  \n    for(i=0;i<len&&p->next[str[i]-'a']!=NULL;i++)  \n        p=p->next[str[i]-'a'];  \n    if(i==len&&strlen(p->eword)!=0)  \n        return p->eword;  \n    return NULL;  \n  \n}  \nint main()  \n{  \n    char re[11],dic[11];  \n    char line[30];  \n    while(gets(line)){  \n        if(strlen(line) == 0)break;  \n        sscanf(line,\"%s%s\",re,dic);  \n        build(re,dic);  \n    }  \n    while(gets(line)){  \n        char *p=TrieSearch(line);  \n        if(p) printf(\"%s\\n\",p);  \n        else printf(\"eh\\n\");  \n    }  \n    return 0;  \n}  \n```\n\n接下来是个稍微变化了一下的字典树题目：\nDHOJ 1075hdoj What Are You Talking About：http://acm.hdu.edu.cn/showproblem.php?pid=1075\n\n题意：同样也是要翻译，但是这次输入有其他的各种符号，但是不用管它，最后的时候处理就好了，给出代码：\n```C\n//Trie  \n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#include <string>  \n#include <cctype>  \n  \nchar tmp[3000+10];  //后续输入  \n//树的结构体  \nstruct Trie{  \n    char ewards[11];  \n    Trie *next[26];  \n    Trie(){  \n        for(int i=0;i<26;i++)  \n            next[i]=NULL;  \n        ewards[0]='\\0';  \n    }  \n};  \nTrie root;          //建立字典树树根  \n//函数功能：建树并保存单词（即在单词结束时保存节点）  \nvoid build(char e[],char mar[]){  \n    Trie *now=&root;            //从树顶端开始建立  \n    int len=strlen(mar);  \n    for(int i=0;i<len;i++){     //mar是字典，直到将其全部非'\\0'字符历遍  \n        if(now->next[mar[i]-'a']==NULL)  \n            now->next[mar[i]-'a']=new Trie;//如果该字符未被保存过，那么建立新的节点  \n        now=now->next[mar[i]-'a'];  \n    }  \n    strcpy(now->ewards,e);  \n}  \n  \nchar *TrieSearch(char s[]){  \n    Trie *p =&root;  \n    int i;          // 下边还会用到  \n    for(i=0;s[i]!='\\0'&&p->next[s[i]-'a']!=NULL;i++)  \n        p=p->next[s[i]-'a'];            //符合要求那么就继续向下  \n    if(s[i]=='\\0'&&strlen(p->ewards)!=0)//s被历遍，且最后一个树点有节点标记（此处为有单词  \n        return p->ewards;  \n    return NULL;  \n}  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    char ear[11],mar[11];  \n    scanf(\"%s\",ear);  \n    while(scanf(\"%s\",ear)&&ear[0]!='E'){  \n        scanf(\"%s\",mar);  \n        build(ear,mar);  \n    }  \n    scanf(\"%s\",mar);scanf(\"\\n\");    //输入START，记得吞'\\n'  \n    memset(tmp,'\\0',sizeof(tmp));  \n    while(gets(tmp)!=NULL&&tmp[0]!='E'){  \n        int len=strlen(tmp);  \n        tmp[len]=' ';len++;  \n        char tp[3000+10];  \n        for(int i=0,k=0;i<len;i++){  \n            if(tmp[i]>='a'||tmp[i]<='z'){  \n                tp[k]='\\0';  \n                char *temp=TrieSearch(tp);  \n                if(temp) printf(\"%s\",temp);  \n                else printf(\"%s\",tp);  \n                k=0;                    //从新开始保存单词或者结束  \n                if(i!=len-1) printf(\"%c\",tmp[i]);  \n            }  \n            else  \n                tp[k++]=tmp[i];  \n        }  \n        printf(\"\\n\");  \n    }  \n    return 0;  \n}  \n```\n\n不难发现，字典树对于内存上的消耗还是很大的，下面给出第一题的另一种解法，研究qsort的结构体字符串排序想了好久，再利用二分，时间上就满足了。但是这种方法有些题目还是有些不适用的。我也没想清楚。\n\n```C\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <algorithm>  \n#define MAXN 100000+10  \nusing namespace std;  \n  \nstruct words{  \n    char ewords[11];  \n    char ftword[11];  \n}arr[MAXN];  \n  \nint cmp(const void *a,const void *b){  \n    struct words *pa = (struct words *)a;  \n    struct words *pb = (struct words *)b;  \n    return strcmp(pa->ftword,pb->ftword);  \n}  \nchar * dsearch(char id[],int low,int high){ // 排序后进行二分查找，快速定位下来  \n    while(low<=high){  \n        int mid=(low+high)>>1;  \n        //cout << \"str1=\"<< id <<\" str2=\"<<arr[mid].ftword<<endl;  \n        if(!strcmp(id,arr[mid].ftword)){  \n            return arr[mid].ewords;  \n        }  \n        else if(strcmp(id,arr[mid].ftword)>0)  \n            low=mid+1;  \n        else  \n            high=mid-1;  \n    }  \n    return NULL;  \n  \n}  \nint main(){  \n    int m=0;  \n    char line[30];  \n    for(m=0;gets(line)&&strlen(line);m++){  \n        sscanf(line,\"%s%s\",arr[m].ewords,arr[m].ftword);  \n    }  \n    qsort(arr,m,sizeof(arr[0]),cmp);  \n    while(gets(line)&&strlen(line)){  \n        char *p=dsearch(line,0,m);  \n        if(p) printf(\"%s\\n\",p);  \n        else printf(\"eh\\n\");  \n    }  \n    return 0;  \n}  \n```","source":"_posts/字典树例题介绍：ZOJ 1109,HDOJ 1075.md","raw":"---\ntitle: 字典树例题介绍：ZOJ 1109,HDOJ 1075\ndate: 2015-07-24 10:58:25\ntags: \"ACM&OJ\"\n---\n\n关于字典树，相信还是比较好理解的吧，就是将一次输入中的一些单词，字符串建立成字典。将这些字符每一层存放一个字符，顺序往下查找，在该个字符串（找完该字符串的最后一个字符，即最后一个节点）末尾设置一个节点（一般是存放的东西，比如要翻译过来的单词啊什么的）。\n\n下面来分享两道典型的字典树题：\n\n1.ZOJ 1109 Language of FatMouse：http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1109\n\n大概题意:FatMouse只会说鼠语，但是为了迎接WTO的热潮，它想学好英语，所以就搞了个类似小抄的东西。输入英语语言和鼠语，要求我们将鼠语言翻译英语输出。\n\n这是单词的翻译，属于简单的字典树。只要将鼠语见成字典树，对应的英语单词作为节点放在鼠语结束的末尾，每次翻译是查找字典树即可。\n\n```C\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#include <string>  \nusing namespace std;  \n  \nchar fwords[11];  \nstruct Trie{  \n    Trie *next[26];     //建树，每一层都有26个小写的英文单词（管它用不用呢，万一要全用），如果加入大写和数字，那就要开的更大了  \n    char eword[11];     //用来储存英语（要存在节点出的，同样，管他用不用呢。  \n  \n    Trie(){             //树的初始化  \n        for(int i=0;i<26;i++)  \n            next[i]=NULL;  \n        eword[0]='\\0';  \n    }  \n};  \nTrie root;                          //这里是树根，从此开始往下建树  \nvoid build(char ew[],char d[]){     //d是鼠语  \n    Trie *now=&root;                //每次建树都要从树根开始，看看初始鼠语字符是否存在  \n    int len=strlen(d);  \n    for(int i=0;i<len;i++){  \n        if(now->next[d[i]-'a']==NULL)   //如果没有，那就新往下建一个  \n            now->next[d[i]-'a']=new Trie;  \n        now=now->next[d[i]-'a'];        //有那就顺着这个节点往下摸  \n    }  \n    strcpy(now->eword,ew);  \n}  \nchar *TrieSearch(char str[]){  \n    Trie *p=&root;  \n    int len=strlen(str);  \n    int i;  \n    for(i=0;i<len&&p->next[str[i]-'a']!=NULL;i++)  \n        p=p->next[str[i]-'a'];  \n    if(i==len&&strlen(p->eword)!=0)  \n        return p->eword;  \n    return NULL;  \n  \n}  \nint main()  \n{  \n    char re[11],dic[11];  \n    char line[30];  \n    while(gets(line)){  \n        if(strlen(line) == 0)break;  \n        sscanf(line,\"%s%s\",re,dic);  \n        build(re,dic);  \n    }  \n    while(gets(line)){  \n        char *p=TrieSearch(line);  \n        if(p) printf(\"%s\\n\",p);  \n        else printf(\"eh\\n\");  \n    }  \n    return 0;  \n}  \n```\n\n接下来是个稍微变化了一下的字典树题目：\nDHOJ 1075hdoj What Are You Talking About：http://acm.hdu.edu.cn/showproblem.php?pid=1075\n\n题意：同样也是要翻译，但是这次输入有其他的各种符号，但是不用管它，最后的时候处理就好了，给出代码：\n```C\n//Trie  \n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \n#include <string>  \n#include <cctype>  \n  \nchar tmp[3000+10];  //后续输入  \n//树的结构体  \nstruct Trie{  \n    char ewards[11];  \n    Trie *next[26];  \n    Trie(){  \n        for(int i=0;i<26;i++)  \n            next[i]=NULL;  \n        ewards[0]='\\0';  \n    }  \n};  \nTrie root;          //建立字典树树根  \n//函数功能：建树并保存单词（即在单词结束时保存节点）  \nvoid build(char e[],char mar[]){  \n    Trie *now=&root;            //从树顶端开始建立  \n    int len=strlen(mar);  \n    for(int i=0;i<len;i++){     //mar是字典，直到将其全部非'\\0'字符历遍  \n        if(now->next[mar[i]-'a']==NULL)  \n            now->next[mar[i]-'a']=new Trie;//如果该字符未被保存过，那么建立新的节点  \n        now=now->next[mar[i]-'a'];  \n    }  \n    strcpy(now->ewards,e);  \n}  \n  \nchar *TrieSearch(char s[]){  \n    Trie *p =&root;  \n    int i;          // 下边还会用到  \n    for(i=0;s[i]!='\\0'&&p->next[s[i]-'a']!=NULL;i++)  \n        p=p->next[s[i]-'a'];            //符合要求那么就继续向下  \n    if(s[i]=='\\0'&&strlen(p->ewards)!=0)//s被历遍，且最后一个树点有节点标记（此处为有单词  \n        return p->ewards;  \n    return NULL;  \n}  \n  \nusing namespace std;  \n  \nint main()  \n{  \n    char ear[11],mar[11];  \n    scanf(\"%s\",ear);  \n    while(scanf(\"%s\",ear)&&ear[0]!='E'){  \n        scanf(\"%s\",mar);  \n        build(ear,mar);  \n    }  \n    scanf(\"%s\",mar);scanf(\"\\n\");    //输入START，记得吞'\\n'  \n    memset(tmp,'\\0',sizeof(tmp));  \n    while(gets(tmp)!=NULL&&tmp[0]!='E'){  \n        int len=strlen(tmp);  \n        tmp[len]=' ';len++;  \n        char tp[3000+10];  \n        for(int i=0,k=0;i<len;i++){  \n            if(tmp[i]>='a'||tmp[i]<='z'){  \n                tp[k]='\\0';  \n                char *temp=TrieSearch(tp);  \n                if(temp) printf(\"%s\",temp);  \n                else printf(\"%s\",tp);  \n                k=0;                    //从新开始保存单词或者结束  \n                if(i!=len-1) printf(\"%c\",tmp[i]);  \n            }  \n            else  \n                tp[k++]=tmp[i];  \n        }  \n        printf(\"\\n\");  \n    }  \n    return 0;  \n}  \n```\n\n不难发现，字典树对于内存上的消耗还是很大的，下面给出第一题的另一种解法，研究qsort的结构体字符串排序想了好久，再利用二分，时间上就满足了。但是这种方法有些题目还是有些不适用的。我也没想清楚。\n\n```C\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <algorithm>  \n#define MAXN 100000+10  \nusing namespace std;  \n  \nstruct words{  \n    char ewords[11];  \n    char ftword[11];  \n}arr[MAXN];  \n  \nint cmp(const void *a,const void *b){  \n    struct words *pa = (struct words *)a;  \n    struct words *pb = (struct words *)b;  \n    return strcmp(pa->ftword,pb->ftword);  \n}  \nchar * dsearch(char id[],int low,int high){ // 排序后进行二分查找，快速定位下来  \n    while(low<=high){  \n        int mid=(low+high)>>1;  \n        //cout << \"str1=\"<< id <<\" str2=\"<<arr[mid].ftword<<endl;  \n        if(!strcmp(id,arr[mid].ftword)){  \n            return arr[mid].ewords;  \n        }  \n        else if(strcmp(id,arr[mid].ftword)>0)  \n            low=mid+1;  \n        else  \n            high=mid-1;  \n    }  \n    return NULL;  \n  \n}  \nint main(){  \n    int m=0;  \n    char line[30];  \n    for(m=0;gets(line)&&strlen(line);m++){  \n        sscanf(line,\"%s%s\",arr[m].ewords,arr[m].ftword);  \n    }  \n    qsort(arr,m,sizeof(arr[0]),cmp);  \n    while(gets(line)&&strlen(line)){  \n        char *p=dsearch(line,0,m);  \n        if(p) printf(\"%s\\n\",p);  \n        else printf(\"eh\\n\");  \n    }  \n    return 0;  \n}  \n```","slug":"字典树例题介绍：ZOJ 1109,HDOJ 1075","published":1,"updated":"2018-01-09T00:55:50.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzun000hyg3iouxl8x6k","content":"<p>关于字典树，相信还是比较好理解的吧，就是将一次输入中的一些单词，字符串建立成字典。将这些字符每一层存放一个字符，顺序往下查找，在该个字符串（找完该字符串的最后一个字符，即最后一个节点）末尾设置一个节点（一般是存放的东西，比如要翻译过来的单词啊什么的）。</p>\n<p>下面来分享两道典型的字典树题：</p>\n<p>1.ZOJ 1109 Language of FatMouse：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1109\" target=\"_blank\" rel=\"noopener\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1109</a></p>\n<p>大概题意:FatMouse只会说鼠语，但是为了迎接WTO的热潮，它想学好英语，所以就搞了个类似小抄的东西。输入英语语言和鼠语，要求我们将鼠语言翻译英语输出。</p>\n<p>这是单词的翻译，属于简单的字典树。只要将鼠语见成字典树，对应的英语单词作为节点放在鼠语结束的末尾，每次翻译是查找字典树即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">char</span> fwords[<span class=\"number\">11</span>];  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>  </span><br><span class=\"line\">    Trie *next[<span class=\"number\">26</span>];     <span class=\"comment\">//建树，每一层都有26个小写的英文单词（管它用不用呢，万一要全用），如果加入大写和数字，那就要开的更大了  </span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> eword[<span class=\"number\">11</span>];     <span class=\"comment\">//用来储存英语（要存在节点出的，同样，管他用不用呢。  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    Trie()&#123;             <span class=\"comment\">//树的初始化  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)  </span><br><span class=\"line\">            next[i]=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">        eword[<span class=\"number\">0</span>]=<span class=\"string\">'\\0'</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">Trie root;                          <span class=\"comment\">//这里是树根，从此开始往下建树  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">char</span> ew[],<span class=\"keyword\">char</span> d[])</span></span>&#123;     <span class=\"comment\">//d是鼠语  </span></span><br><span class=\"line\">    Trie *now=&amp;root;                <span class=\"comment\">//每次建树都要从树根开始，看看初始鼠语字符是否存在  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(d);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[d[i]-<span class=\"string\">'a'</span>]==<span class=\"literal\">NULL</span>)   <span class=\"comment\">//如果没有，那就新往下建一个  </span></span><br><span class=\"line\">            now-&gt;next[d[i]-<span class=\"string\">'a'</span>]=<span class=\"keyword\">new</span> Trie;  </span><br><span class=\"line\">        now=now-&gt;next[d[i]-<span class=\"string\">'a'</span>];        <span class=\"comment\">//有那就顺着这个节点往下摸  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(now-&gt;eword,ew);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">TrieSearch</span><span class=\"params\">(<span class=\"keyword\">char</span> str[])</span></span>&#123;  </span><br><span class=\"line\">    Trie *p=&amp;root;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str);  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;len&amp;&amp;p-&gt;next[str[i]-<span class=\"string\">'a'</span>]!=<span class=\"literal\">NULL</span>;i++)  </span><br><span class=\"line\">        p=p-&gt;next[str[i]-<span class=\"string\">'a'</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==len&amp;&amp;<span class=\"built_in\">strlen</span>(p-&gt;eword)!=<span class=\"number\">0</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;eword;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> re[<span class=\"number\">11</span>],dic[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> line[<span class=\"number\">30</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(line))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(line) == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(line,<span class=\"string\">\"%s%s\"</span>,re,dic);  </span><br><span class=\"line\">        build(re,dic);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(line))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p=TrieSearch(line);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,p);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"eh\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是个稍微变化了一下的字典树题目：<br>DHOJ 1075hdoj What Are You Talking About：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1075\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1075</a></p>\n<p>题意：同样也是要翻译，但是这次输入有其他的各种符号，但是不用管它，最后的时候处理就好了，给出代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Trie  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">char</span> tmp[<span class=\"number\">3000</span>+<span class=\"number\">10</span>];  <span class=\"comment\">//后续输入  </span></span><br><span class=\"line\"><span class=\"comment\">//树的结构体  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ewards[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    Trie *next[<span class=\"number\">26</span>];  </span><br><span class=\"line\">    Trie()&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)  </span><br><span class=\"line\">            next[i]=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">        ewards[<span class=\"number\">0</span>]=<span class=\"string\">'\\0'</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">Trie root;          <span class=\"comment\">//建立字典树树根  </span></span><br><span class=\"line\"><span class=\"comment\">//函数功能：建树并保存单词（即在单词结束时保存节点）  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">char</span> e[],<span class=\"keyword\">char</span> mar[])</span></span>&#123;  </span><br><span class=\"line\">    Trie *now=&amp;root;            <span class=\"comment\">//从树顶端开始建立  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(mar);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;     <span class=\"comment\">//mar是字典，直到将其全部非'\\0'字符历遍  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[mar[i]-<span class=\"string\">'a'</span>]==<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">            now-&gt;next[mar[i]-<span class=\"string\">'a'</span>]=<span class=\"keyword\">new</span> Trie;<span class=\"comment\">//如果该字符未被保存过，那么建立新的节点  </span></span><br><span class=\"line\">        now=now-&gt;next[mar[i]-<span class=\"string\">'a'</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(now-&gt;ewards,e);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">TrieSearch</span><span class=\"params\">(<span class=\"keyword\">char</span> s[])</span></span>&#123;  </span><br><span class=\"line\">    Trie *p =&amp;root;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;          <span class=\"comment\">// 下边还会用到  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;s[i]!=<span class=\"string\">'\\0'</span>&amp;&amp;p-&gt;next[s[i]-<span class=\"string\">'a'</span>]!=<span class=\"literal\">NULL</span>;i++)  </span><br><span class=\"line\">        p=p-&gt;next[s[i]-<span class=\"string\">'a'</span>];            <span class=\"comment\">//符合要求那么就继续向下  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">'\\0'</span>&amp;&amp;<span class=\"built_in\">strlen</span>(p-&gt;ewards)!=<span class=\"number\">0</span>)<span class=\"comment\">//s被历遍，且最后一个树点有节点标记（此处为有单词  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;ewards;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ear[<span class=\"number\">11</span>],mar[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,ear);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,ear)&amp;&amp;ear[<span class=\"number\">0</span>]!=<span class=\"string\">'E'</span>)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,mar);  </span><br><span class=\"line\">        build(ear,mar);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,mar);<span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n\"</span>);    <span class=\"comment\">//输入START，记得吞'\\n'  </span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(tmp,<span class=\"string\">'\\0'</span>,<span class=\"keyword\">sizeof</span>(tmp));  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(tmp)!=<span class=\"literal\">NULL</span>&amp;&amp;tmp[<span class=\"number\">0</span>]!=<span class=\"string\">'E'</span>)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(tmp);  </span><br><span class=\"line\">        tmp[len]=<span class=\"string\">' '</span>;len++;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> tp[<span class=\"number\">3000</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp[i]&gt;=<span class=\"string\">'a'</span>||tmp[i]&lt;=<span class=\"string\">'z'</span>)&#123;  </span><br><span class=\"line\">                tp[k]=<span class=\"string\">'\\0'</span>;  </span><br><span class=\"line\">                <span class=\"keyword\">char</span> *temp=TrieSearch(tp);  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,temp);  </span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,tp);  </span><br><span class=\"line\">                k=<span class=\"number\">0</span>;                    <span class=\"comment\">//从新开始保存单词或者结束  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i!=len<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,tmp[i]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                tp[k++]=tmp[i];  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不难发现，字典树对于内存上的消耗还是很大的，下面给出第一题的另一种解法，研究qsort的结构体字符串排序想了好久，再利用二分，时间上就满足了。但是这种方法有些题目还是有些不适用的。我也没想清楚。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100000+10  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">words</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ewords[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ftword[<span class=\"number\">11</span>];  </span><br><span class=\"line\">&#125;arr[MAXN];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a,<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">words</span> *<span class=\"title\">pa</span> = (<span class=\"title\">struct</span> <span class=\"title\">words</span> *)<span class=\"title\">a</span>;</span>  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">words</span> *<span class=\"title\">pb</span> = (<span class=\"title\">struct</span> <span class=\"title\">words</span> *)<span class=\"title\">b</span>;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(pa-&gt;ftword,pb-&gt;ftword);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">dsearch</span><span class=\"params\">(<span class=\"keyword\">char</span> id[],<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123; <span class=\"comment\">// 排序后进行二分查找，快速定位下来  </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(low+high)&gt;&gt;<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"str1=\"&lt;&lt; id &lt;&lt;\" str2=\"&lt;&lt;arr[mid].ftword&lt;&lt;endl;  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">strcmp</span>(id,arr[mid].ftword))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[mid].ewords;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(id,arr[mid].ftword)&gt;<span class=\"number\">0</span>)  </span><br><span class=\"line\">            low=mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high=mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> line[<span class=\"number\">30</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(m=<span class=\"number\">0</span>;gets(line)&amp;&amp;<span class=\"built_in\">strlen</span>(line);m++)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(line,<span class=\"string\">\"%s%s\"</span>,arr[m].ewords,arr[m].ftword);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    qsort(arr,m,<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]),cmp);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(line)&amp;&amp;<span class=\"built_in\">strlen</span>(line))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p=dsearch(line,<span class=\"number\">0</span>,m);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,p);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"eh\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>关于字典树，相信还是比较好理解的吧，就是将一次输入中的一些单词，字符串建立成字典。将这些字符每一层存放一个字符，顺序往下查找，在该个字符串（找完该字符串的最后一个字符，即最后一个节点）末尾设置一个节点（一般是存放的东西，比如要翻译过来的单词啊什么的）。</p>\n<p>下面来分享两道典型的字典树题：</p>\n<p>1.ZOJ 1109 Language of FatMouse：<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1109\" target=\"_blank\" rel=\"noopener\">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1109</a></p>\n<p>大概题意:FatMouse只会说鼠语，但是为了迎接WTO的热潮，它想学好英语，所以就搞了个类似小抄的东西。输入英语语言和鼠语，要求我们将鼠语言翻译英语输出。</p>\n<p>这是单词的翻译，属于简单的字典树。只要将鼠语见成字典树，对应的英语单词作为节点放在鼠语结束的末尾，每次翻译是查找字典树即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">char</span> fwords[<span class=\"number\">11</span>];  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>  </span><br><span class=\"line\">    Trie *next[<span class=\"number\">26</span>];     <span class=\"comment\">//建树，每一层都有26个小写的英文单词（管它用不用呢，万一要全用），如果加入大写和数字，那就要开的更大了  </span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> eword[<span class=\"number\">11</span>];     <span class=\"comment\">//用来储存英语（要存在节点出的，同样，管他用不用呢。  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    Trie()&#123;             <span class=\"comment\">//树的初始化  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)  </span><br><span class=\"line\">            next[i]=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">        eword[<span class=\"number\">0</span>]=<span class=\"string\">'\\0'</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">Trie root;                          <span class=\"comment\">//这里是树根，从此开始往下建树  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">char</span> ew[],<span class=\"keyword\">char</span> d[])</span></span>&#123;     <span class=\"comment\">//d是鼠语  </span></span><br><span class=\"line\">    Trie *now=&amp;root;                <span class=\"comment\">//每次建树都要从树根开始，看看初始鼠语字符是否存在  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(d);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[d[i]-<span class=\"string\">'a'</span>]==<span class=\"literal\">NULL</span>)   <span class=\"comment\">//如果没有，那就新往下建一个  </span></span><br><span class=\"line\">            now-&gt;next[d[i]-<span class=\"string\">'a'</span>]=<span class=\"keyword\">new</span> Trie;  </span><br><span class=\"line\">        now=now-&gt;next[d[i]-<span class=\"string\">'a'</span>];        <span class=\"comment\">//有那就顺着这个节点往下摸  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(now-&gt;eword,ew);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">TrieSearch</span><span class=\"params\">(<span class=\"keyword\">char</span> str[])</span></span>&#123;  </span><br><span class=\"line\">    Trie *p=&amp;root;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str);  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;len&amp;&amp;p-&gt;next[str[i]-<span class=\"string\">'a'</span>]!=<span class=\"literal\">NULL</span>;i++)  </span><br><span class=\"line\">        p=p-&gt;next[str[i]-<span class=\"string\">'a'</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==len&amp;&amp;<span class=\"built_in\">strlen</span>(p-&gt;eword)!=<span class=\"number\">0</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;eword;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> re[<span class=\"number\">11</span>],dic[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> line[<span class=\"number\">30</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(line))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(line) == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(line,<span class=\"string\">\"%s%s\"</span>,re,dic);  </span><br><span class=\"line\">        build(re,dic);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(line))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p=TrieSearch(line);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,p);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"eh\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是个稍微变化了一下的字典树题目：<br>DHOJ 1075hdoj What Are You Talking About：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1075\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1075</a></p>\n<p>题意：同样也是要翻译，但是这次输入有其他的各种符号，但是不用管它，最后的时候处理就好了，给出代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Trie  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">char</span> tmp[<span class=\"number\">3000</span>+<span class=\"number\">10</span>];  <span class=\"comment\">//后续输入  </span></span><br><span class=\"line\"><span class=\"comment\">//树的结构体  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ewards[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    Trie *next[<span class=\"number\">26</span>];  </span><br><span class=\"line\">    Trie()&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)  </span><br><span class=\"line\">            next[i]=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">        ewards[<span class=\"number\">0</span>]=<span class=\"string\">'\\0'</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">Trie root;          <span class=\"comment\">//建立字典树树根  </span></span><br><span class=\"line\"><span class=\"comment\">//函数功能：建树并保存单词（即在单词结束时保存节点）  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">char</span> e[],<span class=\"keyword\">char</span> mar[])</span></span>&#123;  </span><br><span class=\"line\">    Trie *now=&amp;root;            <span class=\"comment\">//从树顶端开始建立  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(mar);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;     <span class=\"comment\">//mar是字典，直到将其全部非'\\0'字符历遍  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-&gt;next[mar[i]-<span class=\"string\">'a'</span>]==<span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">            now-&gt;next[mar[i]-<span class=\"string\">'a'</span>]=<span class=\"keyword\">new</span> Trie;<span class=\"comment\">//如果该字符未被保存过，那么建立新的节点  </span></span><br><span class=\"line\">        now=now-&gt;next[mar[i]-<span class=\"string\">'a'</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(now-&gt;ewards,e);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">TrieSearch</span><span class=\"params\">(<span class=\"keyword\">char</span> s[])</span></span>&#123;  </span><br><span class=\"line\">    Trie *p =&amp;root;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;          <span class=\"comment\">// 下边还会用到  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;s[i]!=<span class=\"string\">'\\0'</span>&amp;&amp;p-&gt;next[s[i]-<span class=\"string\">'a'</span>]!=<span class=\"literal\">NULL</span>;i++)  </span><br><span class=\"line\">        p=p-&gt;next[s[i]-<span class=\"string\">'a'</span>];            <span class=\"comment\">//符合要求那么就继续向下  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[i]==<span class=\"string\">'\\0'</span>&amp;&amp;<span class=\"built_in\">strlen</span>(p-&gt;ewards)!=<span class=\"number\">0</span>)<span class=\"comment\">//s被历遍，且最后一个树点有节点标记（此处为有单词  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;ewards;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ear[<span class=\"number\">11</span>],mar[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,ear);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,ear)&amp;&amp;ear[<span class=\"number\">0</span>]!=<span class=\"string\">'E'</span>)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,mar);  </span><br><span class=\"line\">        build(ear,mar);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,mar);<span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n\"</span>);    <span class=\"comment\">//输入START，记得吞'\\n'  </span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(tmp,<span class=\"string\">'\\0'</span>,<span class=\"keyword\">sizeof</span>(tmp));  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(tmp)!=<span class=\"literal\">NULL</span>&amp;&amp;tmp[<span class=\"number\">0</span>]!=<span class=\"string\">'E'</span>)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(tmp);  </span><br><span class=\"line\">        tmp[len]=<span class=\"string\">' '</span>;len++;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> tp[<span class=\"number\">3000</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp[i]&gt;=<span class=\"string\">'a'</span>||tmp[i]&lt;=<span class=\"string\">'z'</span>)&#123;  </span><br><span class=\"line\">                tp[k]=<span class=\"string\">'\\0'</span>;  </span><br><span class=\"line\">                <span class=\"keyword\">char</span> *temp=TrieSearch(tp);  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,temp);  </span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,tp);  </span><br><span class=\"line\">                k=<span class=\"number\">0</span>;                    <span class=\"comment\">//从新开始保存单词或者结束  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i!=len<span class=\"number\">-1</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,tmp[i]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                tp[k++]=tmp[i];  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不难发现，字典树对于内存上的消耗还是很大的，下面给出第一题的另一种解法，研究qsort的结构体字符串排序想了好久，再利用二分，时间上就满足了。但是这种方法有些题目还是有些不适用的。我也没想清楚。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100000+10  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">words</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ewords[<span class=\"number\">11</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ftword[<span class=\"number\">11</span>];  </span><br><span class=\"line\">&#125;arr[MAXN];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a,<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">words</span> *<span class=\"title\">pa</span> = (<span class=\"title\">struct</span> <span class=\"title\">words</span> *)<span class=\"title\">a</span>;</span>  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">words</span> *<span class=\"title\">pb</span> = (<span class=\"title\">struct</span> <span class=\"title\">words</span> *)<span class=\"title\">b</span>;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(pa-&gt;ftword,pb-&gt;ftword);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">dsearch</span><span class=\"params\">(<span class=\"keyword\">char</span> id[],<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123; <span class=\"comment\">// 排序后进行二分查找，快速定位下来  </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(low+high)&gt;&gt;<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; \"str1=\"&lt;&lt; id &lt;&lt;\" str2=\"&lt;&lt;arr[mid].ftword&lt;&lt;endl;  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">strcmp</span>(id,arr[mid].ftword))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[mid].ewords;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(id,arr[mid].ftword)&gt;<span class=\"number\">0</span>)  </span><br><span class=\"line\">            low=mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high=mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> line[<span class=\"number\">30</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(m=<span class=\"number\">0</span>;gets(line)&amp;&amp;<span class=\"built_in\">strlen</span>(line);m++)&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(line,<span class=\"string\">\"%s%s\"</span>,arr[m].ewords,arr[m].ftword);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    qsort(arr,m,<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]),cmp);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gets(line)&amp;&amp;<span class=\"built_in\">strlen</span>(line))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p=dsearch(line,<span class=\"number\">0</span>,m);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,p);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"eh\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"本科生涯的ACM历程总结——记香港区域赛","date":"2016-11-14T03:57:27.000Z","_content":"自参加完CCPC杭州赛区和ICPC香港赛区已经过去一周的时间了，现在已经大三，差不多也到了退役的时间。ACM这个东西从大一上学期开始到现在，匆匆忙忙过了2年了。昨天，自己实验室的朋友们分别打完青岛区域赛和北京区域赛后双双打铁，最近这几场比赛也算作是我们14级acmer的退幕赛把，虽然都留有遗憾，但想必收获必定不小。\n\n大概总结一下香港这趟旅程和ICPC，此次是我第二次来到香港了，第一次是在高考完的那个暑假，考试考得不好，当做来香港散散心。再次到香港，感觉并没有什么新鲜之处：从学校到深圳，然后从深圳过关，一切都比较顺利。凭借了地图导航和自己优美的普通话以及蹩脚的英语，最后算是达到了目的地：香港中文大学（CUHK）。首先我们并没有找到大门在哪里，其次呢这种同学之间用粤语夹杂英语的交流方式还是和内地很不同的。当然这边的英语水平挺不错的。\n\n接下来是签到和开幕式，依旧很顺利，注册的时候留下下面这张神照：\n<div align=center>\n<img src=\"/images/2016_HK_1.jpg\" >\n</div>\n比赛场地是机房，很出人意料，竟然不是气势恢宏的体育场。至于操作系统和编译环境，自然是ubuntu标准和g++/gcc。这次有一点我们失策的是：来之前忘记仔细查看标准了，导致全局在用记事本编程然后用shell框编译，说不定这也是我们这次打铁的一个原因。\n\n第一天结束，回到旅馆稍作休息后在街上逛了一会儿也就睡觉了。\n随之是第二天的比赛，似乎结果并不出人意料，但是和我们去之前想得并不一样：机会还是有的！只是我们没有把握住把。比赛时想得思路和最后讲解的题解思路如出一辙，但就是没有过AC那一关。我们想罢是精度、还是细节上的问题，这也给我们留下了一些疑惑。在回来的这一周，回过头来思考这些问题，解法确实就是当初想的那样。比赛过程中的一些小食和场地（那么多气球的队可惜不是我们）\n<div align=center>\n<img src=\"/images/2016_HK_2.jpg\">\n<img src=\"/images/2016_HK_3.jpg\">\n</div>\n\n晚餐时间很不错，有海鲜餐还有标准的西餐服务员什么的，虽然看着大佬们颁奖很是羡慕与不甘，但想想终究是自己造成的结果。这份被称为 a great dinner的晚饭感觉像是被喝橙汁喝饱的。\n\n<div align=center>\n<img src=\"/images/2016_HK_4.jpg\">\n<img src=\"/images/2016_HK_5.jpg\">\n</div>\n\n吃完晚饭后也就会宾馆休息了，第三天算是简单逛了一下香港。当然咯，在太平山的时候找了两个国外的型男拍了合照，还是挺佩服自己的 Can you take a photo with me? 的完美发音的。\n\n总体行程就是这样了，这也算是我大学本科生涯最后一次参加ACM比赛了吧。昨天看到竞赛群里有些14级的同学因为这次的遗憾还想再搞一年，我也犹豫过，真的希望他们如果继续，下一年能拿到好的成绩。不过对于我来说，历史总是惊人的相似这句话被我认为能够很好地概括这件事。在大的环境没有改变和自身不会发生颠覆性的变化之前，结果总是出人意料的相似吗。若是我们在其位时能够全心全意投入，那么这两年也不会以这样的结果告终。\n这次的结束，让我以前想要读研的决心更加明朗了，一些无奈和不甘终究会沉淀下来，愿能够完成未尽之心愿，同样也祝福大家顺利。\n\n少说话都做事。","source":"_posts/本科生涯的ACM历程总结——香港区域赛.md","raw":"---\ntitle: 本科生涯的ACM历程总结——记香港区域赛\ndate: 2016-11-14 11:57:27\ntags: \"ACM&OJ\"\n---\n自参加完CCPC杭州赛区和ICPC香港赛区已经过去一周的时间了，现在已经大三，差不多也到了退役的时间。ACM这个东西从大一上学期开始到现在，匆匆忙忙过了2年了。昨天，自己实验室的朋友们分别打完青岛区域赛和北京区域赛后双双打铁，最近这几场比赛也算作是我们14级acmer的退幕赛把，虽然都留有遗憾，但想必收获必定不小。\n\n大概总结一下香港这趟旅程和ICPC，此次是我第二次来到香港了，第一次是在高考完的那个暑假，考试考得不好，当做来香港散散心。再次到香港，感觉并没有什么新鲜之处：从学校到深圳，然后从深圳过关，一切都比较顺利。凭借了地图导航和自己优美的普通话以及蹩脚的英语，最后算是达到了目的地：香港中文大学（CUHK）。首先我们并没有找到大门在哪里，其次呢这种同学之间用粤语夹杂英语的交流方式还是和内地很不同的。当然这边的英语水平挺不错的。\n\n接下来是签到和开幕式，依旧很顺利，注册的时候留下下面这张神照：\n<div align=center>\n<img src=\"/images/2016_HK_1.jpg\" >\n</div>\n比赛场地是机房，很出人意料，竟然不是气势恢宏的体育场。至于操作系统和编译环境，自然是ubuntu标准和g++/gcc。这次有一点我们失策的是：来之前忘记仔细查看标准了，导致全局在用记事本编程然后用shell框编译，说不定这也是我们这次打铁的一个原因。\n\n第一天结束，回到旅馆稍作休息后在街上逛了一会儿也就睡觉了。\n随之是第二天的比赛，似乎结果并不出人意料，但是和我们去之前想得并不一样：机会还是有的！只是我们没有把握住把。比赛时想得思路和最后讲解的题解思路如出一辙，但就是没有过AC那一关。我们想罢是精度、还是细节上的问题，这也给我们留下了一些疑惑。在回来的这一周，回过头来思考这些问题，解法确实就是当初想的那样。比赛过程中的一些小食和场地（那么多气球的队可惜不是我们）\n<div align=center>\n<img src=\"/images/2016_HK_2.jpg\">\n<img src=\"/images/2016_HK_3.jpg\">\n</div>\n\n晚餐时间很不错，有海鲜餐还有标准的西餐服务员什么的，虽然看着大佬们颁奖很是羡慕与不甘，但想想终究是自己造成的结果。这份被称为 a great dinner的晚饭感觉像是被喝橙汁喝饱的。\n\n<div align=center>\n<img src=\"/images/2016_HK_4.jpg\">\n<img src=\"/images/2016_HK_5.jpg\">\n</div>\n\n吃完晚饭后也就会宾馆休息了，第三天算是简单逛了一下香港。当然咯，在太平山的时候找了两个国外的型男拍了合照，还是挺佩服自己的 Can you take a photo with me? 的完美发音的。\n\n总体行程就是这样了，这也算是我大学本科生涯最后一次参加ACM比赛了吧。昨天看到竞赛群里有些14级的同学因为这次的遗憾还想再搞一年，我也犹豫过，真的希望他们如果继续，下一年能拿到好的成绩。不过对于我来说，历史总是惊人的相似这句话被我认为能够很好地概括这件事。在大的环境没有改变和自身不会发生颠覆性的变化之前，结果总是出人意料的相似吗。若是我们在其位时能够全心全意投入，那么这两年也不会以这样的结果告终。\n这次的结束，让我以前想要读研的决心更加明朗了，一些无奈和不甘终究会沉淀下来，愿能够完成未尽之心愿，同样也祝福大家顺利。\n\n少说话都做事。","slug":"本科生涯的ACM历程总结——香港区域赛","published":1,"updated":"2018-01-09T02:06:26.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71nzuo000jyg3iq08mg1oj","content":"<p>自参加完CCPC杭州赛区和ICPC香港赛区已经过去一周的时间了，现在已经大三，差不多也到了退役的时间。ACM这个东西从大一上学期开始到现在，匆匆忙忙过了2年了。昨天，自己实验室的朋友们分别打完青岛区域赛和北京区域赛后双双打铁，最近这几场比赛也算作是我们14级acmer的退幕赛把，虽然都留有遗憾，但想必收获必定不小。</p>\n<p>大概总结一下香港这趟旅程和ICPC，此次是我第二次来到香港了，第一次是在高考完的那个暑假，考试考得不好，当做来香港散散心。再次到香港，感觉并没有什么新鲜之处：从学校到深圳，然后从深圳过关，一切都比较顺利。凭借了地图导航和自己优美的普通话以及蹩脚的英语，最后算是达到了目的地：香港中文大学（CUHK）。首先我们并没有找到大门在哪里，其次呢这种同学之间用粤语夹杂英语的交流方式还是和内地很不同的。当然这边的英语水平挺不错的。</p>\n<p>接下来是签到和开幕式，依旧很顺利，注册的时候留下下面这张神照：</p>\n<div align=\"center\"><br><img src=\"/images/2016_HK_1.jpg\"><br></div><br>比赛场地是机房，很出人意料，竟然不是气势恢宏的体育场。至于操作系统和编译环境，自然是ubuntu标准和g++/gcc。这次有一点我们失策的是：来之前忘记仔细查看标准了，导致全局在用记事本编程然后用shell框编译，说不定这也是我们这次打铁的一个原因。<br><br>第一天结束，回到旅馆稍作休息后在街上逛了一会儿也就睡觉了。<br>随之是第二天的比赛，似乎结果并不出人意料，但是和我们去之前想得并不一样：机会还是有的！只是我们没有把握住把。比赛时想得思路和最后讲解的题解思路如出一辙，但就是没有过AC那一关。我们想罢是精度、还是细节上的问题，这也给我们留下了一些疑惑。在回来的这一周，回过头来思考这些问题，解法确实就是当初想的那样。比赛过程中的一些小食和场地（那么多气球的队可惜不是我们）<br><div align=\"center\"><br><img src=\"/images/2016_HK_2.jpg\"><br><img src=\"/images/2016_HK_3.jpg\"><br></div>\n\n<p>晚餐时间很不错，有海鲜餐还有标准的西餐服务员什么的，虽然看着大佬们颁奖很是羡慕与不甘，但想想终究是自己造成的结果。这份被称为 a great dinner的晚饭感觉像是被喝橙汁喝饱的。</p>\n<div align=\"center\"><br><img src=\"/images/2016_HK_4.jpg\"><br><img src=\"/images/2016_HK_5.jpg\"><br></div>\n\n<p>吃完晚饭后也就会宾馆休息了，第三天算是简单逛了一下香港。当然咯，在太平山的时候找了两个国外的型男拍了合照，还是挺佩服自己的 Can you take a photo with me? 的完美发音的。</p>\n<p>总体行程就是这样了，这也算是我大学本科生涯最后一次参加ACM比赛了吧。昨天看到竞赛群里有些14级的同学因为这次的遗憾还想再搞一年，我也犹豫过，真的希望他们如果继续，下一年能拿到好的成绩。不过对于我来说，历史总是惊人的相似这句话被我认为能够很好地概括这件事。在大的环境没有改变和自身不会发生颠覆性的变化之前，结果总是出人意料的相似吗。若是我们在其位时能够全心全意投入，那么这两年也不会以这样的结果告终。<br>这次的结束，让我以前想要读研的决心更加明朗了，一些无奈和不甘终究会沉淀下来，愿能够完成未尽之心愿，同样也祝福大家顺利。</p>\n<p>少说话都做事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自参加完CCPC杭州赛区和ICPC香港赛区已经过去一周的时间了，现在已经大三，差不多也到了退役的时间。ACM这个东西从大一上学期开始到现在，匆匆忙忙过了2年了。昨天，自己实验室的朋友们分别打完青岛区域赛和北京区域赛后双双打铁，最近这几场比赛也算作是我们14级acmer的退幕赛把，虽然都留有遗憾，但想必收获必定不小。</p>\n<p>大概总结一下香港这趟旅程和ICPC，此次是我第二次来到香港了，第一次是在高考完的那个暑假，考试考得不好，当做来香港散散心。再次到香港，感觉并没有什么新鲜之处：从学校到深圳，然后从深圳过关，一切都比较顺利。凭借了地图导航和自己优美的普通话以及蹩脚的英语，最后算是达到了目的地：香港中文大学（CUHK）。首先我们并没有找到大门在哪里，其次呢这种同学之间用粤语夹杂英语的交流方式还是和内地很不同的。当然这边的英语水平挺不错的。</p>\n<p>接下来是签到和开幕式，依旧很顺利，注册的时候留下下面这张神照：</p>\n<div align=\"center\"><br><img src=\"/images/2016_HK_1.jpg\"><br></div><br>比赛场地是机房，很出人意料，竟然不是气势恢宏的体育场。至于操作系统和编译环境，自然是ubuntu标准和g++/gcc。这次有一点我们失策的是：来之前忘记仔细查看标准了，导致全局在用记事本编程然后用shell框编译，说不定这也是我们这次打铁的一个原因。<br><br>第一天结束，回到旅馆稍作休息后在街上逛了一会儿也就睡觉了。<br>随之是第二天的比赛，似乎结果并不出人意料，但是和我们去之前想得并不一样：机会还是有的！只是我们没有把握住把。比赛时想得思路和最后讲解的题解思路如出一辙，但就是没有过AC那一关。我们想罢是精度、还是细节上的问题，这也给我们留下了一些疑惑。在回来的这一周，回过头来思考这些问题，解法确实就是当初想的那样。比赛过程中的一些小食和场地（那么多气球的队可惜不是我们）<br><div align=\"center\"><br><img src=\"/images/2016_HK_2.jpg\"><br><img src=\"/images/2016_HK_3.jpg\"><br></div>\n\n<p>晚餐时间很不错，有海鲜餐还有标准的西餐服务员什么的，虽然看着大佬们颁奖很是羡慕与不甘，但想想终究是自己造成的结果。这份被称为 a great dinner的晚饭感觉像是被喝橙汁喝饱的。</p>\n<div align=\"center\"><br><img src=\"/images/2016_HK_4.jpg\"><br><img src=\"/images/2016_HK_5.jpg\"><br></div>\n\n<p>吃完晚饭后也就会宾馆休息了，第三天算是简单逛了一下香港。当然咯，在太平山的时候找了两个国外的型男拍了合照，还是挺佩服自己的 Can you take a photo with me? 的完美发音的。</p>\n<p>总体行程就是这样了，这也算是我大学本科生涯最后一次参加ACM比赛了吧。昨天看到竞赛群里有些14级的同学因为这次的遗憾还想再搞一年，我也犹豫过，真的希望他们如果继续，下一年能拿到好的成绩。不过对于我来说，历史总是惊人的相似这句话被我认为能够很好地概括这件事。在大的环境没有改变和自身不会发生颠覆性的变化之前，结果总是出人意料的相似吗。若是我们在其位时能够全心全意投入，那么这两年也不会以这样的结果告终。<br>这次的结束，让我以前想要读研的决心更加明朗了，一些无奈和不甘终究会沉淀下来，愿能够完成未尽之心愿，同样也祝福大家顺利。</p>\n<p>少说话都做事。</p>\n"},{"title":"C++利用stl::sort对结构体数组中的字符串成员排序","date":"2015-07-26T04:54:32.000Z","_content":"\n之前发过的帖中，有讲到过对结构体字符串进行排序的，除了手写之外，便想到用C/C++中的qsort来对结构体数组中的字符串进行排序。但是推广到sort中时，想了好久也没想明白，看看网上这样的帖也比较少，其实还是很好理解的，主要是std::sort的cmp函数要求是bool的返回值，随意抓住这点就可以。\n\n问题大概是这样：\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#define MAXN 50  \nusing namespace std;  \n  \nstruct tmpToStruct{  \n    char ArraryString[MAXN];  \n};  \n  \ntmpToStruct step[5+1];  \n  \nint main()  \n{  \n    for(int i=0;i<5;i++)  \n        scanf(\"%s\",step[i].ArraryString);  \n    return 0;  \n}  \n```\n\n对step里的ArraryString按照字符串的字典序进行排序，下面给出sort排序的方法：\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <algorithm>  \n#define MAXN 50  \nusing namespace std;  \n  \nstruct tmpToStruct{  \n    char arrStr[MAXN];  \n};  \n  \ntmpToStruct step[5+1];  \n  \nbool upCmp(const tmpToStruct &tmp1,const tmpToStruct &tmp2){  \n         return strcmp(tmp1.arrStr,tmp2.arrStr)<0 ? true : false;  \n}  \n  \nbool downCmp(const tmpToStruct &tmp1,const tmpToStruct &tmp2){  \n         return strcmp(tmp1.arrStr,tmp2.arrStr)>0 ? true : false;  \n}  \nint main()  \n{  \n    puts(\"before the sort:\");  \n    for(int i=0;i<5;i++)  \n        scanf(\"%s\",step[i].arrStr);  \n    cout << endl;  \n  \n    sort(step,step+5,upCmp);  \n    puts(\"after the up sort:\");  \n    for(int i=0;i<5;i++)  \n        puts(step[i].arrStr);  \n    cout << endl;  \n  \n    puts(\"after the down sort:\");  \n    sort(step,step+5,downCmp);  \n    for(int i=0;i<5;i++)  \n        puts(step[i].arrStr);  \n    cout << endl;  \n    return 0;  \n}  \n```\n对比下qsort的排序，还是很简短的。","source":"_posts/C++利用stl::sort对结构体数组中的字符串成员排序.md","raw":"---\ntitle: C++利用stl::sort对结构体数组中的字符串成员排序\ndate: 2015-07-26 12:54:32\ntags: \"Tools\"\n---\n\n之前发过的帖中，有讲到过对结构体字符串进行排序的，除了手写之外，便想到用C/C++中的qsort来对结构体数组中的字符串进行排序。但是推广到sort中时，想了好久也没想明白，看看网上这样的帖也比较少，其实还是很好理解的，主要是std::sort的cmp函数要求是bool的返回值，随意抓住这点就可以。\n\n问题大概是这样：\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#define MAXN 50  \nusing namespace std;  \n  \nstruct tmpToStruct{  \n    char ArraryString[MAXN];  \n};  \n  \ntmpToStruct step[5+1];  \n  \nint main()  \n{  \n    for(int i=0;i<5;i++)  \n        scanf(\"%s\",step[i].ArraryString);  \n    return 0;  \n}  \n```\n\n对step里的ArraryString按照字符串的字典序进行排序，下面给出sort排序的方法：\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <algorithm>  \n#define MAXN 50  \nusing namespace std;  \n  \nstruct tmpToStruct{  \n    char arrStr[MAXN];  \n};  \n  \ntmpToStruct step[5+1];  \n  \nbool upCmp(const tmpToStruct &tmp1,const tmpToStruct &tmp2){  \n         return strcmp(tmp1.arrStr,tmp2.arrStr)<0 ? true : false;  \n}  \n  \nbool downCmp(const tmpToStruct &tmp1,const tmpToStruct &tmp2){  \n         return strcmp(tmp1.arrStr,tmp2.arrStr)>0 ? true : false;  \n}  \nint main()  \n{  \n    puts(\"before the sort:\");  \n    for(int i=0;i<5;i++)  \n        scanf(\"%s\",step[i].arrStr);  \n    cout << endl;  \n  \n    sort(step,step+5,upCmp);  \n    puts(\"after the up sort:\");  \n    for(int i=0;i<5;i++)  \n        puts(step[i].arrStr);  \n    cout << endl;  \n  \n    puts(\"after the down sort:\");  \n    sort(step,step+5,downCmp);  \n    for(int i=0;i<5;i++)  \n        puts(step[i].arrStr);  \n    cout << endl;  \n    return 0;  \n}  \n```\n对比下qsort的排序，还是很简短的。","slug":"C++利用stl::sort对结构体数组中的字符串成员排序","published":1,"updated":"2018-01-09T02:59:46.379Z","_id":"cjc71qnrs000tyg3iyo5j7sle","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前发过的帖中，有讲到过对结构体字符串进行排序的，除了手写之外，便想到用C/C++中的qsort来对结构体数组中的字符串进行排序。但是推广到sort中时，想了好久也没想明白，看看网上这样的帖也比较少，其实还是很好理解的，主要是std::sort的cmp函数要求是bool的返回值，随意抓住这点就可以。</p>\n<p>问题大概是这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmpToStruct</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ArraryString[MAXN];  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">tmpToStruct step[<span class=\"number\">5</span>+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,step[i].ArraryString);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对step里的ArraryString按照字符串的字典序进行排序，下面给出sort排序的方法：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmpToStruct</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> arrStr[MAXN];  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">tmpToStruct step[<span class=\"number\">5</span>+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">upCmp</span><span class=\"params\">(<span class=\"keyword\">const</span> tmpToStruct &amp;tmp1,<span class=\"keyword\">const</span> tmpToStruct &amp;tmp2)</span></span>&#123;  </span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(tmp1.arrStr,tmp2.arrStr)&lt;<span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">downCmp</span><span class=\"params\">(<span class=\"keyword\">const</span> tmpToStruct &amp;tmp1,<span class=\"keyword\">const</span> tmpToStruct &amp;tmp2)</span></span>&#123;  </span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(tmp1.arrStr,tmp2.arrStr)&gt;<span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"before the sort:\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,step[i].arrStr);  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    sort(step,step+<span class=\"number\">5</span>,upCmp);  </span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"after the up sort:\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(step[i].arrStr);  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"after the down sort:\"</span>);  </span><br><span class=\"line\">    sort(step,step+<span class=\"number\">5</span>,downCmp);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(step[i].arrStr);  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对比下qsort的排序，还是很简短的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前发过的帖中，有讲到过对结构体字符串进行排序的，除了手写之外，便想到用C/C++中的qsort来对结构体数组中的字符串进行排序。但是推广到sort中时，想了好久也没想明白，看看网上这样的帖也比较少，其实还是很好理解的，主要是std::sort的cmp函数要求是bool的返回值，随意抓住这点就可以。</p>\n<p>问题大概是这样：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmpToStruct</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> ArraryString[MAXN];  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">tmpToStruct step[<span class=\"number\">5</span>+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,step[i].ArraryString);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对step里的ArraryString按照字符串的字典序进行排序，下面给出sort排序的方法：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 50  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tmpToStruct</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> arrStr[MAXN];  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">tmpToStruct step[<span class=\"number\">5</span>+<span class=\"number\">1</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">upCmp</span><span class=\"params\">(<span class=\"keyword\">const</span> tmpToStruct &amp;tmp1,<span class=\"keyword\">const</span> tmpToStruct &amp;tmp2)</span></span>&#123;  </span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(tmp1.arrStr,tmp2.arrStr)&lt;<span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">downCmp</span><span class=\"params\">(<span class=\"keyword\">const</span> tmpToStruct &amp;tmp1,<span class=\"keyword\">const</span> tmpToStruct &amp;tmp2)</span></span>&#123;  </span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(tmp1.arrStr,tmp2.arrStr)&gt;<span class=\"number\">0</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"before the sort:\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,step[i].arrStr);  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    sort(step,step+<span class=\"number\">5</span>,upCmp);  </span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"after the up sort:\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(step[i].arrStr);  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"after the down sort:\"</span>);  </span><br><span class=\"line\">    sort(step,step+<span class=\"number\">5</span>,downCmp);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)  </span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(step[i].arrStr);  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对比下qsort的排序，还是很简短的。</p>\n"},{"title":"C++STL二分查找函数集及补充","date":"2015-08-04T12:53:39.000Z","_content":"\nC++中还是有许多我未了解或者不常用的函数，比如今天写下的一些二分函数，还是挺有用的，不仅仅可以减少代码量，而且能够增加时间的利用率。（目前我只学了简单的数组查找，有待补充）\n\n大概有以下几个STL中的二分查找函数：\n\n```C++\nbinary_search(a,a+n,key)    //返回是否存在值bool型的  \nlower_bound(a,a+n,key)      //下面两个都是指针型的  \nupper_bound(a,a+n,key)  \n/*升序排列的容器： \nlower_bound( const key_type &key ): 返回一个迭代器，指向键值>= key的第一个元素。 \nupper_bound( const key_type &key ): 返回一个迭代器，指向键值>key的第一个元素。 \n//降序排列的容器： \nlower_bound( const key_type &key ): 返回一个迭代器，指向键值<= key的第一个元素。 \nupper_bound( const key_type &key ):返回一个迭代器，指向键值<key的第一个元素。 \n*/  \n```\n\n以下介绍一下手工写的二分函数，也可以改成系STL的函数：\n一、判断是否存在key值：\n\n```C++\nbool search(int A[], int n, int target)  \n{  \n    int low = 0, high = n-1;  \n    while(low <= high)  \n    {  \n        int mid = low+((high-low)>>1);  \n        if(A[mid] == target)  \n            return true;  \n        else if(A[mid] < target)  \n            low = mid+1;  \n        else  \n            high = mid-1;  \n    }  \n    return false;  \n}  \n```\n二、存在相同key值时查找最先出现的位置：\n\n```C++\n//此函数返回的是第几个元素，非数组下标  \nint lower_search(int A[], int n, int target)  \n{  \n    int low = 0, high = n-1;  \n    while(low <= high)  \n    {  \n        int mid = low+((high-low)>>1);  \n        if(A[mid] == target)  \n        {  \n            if(mid > 0 && A[mid-1] == target)  \n                high = mid-1;  \n            else  \n                return mid;  \n        }  \n        else if(A[mid] < target)  \n            low = mid+1;  \n        else  \n            high = mid-1;  \n    }  \n    return -(low+1);  \n}  \n```\n三、存在相同元素的时候，返回最后出现的位置：\n```C++\n[cpp] view plain copy\n//此函数返回的是第几个元素，非数组下标  \nint upper_search(int A[], int n, int target)  \n{  \n    int low = 0, high = n-1;  \n    while(low <= high)  \n    {  \n        int mid = low+((high-low)>>1);  \n        if(A[mid] == target)  \n        {  \n            if(mid < n-1 && A[mid+1] == target)  \n                low = mid+1;  \n            else  \n                return mid;  \n        }  \n        else if(A[mid] < target)  \n            low = mid+1;  \n        else  \n            high = mid-1;  \n    }  \n    return -(low+1);  \n}  \n```\n三、存在多个key值时，返回位置差：\n```C++\nint equal_search(int A[], int n, int target){  \n    int tmp = upper_search(A, n, target)-lower_search(A, n, target);  \n    return tmp;  \n}  \n```","source":"_posts/C++STL二分查找函数集及补充.md","raw":"---\ntitle: C++STL二分查找函数集及补充\ndate: 2015-08-04 20:53:39\ntags: \"Tools\"\n---\n\nC++中还是有许多我未了解或者不常用的函数，比如今天写下的一些二分函数，还是挺有用的，不仅仅可以减少代码量，而且能够增加时间的利用率。（目前我只学了简单的数组查找，有待补充）\n\n大概有以下几个STL中的二分查找函数：\n\n```C++\nbinary_search(a,a+n,key)    //返回是否存在值bool型的  \nlower_bound(a,a+n,key)      //下面两个都是指针型的  \nupper_bound(a,a+n,key)  \n/*升序排列的容器： \nlower_bound( const key_type &key ): 返回一个迭代器，指向键值>= key的第一个元素。 \nupper_bound( const key_type &key ): 返回一个迭代器，指向键值>key的第一个元素。 \n//降序排列的容器： \nlower_bound( const key_type &key ): 返回一个迭代器，指向键值<= key的第一个元素。 \nupper_bound( const key_type &key ):返回一个迭代器，指向键值<key的第一个元素。 \n*/  \n```\n\n以下介绍一下手工写的二分函数，也可以改成系STL的函数：\n一、判断是否存在key值：\n\n```C++\nbool search(int A[], int n, int target)  \n{  \n    int low = 0, high = n-1;  \n    while(low <= high)  \n    {  \n        int mid = low+((high-low)>>1);  \n        if(A[mid] == target)  \n            return true;  \n        else if(A[mid] < target)  \n            low = mid+1;  \n        else  \n            high = mid-1;  \n    }  \n    return false;  \n}  \n```\n二、存在相同key值时查找最先出现的位置：\n\n```C++\n//此函数返回的是第几个元素，非数组下标  \nint lower_search(int A[], int n, int target)  \n{  \n    int low = 0, high = n-1;  \n    while(low <= high)  \n    {  \n        int mid = low+((high-low)>>1);  \n        if(A[mid] == target)  \n        {  \n            if(mid > 0 && A[mid-1] == target)  \n                high = mid-1;  \n            else  \n                return mid;  \n        }  \n        else if(A[mid] < target)  \n            low = mid+1;  \n        else  \n            high = mid-1;  \n    }  \n    return -(low+1);  \n}  \n```\n三、存在相同元素的时候，返回最后出现的位置：\n```C++\n[cpp] view plain copy\n//此函数返回的是第几个元素，非数组下标  \nint upper_search(int A[], int n, int target)  \n{  \n    int low = 0, high = n-1;  \n    while(low <= high)  \n    {  \n        int mid = low+((high-low)>>1);  \n        if(A[mid] == target)  \n        {  \n            if(mid < n-1 && A[mid+1] == target)  \n                low = mid+1;  \n            else  \n                return mid;  \n        }  \n        else if(A[mid] < target)  \n            low = mid+1;  \n        else  \n            high = mid-1;  \n    }  \n    return -(low+1);  \n}  \n```\n三、存在多个key值时，返回位置差：\n```C++\nint equal_search(int A[], int n, int target){  \n    int tmp = upper_search(A, n, target)-lower_search(A, n, target);  \n    return tmp;  \n}  \n```","slug":"C++STL二分查找函数集及补充","published":1,"updated":"2018-01-09T03:05:37.269Z","_id":"cjc71xmiv0012yg3i87tj4jsp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C++中还是有许多我未了解或者不常用的函数，比如今天写下的一些二分函数，还是挺有用的，不仅仅可以减少代码量，而且能够增加时间的利用率。（目前我只学了简单的数组查找，有待补充）</p>\n<p>大概有以下几个STL中的二分查找函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binary_search(a,a+n,key)    <span class=\"comment\">//返回是否存在值bool型的  </span></span><br><span class=\"line\">lower_bound(a,a+n,key)      <span class=\"comment\">//下面两个都是指针型的  </span></span><br><span class=\"line\">upper_bound(a,a+n,key)  </span><br><span class=\"line\"><span class=\"comment\">/*升序排列的容器： </span></span><br><span class=\"line\"><span class=\"comment\">lower_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&gt;= key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">upper_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&gt;key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">//降序排列的容器： </span></span><br><span class=\"line\"><span class=\"comment\">lower_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&lt;= key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">upper_bound( const key_type &amp;key ):返回一个迭代器，指向键值&lt;key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>以下介绍一下手工写的二分函数，也可以改成系STL的函数：<br>一、判断是否存在key值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = low+((high-low)&gt;&gt;<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[mid] == target)  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[mid] &lt; target)  </span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、存在相同key值时查找最先出现的位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此函数返回的是第几个元素，非数组下标  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lower_search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = low+((high-low)&gt;&gt;<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[mid] == target)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid &gt; <span class=\"number\">0</span> &amp;&amp; A[mid<span class=\"number\">-1</span>] == target)  </span><br><span class=\"line\">                high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[mid] &lt; target)  </span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(low+<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三、存在相同元素的时候，返回最后出现的位置：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[cpp] view plain copy</span><br><span class=\"line\"><span class=\"comment\">//此函数返回的是第几个元素，非数组下标  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">upper_search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = low+((high-low)&gt;&gt;<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[mid] == target)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid &lt; n<span class=\"number\">-1</span> &amp;&amp; A[mid+<span class=\"number\">1</span>] == target)  </span><br><span class=\"line\">                low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[mid] &lt; target)  </span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(low+<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三、存在多个key值时，返回位置差：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = upper_search(A, n, target)-lower_search(A, n, target);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>C++中还是有许多我未了解或者不常用的函数，比如今天写下的一些二分函数，还是挺有用的，不仅仅可以减少代码量，而且能够增加时间的利用率。（目前我只学了简单的数组查找，有待补充）</p>\n<p>大概有以下几个STL中的二分查找函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binary_search(a,a+n,key)    <span class=\"comment\">//返回是否存在值bool型的  </span></span><br><span class=\"line\">lower_bound(a,a+n,key)      <span class=\"comment\">//下面两个都是指针型的  </span></span><br><span class=\"line\">upper_bound(a,a+n,key)  </span><br><span class=\"line\"><span class=\"comment\">/*升序排列的容器： </span></span><br><span class=\"line\"><span class=\"comment\">lower_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&gt;= key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">upper_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&gt;key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">//降序排列的容器： </span></span><br><span class=\"line\"><span class=\"comment\">lower_bound( const key_type &amp;key ): 返回一个迭代器，指向键值&lt;= key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">upper_bound( const key_type &amp;key ):返回一个迭代器，指向键值&lt;key的第一个元素。 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>以下介绍一下手工写的二分函数，也可以改成系STL的函数：<br>一、判断是否存在key值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = low+((high-low)&gt;&gt;<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[mid] == target)  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[mid] &lt; target)  </span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二、存在相同key值时查找最先出现的位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此函数返回的是第几个元素，非数组下标  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lower_search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = low+((high-low)&gt;&gt;<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[mid] == target)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid &gt; <span class=\"number\">0</span> &amp;&amp; A[mid<span class=\"number\">-1</span>] == target)  </span><br><span class=\"line\">                high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[mid] &lt; target)  </span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(low+<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三、存在相同元素的时候，返回最后出现的位置：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[cpp] view plain copy</span><br><span class=\"line\"><span class=\"comment\">//此函数返回的是第几个元素，非数组下标  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">upper_search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = low+((high-low)&gt;&gt;<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[mid] == target)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid &lt; n<span class=\"number\">-1</span> &amp;&amp; A[mid+<span class=\"number\">1</span>] == target)  </span><br><span class=\"line\">                low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(A[mid] &lt; target)  </span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(low+<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三、存在多个key值时，返回位置差：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">equal_search</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> target)</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = upper_search(A, n, target)-lower_search(A, n, target);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"一些DP经典问题：HDU(hdoj) 2126，1176，2546，1159","date":"2015-07-27T13:12:51.000Z","_content":"\n今天开始做DP（动态规划）的题了，按照刘汝佳大叔的话来说，动态规划不是严格意义上的算法，而是一种解决问题的策略。果然，这个叫策略的东西真是变化多样，不过呢还是有一些规律可以寻找的。像网上有许多大牛们总结的背包问题，还是挺不错的。下面贴几道今天刚做的背包转换的问题，还有个入门级的的lcs题。\n\n   第一题：http://acm.hdu.edu.cn/showproblem.php?pid=2126\n\n大意：大家出去旅游，想买纪念品，但是带的钱有限，问问带的钱最多能在N种商品中买几种。给出每件商品的价格，求出有几种方案买到最多的纪念品种类。\n\n虽然没说买几件，但想一下：他是要求种类，不是总题的数量，所以自然想到了0/1背包，但是要求记录种类，所以我们可以多创建个数组Kinds，再每次dp的时候对kinds数组也进行滚动操作，以下给出内存优化0/1背包写法\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n  \nusing namespace std;  \n  \nint dp[500+10],kinds[500+10];//kinds用来记录种类数  \nint w[500+10];  \n  \nint main()  \n{  \n    int T;  \n    scanf(\"%d\",&T);  \n    while(T--)  \n    {  \n        int n,k;  \n        scanf(\"%d%d\",&n,&k);  \n        for(int i=0;i<n;i++)  \n            scanf(\"%d\",&w[i]);  \n        memset(dp,0,sizeof(dp));  \n        for(int i=0;i<=k+1;i++)  \n            kinds[i]=1;        //初始值记1，不然结果会全为0的  \n        for(int i=0;i<n;i++)  \n        {  \n            for(int j=k;j>=w[i];j--)  \n            {  \n                if(dp[j]==dp[j-w[i]]+1)             //这里是0/1背包的经典决策方式  \n                    kinds[j]=kinds[j-w[i]]+kinds[j];  \n                else if(dp[j]<dp[j-w[i]]+1)  \n                {  \n                    dp[j]=dp[j-w[i]]+1;             //找到更优解则更新数组  \n                    kinds[j]=kinds[j-w[i]];  \n                }  \n            }  \n        }  \n        if(dp[k])  \n            printf(\"You have %d selection(s) to buy with %d kind(s) of souvenirs.\\n\",kinds[k],dp[k]);  \n        else  \n            printf(\"Sorry, you can't buy anything.\\n\");  \n    }  \n    return 0;  \n}  \n```\n第二题 http://acm.hdu.edu.cn/showproblem.php?pid=1176\n\n刚开始做成了min的0/1背包，果断错了。。。感觉到了不懂脑筋的后果。\n\n这题大概这么解：总之最后拿5块钱来买最贵的菜maxp元，剩下的m-5块钱在剩下的菜中尽可能地多买，最好用完，然后用总钱数减去5元，再减最贵的就是（m-5-maxp)最少价格了,下面给出代码\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <algorithm>  \nusing namespace std;  \nint dp[1000+10];  \nint w[1000+10];  \nint main()  \n{  \n    int n;  \n    while(~scanf(\"%d\",&n)&&n)  \n    {  \n        memset(dp,0,sizeof(dp));  \n        memset(w,0,sizeof(w));  \n        for(int i=0;i<n;i++)  \n            scanf(\"%d\",&w[i]);  \n        sort(w,w+n);  \n        int maxf=w[n-1],tn=n-1;  \n        int m;  \n        scanf(\"%d\",&m);  \n        if(m<5) printf(\"%d\\n\",m);  \n        else  \n        {  \n            int tm=m-5;  \n            for(int i=0;i<tn;i++)  \n                for(int j=tm;j>=w[i];j--)  \n                    dp[j]=max(dp[j],dp[j-w[i]]+w[i]);  \n            printf(\"%d\\n\",m-dp[tm]-maxf);  \n        }  \n    }  \n    return 0;  \n}  \n\n```\n下面这题，类似经典的塔类问题：http://acm.hdu.edu.cn/showproblem.php?pid=2546\n采用自底向上的做法，用dp[ i ][ j ]来表示第i个坐标第j秒下落的馅饼数。\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <cmath>  \n#define MAXN 100000+10  \nusing namespace std;  \n  \nint dp[15][MAXN];  \nint t=0;  \nint main()  \n{  \n    int n;  \n    while(~scanf(\"%d\",&n)&&n){  \n        t=0;  \n        memset(dp,0,sizeof(dp));  \n        for(int i=0;i<n;i++){  \n            int x,tt;  \n            scanf(\"%d%d\",&x,&tt);  \n            dp[x+1][tt]++;  \n            t=max(tt,t);  \n        }  \n        for(int i=t-1;i>=0;i--)  \n            for(int j=1;j<=11;j++)  \n                dp[j][i]+=max(dp[j][i+1],max(dp[j+1][i+1],dp[j-1][i+1]));  \n        printf(\"%d\\n\",dp[6][0]);  \n    }  \n    return 0;  \n}  \n\n```\n最后一题是最长公共子序列问题，我还在研究怎么输出来这个最长串：\nhttp://acm.hdu.edu.cn/showproblem.php?pid=1159\n```C++\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \nusing namespace std;  \n  \nchar a[1000],b[1000];  \nint dp[1000][1000];  \n  \nint dps(int len1,int len2,char a[],char b[]){  \n    memset(dp,0,sizeof(dp));  \n    for(int i=1;i<=len1;i++){  \n        for(int j=1;j<=len2;j++){  \n            if(a[i-1]==b[j-1]) dp[i][j]=dp[i-1][j-1]+1;  \n            else{  \n                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);  \n            }  \n        }  \n    }  \n    return dp[len1][len2];  \n}  \n  \n  \nint main()  \n{  \n    while(~scanf(\"%s%s\",a,b)&&strlen(a)){  \n        int len1=strlen(a);  \n        int len2=strlen(b);  \n        printf(\"%d\\n\",dps(len1,len2,a,b));  \n    }  \n    return 0;  \n}  \n```\n继续学习DP ！","source":"_posts/一些DP经典问题：HDU(hdoj) 2126，1176，2546，1159.md","raw":"---\ntitle: 一些DP经典问题：HDU(hdoj) 2126，1176，2546，1159\ndate: 2015-07-27 21:12:51\ntags: \"ACM&OJ\"\n---\n\n今天开始做DP（动态规划）的题了，按照刘汝佳大叔的话来说，动态规划不是严格意义上的算法，而是一种解决问题的策略。果然，这个叫策略的东西真是变化多样，不过呢还是有一些规律可以寻找的。像网上有许多大牛们总结的背包问题，还是挺不错的。下面贴几道今天刚做的背包转换的问题，还有个入门级的的lcs题。\n\n   第一题：http://acm.hdu.edu.cn/showproblem.php?pid=2126\n\n大意：大家出去旅游，想买纪念品，但是带的钱有限，问问带的钱最多能在N种商品中买几种。给出每件商品的价格，求出有几种方案买到最多的纪念品种类。\n\n虽然没说买几件，但想一下：他是要求种类，不是总题的数量，所以自然想到了0/1背包，但是要求记录种类，所以我们可以多创建个数组Kinds，再每次dp的时候对kinds数组也进行滚动操作，以下给出内存优化0/1背包写法\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n  \nusing namespace std;  \n  \nint dp[500+10],kinds[500+10];//kinds用来记录种类数  \nint w[500+10];  \n  \nint main()  \n{  \n    int T;  \n    scanf(\"%d\",&T);  \n    while(T--)  \n    {  \n        int n,k;  \n        scanf(\"%d%d\",&n,&k);  \n        for(int i=0;i<n;i++)  \n            scanf(\"%d\",&w[i]);  \n        memset(dp,0,sizeof(dp));  \n        for(int i=0;i<=k+1;i++)  \n            kinds[i]=1;        //初始值记1，不然结果会全为0的  \n        for(int i=0;i<n;i++)  \n        {  \n            for(int j=k;j>=w[i];j--)  \n            {  \n                if(dp[j]==dp[j-w[i]]+1)             //这里是0/1背包的经典决策方式  \n                    kinds[j]=kinds[j-w[i]]+kinds[j];  \n                else if(dp[j]<dp[j-w[i]]+1)  \n                {  \n                    dp[j]=dp[j-w[i]]+1;             //找到更优解则更新数组  \n                    kinds[j]=kinds[j-w[i]];  \n                }  \n            }  \n        }  \n        if(dp[k])  \n            printf(\"You have %d selection(s) to buy with %d kind(s) of souvenirs.\\n\",kinds[k],dp[k]);  \n        else  \n            printf(\"Sorry, you can't buy anything.\\n\");  \n    }  \n    return 0;  \n}  \n```\n第二题 http://acm.hdu.edu.cn/showproblem.php?pid=1176\n\n刚开始做成了min的0/1背包，果断错了。。。感觉到了不懂脑筋的后果。\n\n这题大概这么解：总之最后拿5块钱来买最贵的菜maxp元，剩下的m-5块钱在剩下的菜中尽可能地多买，最好用完，然后用总钱数减去5元，再减最贵的就是（m-5-maxp)最少价格了,下面给出代码\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <algorithm>  \nusing namespace std;  \nint dp[1000+10];  \nint w[1000+10];  \nint main()  \n{  \n    int n;  \n    while(~scanf(\"%d\",&n)&&n)  \n    {  \n        memset(dp,0,sizeof(dp));  \n        memset(w,0,sizeof(w));  \n        for(int i=0;i<n;i++)  \n            scanf(\"%d\",&w[i]);  \n        sort(w,w+n);  \n        int maxf=w[n-1],tn=n-1;  \n        int m;  \n        scanf(\"%d\",&m);  \n        if(m<5) printf(\"%d\\n\",m);  \n        else  \n        {  \n            int tm=m-5;  \n            for(int i=0;i<tn;i++)  \n                for(int j=tm;j>=w[i];j--)  \n                    dp[j]=max(dp[j],dp[j-w[i]]+w[i]);  \n            printf(\"%d\\n\",m-dp[tm]-maxf);  \n        }  \n    }  \n    return 0;  \n}  \n\n```\n下面这题，类似经典的塔类问题：http://acm.hdu.edu.cn/showproblem.php?pid=2546\n采用自底向上的做法，用dp[ i ][ j ]来表示第i个坐标第j秒下落的馅饼数。\n\n```C++\n#include <iostream>  \n#include <cstdio>  \n#include <cstring>  \n#include <cmath>  \n#define MAXN 100000+10  \nusing namespace std;  \n  \nint dp[15][MAXN];  \nint t=0;  \nint main()  \n{  \n    int n;  \n    while(~scanf(\"%d\",&n)&&n){  \n        t=0;  \n        memset(dp,0,sizeof(dp));  \n        for(int i=0;i<n;i++){  \n            int x,tt;  \n            scanf(\"%d%d\",&x,&tt);  \n            dp[x+1][tt]++;  \n            t=max(tt,t);  \n        }  \n        for(int i=t-1;i>=0;i--)  \n            for(int j=1;j<=11;j++)  \n                dp[j][i]+=max(dp[j][i+1],max(dp[j+1][i+1],dp[j-1][i+1]));  \n        printf(\"%d\\n\",dp[6][0]);  \n    }  \n    return 0;  \n}  \n\n```\n最后一题是最长公共子序列问题，我还在研究怎么输出来这个最长串：\nhttp://acm.hdu.edu.cn/showproblem.php?pid=1159\n```C++\n#include <iostream>  \n#include <cstring>  \n#include <cstdio>  \nusing namespace std;  \n  \nchar a[1000],b[1000];  \nint dp[1000][1000];  \n  \nint dps(int len1,int len2,char a[],char b[]){  \n    memset(dp,0,sizeof(dp));  \n    for(int i=1;i<=len1;i++){  \n        for(int j=1;j<=len2;j++){  \n            if(a[i-1]==b[j-1]) dp[i][j]=dp[i-1][j-1]+1;  \n            else{  \n                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);  \n            }  \n        }  \n    }  \n    return dp[len1][len2];  \n}  \n  \n  \nint main()  \n{  \n    while(~scanf(\"%s%s\",a,b)&&strlen(a)){  \n        int len1=strlen(a);  \n        int len2=strlen(b);  \n        printf(\"%d\\n\",dps(len1,len2,a,b));  \n    }  \n    return 0;  \n}  \n```\n继续学习DP ！","slug":"一些DP经典问题：HDU(hdoj) 2126，1176，2546，1159","published":1,"updated":"2018-01-09T03:02:32.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc71xx260014yg3ih09djt7p","content":"<p>今天开始做DP（动态规划）的题了，按照刘汝佳大叔的话来说，动态规划不是严格意义上的算法，而是一种解决问题的策略。果然，这个叫策略的东西真是变化多样，不过呢还是有一些规律可以寻找的。像网上有许多大牛们总结的背包问题，还是挺不错的。下面贴几道今天刚做的背包转换的问题，还有个入门级的的lcs题。</p>\n<p>   第一题：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2126\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=2126</a></p>\n<p>大意：大家出去旅游，想买纪念品，但是带的钱有限，问问带的钱最多能在N种商品中买几种。给出每件商品的价格，求出有几种方案买到最多的纪念品种类。</p>\n<p>虽然没说买几件，但想一下：他是要求种类，不是总题的数量，所以自然想到了0/1背包，但是要求记录种类，所以我们可以多创建个数组Kinds，再每次dp的时候对kinds数组也进行滚动操作，以下给出内存优化0/1背包写法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">500</span>+<span class=\"number\">10</span>],kinds[<span class=\"number\">500</span>+<span class=\"number\">10</span>];<span class=\"comment\">//kinds用来记录种类数  </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> w[<span class=\"number\">500</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> n,k;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w[i]);  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=k+<span class=\"number\">1</span>;i++)  </span><br><span class=\"line\">            kinds[i]=<span class=\"number\">1</span>;        <span class=\"comment\">//初始值记1，不然结果会全为0的  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=k;j&gt;=w[i];j--)  </span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[j]==dp[j-w[i]]+<span class=\"number\">1</span>)             <span class=\"comment\">//这里是0/1背包的经典决策方式  </span></span><br><span class=\"line\">                    kinds[j]=kinds[j-w[i]]+kinds[j];  </span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dp[j]&lt;dp[j-w[i]]+<span class=\"number\">1</span>)  </span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    dp[j]=dp[j-w[i]]+<span class=\"number\">1</span>;             <span class=\"comment\">//找到更优解则更新数组  </span></span><br><span class=\"line\">                    kinds[j]=kinds[j-w[i]];  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[k])  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"You have %d selection(s) to buy with %d kind(s) of souvenirs.\\n\"</span>,kinds[k],dp[k]);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorry, you can't buy anything.\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二题 <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1176\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1176</a></p>\n<p>刚开始做成了min的0/1背包，果断错了。。。感觉到了不懂脑筋的后果。</p>\n<p>这题大概这么解：总之最后拿5块钱来买最贵的菜maxp元，剩下的m-5块钱在剩下的菜中尽可能地多买，最好用完，然后用总钱数减去5元，再减最贵的就是（m-5-maxp)最少价格了,下面给出代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1000</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> w[<span class=\"number\">1000</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)&amp;&amp;n)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(w,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(w));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w[i]);  </span><br><span class=\"line\">        sort(w,w+n);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxf=w[n<span class=\"number\">-1</span>],tn=n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> m;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&lt;<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,m);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> tm=m<span class=\"number\">-5</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;tn;i++)  </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=tm;j&gt;=w[i];j--)  </span><br><span class=\"line\">                    dp[j]=max(dp[j],dp[j-w[i]]+w[i]);  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,m-dp[tm]-maxf);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这题，类似经典的塔类问题：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2546\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=2546</a><br>采用自底向上的做法，用dp[ i ][ j ]来表示第i个坐标第j秒下落的馅饼数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100000+10  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">15</span>][MAXN];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)&amp;&amp;n)&#123;  </span><br><span class=\"line\">        t=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,tt;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;tt);  </span><br><span class=\"line\">            dp[x+<span class=\"number\">1</span>][tt]++;  </span><br><span class=\"line\">            t=max(tt,t);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=t<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">11</span>;j++)  </span><br><span class=\"line\">                dp[j][i]+=max(dp[j][i+<span class=\"number\">1</span>],max(dp[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>],dp[j<span class=\"number\">-1</span>][i+<span class=\"number\">1</span>]));  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dp[<span class=\"number\">6</span>][<span class=\"number\">0</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后一题是最长公共子序列问题，我还在研究怎么输出来这个最长串：<br><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1159\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1159</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">1000</span>],b[<span class=\"number\">1000</span>];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dps</span><span class=\"params\">(<span class=\"keyword\">int</span> len1,<span class=\"keyword\">int</span> len2,<span class=\"keyword\">char</span> a[],<span class=\"keyword\">char</span> b[])</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len1;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=len2;j++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i<span class=\"number\">-1</span>]==b[j<span class=\"number\">-1</span>]) dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                dp[i][j]=max(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%s\"</span>,a,b)&amp;&amp;<span class=\"built_in\">strlen</span>(a))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1=<span class=\"built_in\">strlen</span>(a);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2=<span class=\"built_in\">strlen</span>(b);  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dps(len1,len2,a,b));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>继续学习DP ！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天开始做DP（动态规划）的题了，按照刘汝佳大叔的话来说，动态规划不是严格意义上的算法，而是一种解决问题的策略。果然，这个叫策略的东西真是变化多样，不过呢还是有一些规律可以寻找的。像网上有许多大牛们总结的背包问题，还是挺不错的。下面贴几道今天刚做的背包转换的问题，还有个入门级的的lcs题。</p>\n<p>   第一题：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2126\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=2126</a></p>\n<p>大意：大家出去旅游，想买纪念品，但是带的钱有限，问问带的钱最多能在N种商品中买几种。给出每件商品的价格，求出有几种方案买到最多的纪念品种类。</p>\n<p>虽然没说买几件，但想一下：他是要求种类，不是总题的数量，所以自然想到了0/1背包，但是要求记录种类，所以我们可以多创建个数组Kinds，再每次dp的时候对kinds数组也进行滚动操作，以下给出内存优化0/1背包写法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">500</span>+<span class=\"number\">10</span>],kinds[<span class=\"number\">500</span>+<span class=\"number\">10</span>];<span class=\"comment\">//kinds用来记录种类数  </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> w[<span class=\"number\">500</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;  </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> n,k;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w[i]);  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=k+<span class=\"number\">1</span>;i++)  </span><br><span class=\"line\">            kinds[i]=<span class=\"number\">1</span>;        <span class=\"comment\">//初始值记1，不然结果会全为0的  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=k;j&gt;=w[i];j--)  </span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[j]==dp[j-w[i]]+<span class=\"number\">1</span>)             <span class=\"comment\">//这里是0/1背包的经典决策方式  </span></span><br><span class=\"line\">                    kinds[j]=kinds[j-w[i]]+kinds[j];  </span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dp[j]&lt;dp[j-w[i]]+<span class=\"number\">1</span>)  </span><br><span class=\"line\">                &#123;  </span><br><span class=\"line\">                    dp[j]=dp[j-w[i]]+<span class=\"number\">1</span>;             <span class=\"comment\">//找到更优解则更新数组  </span></span><br><span class=\"line\">                    kinds[j]=kinds[j-w[i]];  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[k])  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"You have %d selection(s) to buy with %d kind(s) of souvenirs.\\n\"</span>,kinds[k],dp[k]);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorry, you can't buy anything.\\n\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二题 <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1176\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1176</a></p>\n<p>刚开始做成了min的0/1背包，果断错了。。。感觉到了不懂脑筋的后果。</p>\n<p>这题大概这么解：总之最后拿5块钱来买最贵的菜maxp元，剩下的m-5块钱在剩下的菜中尽可能地多买，最好用完，然后用总钱数减去5元，再减最贵的就是（m-5-maxp)最少价格了,下面给出代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1000</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> w[<span class=\"number\">1000</span>+<span class=\"number\">10</span>];  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)&amp;&amp;n)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(w,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(w));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w[i]);  </span><br><span class=\"line\">        sort(w,w+n);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxf=w[n<span class=\"number\">-1</span>],tn=n<span class=\"number\">-1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> m;  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&lt;<span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,m);  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> tm=m<span class=\"number\">-5</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;tn;i++)  </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=tm;j&gt;=w[i];j--)  </span><br><span class=\"line\">                    dp[j]=max(dp[j],dp[j-w[i]]+w[i]);  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,m-dp[tm]-maxf);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这题，类似经典的塔类问题：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2546\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=2546</a><br>采用自底向上的做法，用dp[ i ][ j ]来表示第i个坐标第j秒下落的馅饼数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100000+10  </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">15</span>][MAXN];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)&amp;&amp;n)&#123;  </span><br><span class=\"line\">        t=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,tt;  </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;tt);  </span><br><span class=\"line\">            dp[x+<span class=\"number\">1</span>][tt]++;  </span><br><span class=\"line\">            t=max(tt,t);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=t<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">11</span>;j++)  </span><br><span class=\"line\">                dp[j][i]+=max(dp[j][i+<span class=\"number\">1</span>],max(dp[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>],dp[j<span class=\"number\">-1</span>][i+<span class=\"number\">1</span>]));  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dp[<span class=\"number\">6</span>][<span class=\"number\">0</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后一题是最长公共子序列问题，我还在研究怎么输出来这个最长串：<br><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1159\" target=\"_blank\" rel=\"noopener\">http://acm.hdu.edu.cn/showproblem.php?pid=1159</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">char</span> a[<span class=\"number\">1000</span>],b[<span class=\"number\">1000</span>];  </span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dps</span><span class=\"params\">(<span class=\"keyword\">int</span> len1,<span class=\"keyword\">int</span> len2,<span class=\"keyword\">char</span> a[],<span class=\"keyword\">char</span> b[])</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len1;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=len2;j++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i<span class=\"number\">-1</span>]==b[j<span class=\"number\">-1</span>]) dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                dp[i][j]=max(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s%s\"</span>,a,b)&amp;&amp;<span class=\"built_in\">strlen</span>(a))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1=<span class=\"built_in\">strlen</span>(a);  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2=<span class=\"built_in\">strlen</span>(b);  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dps(len1,len2,a,b));  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>继续学习DP ！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjc71nzu10000yg3igby4bwjv","tag_id":"cjc71nzu90003yg3il29y4mi0","_id":"cjc71nzuf0008yg3ive37x0jd"},{"post_id":"cjc71nzu70002yg3ik0x8mwvd","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzuk000dyg3iwo95hufw"},{"post_id":"cjc71nzuh000ayg3igyqa6jzr","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzun000fyg3iuzi6ak3a"},{"post_id":"cjc71nzuj000cyg3id7g0gro0","tag_id":"cjc71nzu90003yg3il29y4mi0","_id":"cjc71nzuo000iyg3ir6xuodvi"},{"post_id":"cjc71nzub0004yg3iksrzk8i2","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzup000kyg3ip4fhl25z"},{"post_id":"cjc71nzul000eyg3ikhwya0qt","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzuq000myg3iadlo5n6w"},{"post_id":"cjc71nzun000hyg3iouxl8x6k","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzur000nyg3i8rwd64fh"},{"post_id":"cjc71nzuc0005yg3ii6xx6itj","tag_id":"cjc71nzun000gyg3isk5076is","_id":"cjc71nzur000oyg3i3exop9eo"},{"post_id":"cjc71nzuo000jyg3iq08mg1oj","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzur000pyg3izv14t96k"},{"post_id":"cjc71nzud0006yg3i4r10593p","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71nzur000qyg3ibn41sohs"},{"post_id":"cjc71qnrs000tyg3iyo5j7sle","tag_id":"cjc71nzun000gyg3isk5076is","_id":"cjc71sewz000vyg3i2qheba4s"},{"post_id":"cjc71xx260014yg3ih09djt7p","tag_id":"cjc71nzue0007yg3i1hpjbsnl","_id":"cjc71xx280015yg3ipeglgbhj"},{"post_id":"cjc71xmiv0012yg3i87tj4jsp","tag_id":"cjc71nzun000gyg3isk5076is","_id":"cjc71zg4k0016yg3iwxzrm0kh"}],"Tag":[{"name":"Projects","_id":"cjc71nzu90003yg3il29y4mi0"},{"name":"ACM&OJ","_id":"cjc71nzue0007yg3i1hpjbsnl"},{"name":"Tools","_id":"cjc71nzun000gyg3isk5076is"}]}}